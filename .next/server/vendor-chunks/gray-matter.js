"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gray-matter";
exports.ids = ["vendor-chunks/gray-matter"];
exports.modules = {

/***/ "(rsc)/../node_modules/gray-matter/index.js":
/*!********************************************!*\
  !*** ../node_modules/gray-matter/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst sections = __webpack_require__(/*! section-matter */ \"(rsc)/../node_modules/section-matter/index.js\");\nconst defaults = __webpack_require__(/*! ./lib/defaults */ \"(rsc)/../node_modules/gray-matter/lib/defaults.js\");\nconst stringify = __webpack_require__(/*! ./lib/stringify */ \"(rsc)/../node_modules/gray-matter/lib/stringify.js\");\nconst excerpt = __webpack_require__(/*! ./lib/excerpt */ \"(rsc)/../node_modules/gray-matter/lib/excerpt.js\");\nconst engines = __webpack_require__(/*! ./lib/engines */ \"(rsc)/../node_modules/gray-matter/lib/engines.js\");\nconst toFile = __webpack_require__(/*! ./lib/to-file */ \"(rsc)/../node_modules/gray-matter/lib/to-file.js\");\nconst parse = __webpack_require__(/*! ./lib/parse */ \"(rsc)/../node_modules/gray-matter/lib/parse.js\");\nconst utils = __webpack_require__(/*! ./lib/utils */ \"(rsc)/../node_modules/gray-matter/lib/utils.js\");\n/**\n * Takes a string or object with `content` property, extracts\n * and parses front-matter from the string, then returns an object\n * with `data`, `content` and other [useful properties](#returned-object).\n *\n * ```js\n * const matter = require('gray-matter');\n * console.log(matter('---\\ntitle: Home\\n---\\nOther stuff'));\n * //=> { data: { title: 'Home'}, content: 'Other stuff' }\n * ```\n * @param {Object|String} `input` String, or object with `content` string\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */ function matter(input, options) {\n    if (input === \"\") {\n        return {\n            data: {},\n            content: input,\n            excerpt: \"\",\n            orig: input\n        };\n    }\n    let file = toFile(input);\n    const cached = matter.cache[file.content];\n    if (!options) {\n        if (cached) {\n            file = Object.assign({}, cached);\n            file.orig = cached.orig;\n            return file;\n        }\n        // only cache if there are no options passed. if we cache when options\n        // are passed, we would need to also cache options values, which would\n        // negate any performance benefits of caching\n        matter.cache[file.content] = file;\n    }\n    return parseMatter(file, options);\n}\n/**\n * Parse front matter\n */ function parseMatter(file, options) {\n    const opts = defaults(options);\n    const open = opts.delimiters[0];\n    const close = \"\\n\" + opts.delimiters[1];\n    let str = file.content;\n    if (opts.language) {\n        file.language = opts.language;\n    }\n    // get the length of the opening delimiter\n    const openLen = open.length;\n    if (!utils.startsWith(str, open, openLen)) {\n        excerpt(file, opts);\n        return file;\n    }\n    // if the next character after the opening delimiter is\n    // a character from the delimiter, then it's not a front-\n    // matter delimiter\n    if (str.charAt(openLen) === open.slice(-1)) {\n        return file;\n    }\n    // strip the opening delimiter\n    str = str.slice(openLen);\n    const len = str.length;\n    // use the language defined after first delimiter, if it exists\n    const language = matter.language(str, opts);\n    if (language.name) {\n        file.language = language.name;\n        str = str.slice(language.raw.length);\n    }\n    // get the index of the closing delimiter\n    let closeIndex = str.indexOf(close);\n    if (closeIndex === -1) {\n        closeIndex = len;\n    }\n    // get the raw front-matter block\n    file.matter = str.slice(0, closeIndex);\n    const block = file.matter.replace(/^\\s*#[^\\n]+/gm, \"\").trim();\n    if (block === \"\") {\n        file.isEmpty = true;\n        file.empty = file.content;\n        file.data = {};\n    } else {\n        // create file.data by parsing the raw file.matter block\n        file.data = parse(file.language, file.matter, opts);\n    }\n    // update file.content\n    if (closeIndex === len) {\n        file.content = \"\";\n    } else {\n        file.content = str.slice(closeIndex + close.length);\n        if (file.content[0] === \"\\r\") {\n            file.content = file.content.slice(1);\n        }\n        if (file.content[0] === \"\\n\") {\n            file.content = file.content.slice(1);\n        }\n    }\n    excerpt(file, opts);\n    if (opts.sections === true || typeof opts.section === \"function\") {\n        sections(file, opts.section);\n    }\n    return file;\n}\n/**\n * Expose engines\n */ matter.engines = engines;\n/**\n * Stringify an object to YAML or the specified language, and\n * append it to the given string. By default, only YAML and JSON\n * can be stringified. See the [engines](#engines) section to learn\n * how to stringify other languages.\n *\n * ```js\n * console.log(matter.stringify('foo bar baz', {title: 'Home'}));\n * // results in:\n * // ---\n * // title: Home\n * // ---\n * // foo bar baz\n * ```\n * @param {String|Object} `file` The content string to append to stringified front-matter, or a file object with `file.content` string.\n * @param {Object} `data` Front matter to stringify.\n * @param {Object} `options` [Options](#options) to pass to gray-matter and [js-yaml].\n * @return {String} Returns a string created by wrapping stringified yaml with delimiters, and appending that to the given string.\n * @api public\n */ matter.stringify = function(file, data, options) {\n    if (typeof file === \"string\") file = matter(file, options);\n    return stringify(file, data, options);\n};\n/**\n * Synchronously read a file from the file system and parse\n * front matter. Returns the same object as the [main function](#matter).\n *\n * ```js\n * const file = matter.read('./content/blog-post.md');\n * ```\n * @param {String} `filepath` file path of the file to read.\n * @param {Object} `options` [Options](#options) to pass to gray-matter.\n * @return {Object} Returns [an object](#returned-object) with `data` and `content`\n * @api public\n */ matter.read = function(filepath, options) {\n    const str = fs.readFileSync(filepath, \"utf8\");\n    const file = matter(str, options);\n    file.path = filepath;\n    return file;\n};\n/**\n * Returns true if the given `string` has front matter.\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Boolean} True if front matter exists.\n * @api public\n */ matter.test = function(str, options) {\n    return utils.startsWith(str, defaults(options).delimiters[0]);\n};\n/**\n * Detect the language to use, if one is defined after the\n * first front-matter delimiter.\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Object} Object with `raw` (actual language string), and `name`, the language with whitespace trimmed\n */ matter.language = function(str, options) {\n    const opts = defaults(options);\n    const open = opts.delimiters[0];\n    if (matter.test(str)) {\n        str = str.slice(open.length);\n    }\n    const language = str.slice(0, str.search(/\\r?\\n/));\n    return {\n        raw: language,\n        name: language ? language.trim() : \"\"\n    };\n};\n/**\n * Expose `matter`\n */ matter.cache = {};\nmatter.clearCache = function() {\n    matter.cache = {};\n};\nmodule.exports = matter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/defaults.js":
/*!***************************************************!*\
  !*** ../node_modules/gray-matter/lib/defaults.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst engines = __webpack_require__(/*! ./engines */ \"(rsc)/../node_modules/gray-matter/lib/engines.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/gray-matter/lib/utils.js\");\nmodule.exports = function(options) {\n    const opts = Object.assign({}, options);\n    // ensure that delimiters are an array\n    opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || \"---\");\n    if (opts.delimiters.length === 1) {\n        opts.delimiters.push(opts.delimiters[0]);\n    }\n    opts.language = (opts.language || opts.lang || \"yaml\").toLowerCase();\n    opts.engines = Object.assign({}, engines, opts.parsers, opts.engines);\n    return opts;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFVBQVVDLG1CQUFPQSxDQUFDO0FBQ3hCLE1BQU1DLFFBQVFELG1CQUFPQSxDQUFDO0FBRXRCRSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsT0FBTztJQUMvQixNQUFNQyxPQUFPQyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSDtJQUUvQixzQ0FBc0M7SUFDdENDLEtBQUtHLFVBQVUsR0FBR1AsTUFBTVEsUUFBUSxDQUFDSixLQUFLSyxNQUFNLElBQUlMLEtBQUtHLFVBQVUsSUFBSTtJQUNuRSxJQUFJSCxLQUFLRyxVQUFVLENBQUNHLE1BQU0sS0FBSyxHQUFHO1FBQ2hDTixLQUFLRyxVQUFVLENBQUNJLElBQUksQ0FBQ1AsS0FBS0csVUFBVSxDQUFDLEVBQUU7SUFDekM7SUFFQUgsS0FBS1EsUUFBUSxHQUFHLENBQUNSLEtBQUtRLFFBQVEsSUFBSVIsS0FBS1MsSUFBSSxJQUFJLE1BQUssRUFBR0MsV0FBVztJQUNsRVYsS0FBS04sT0FBTyxHQUFHTyxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHUixTQUFTTSxLQUFLVyxPQUFPLEVBQUVYLEtBQUtOLE9BQU87SUFDcEUsT0FBT007QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvZGVmYXVsdHMuanM/MTkxNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGVuZ2luZXMgPSByZXF1aXJlKCcuL2VuZ2luZXMnKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuXG4gIC8vIGVuc3VyZSB0aGF0IGRlbGltaXRlcnMgYXJlIGFuIGFycmF5XG4gIG9wdHMuZGVsaW1pdGVycyA9IHV0aWxzLmFycmF5aWZ5KG9wdHMuZGVsaW1zIHx8IG9wdHMuZGVsaW1pdGVycyB8fCAnLS0tJyk7XG4gIGlmIChvcHRzLmRlbGltaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgb3B0cy5kZWxpbWl0ZXJzLnB1c2gob3B0cy5kZWxpbWl0ZXJzWzBdKTtcbiAgfVxuXG4gIG9wdHMubGFuZ3VhZ2UgPSAob3B0cy5sYW5ndWFnZSB8fCBvcHRzLmxhbmcgfHwgJ3lhbWwnKS50b0xvd2VyQ2FzZSgpO1xuICBvcHRzLmVuZ2luZXMgPSBPYmplY3QuYXNzaWduKHt9LCBlbmdpbmVzLCBvcHRzLnBhcnNlcnMsIG9wdHMuZW5naW5lcyk7XG4gIHJldHVybiBvcHRzO1xufTtcbiJdLCJuYW1lcyI6WyJlbmdpbmVzIiwicmVxdWlyZSIsInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9wdGlvbnMiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwiZGVsaW1pdGVycyIsImFycmF5aWZ5IiwiZGVsaW1zIiwibGVuZ3RoIiwicHVzaCIsImxhbmd1YWdlIiwibGFuZyIsInRvTG93ZXJDYXNlIiwicGFyc2VycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/defaults.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/engine.js":
/*!*************************************************!*\
  !*** ../node_modules/gray-matter/lib/engine.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\nmodule.exports = function(name, options) {\n    let engine = options.engines[name] || options.engines[aliase(name)];\n    if (typeof engine === \"undefined\") {\n        throw new Error('gray-matter engine \"' + name + '\" is not registered');\n    }\n    if (typeof engine === \"function\") {\n        engine = {\n            parse: engine\n        };\n    }\n    return engine;\n};\nfunction aliase(name) {\n    switch(name.toLowerCase()){\n        case \"js\":\n        case \"javascript\":\n            return \"javascript\";\n        case \"coffee\":\n        case \"coffeescript\":\n        case \"cson\":\n            return \"coffee\";\n        case \"yaml\":\n        case \"yml\":\n            return \"yaml\";\n        default:\n            {\n                return name;\n            }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9lbmdpbmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLElBQUksRUFBRUMsT0FBTztJQUNyQyxJQUFJQyxTQUFTRCxRQUFRRSxPQUFPLENBQUNILEtBQUssSUFBSUMsUUFBUUUsT0FBTyxDQUFDQyxPQUFPSixNQUFNO0lBQ25FLElBQUksT0FBT0UsV0FBVyxhQUFhO1FBQ2pDLE1BQU0sSUFBSUcsTUFBTSx5QkFBeUJMLE9BQU87SUFDbEQ7SUFDQSxJQUFJLE9BQU9FLFdBQVcsWUFBWTtRQUNoQ0EsU0FBUztZQUFFSSxPQUFPSjtRQUFPO0lBQzNCO0lBQ0EsT0FBT0E7QUFDVDtBQUVBLFNBQVNFLE9BQU9KLElBQUk7SUFDbEIsT0FBUUEsS0FBS08sV0FBVztRQUN0QixLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztRQUNMLEtBQUs7WUFDSCxPQUFPO1FBQ1Q7WUFBUztnQkFDUCxPQUFPUDtZQUNUO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvZW5naW5lLmpzPzkwODIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG5hbWUsIG9wdGlvbnMpIHtcbiAgbGV0IGVuZ2luZSA9IG9wdGlvbnMuZW5naW5lc1tuYW1lXSB8fCBvcHRpb25zLmVuZ2luZXNbYWxpYXNlKG5hbWUpXTtcbiAgaWYgKHR5cGVvZiBlbmdpbmUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdncmF5LW1hdHRlciBlbmdpbmUgXCInICsgbmFtZSArICdcIiBpcyBub3QgcmVnaXN0ZXJlZCcpO1xuICB9XG4gIGlmICh0eXBlb2YgZW5naW5lID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZW5naW5lID0geyBwYXJzZTogZW5naW5lIH07XG4gIH1cbiAgcmV0dXJuIGVuZ2luZTtcbn07XG5cbmZ1bmN0aW9uIGFsaWFzZShuYW1lKSB7XG4gIHN3aXRjaCAobmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnanMnOlxuICAgIGNhc2UgJ2phdmFzY3JpcHQnOlxuICAgICAgcmV0dXJuICdqYXZhc2NyaXB0JztcbiAgICBjYXNlICdjb2ZmZWUnOlxuICAgIGNhc2UgJ2NvZmZlZXNjcmlwdCc6XG4gICAgY2FzZSAnY3Nvbic6XG4gICAgICByZXR1cm4gJ2NvZmZlZSc7XG4gICAgY2FzZSAneWFtbCc6XG4gICAgY2FzZSAneW1sJzpcbiAgICAgIHJldHVybiAneWFtbCc7XG4gICAgZGVmYXVsdDoge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm5hbWUiLCJvcHRpb25zIiwiZW5naW5lIiwiZW5naW5lcyIsImFsaWFzZSIsIkVycm9yIiwicGFyc2UiLCJ0b0xvd2VyQ2FzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/engine.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/engines.js":
/*!**************************************************!*\
  !*** ../node_modules/gray-matter/lib/engines.js ***!
  \**************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\nconst yaml = __webpack_require__(/*! js-yaml */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/index.js\");\n/**\n * Default engines\n */ const engines = exports = module.exports;\n/**\n * YAML\n */ engines.yaml = {\n    parse: yaml.safeLoad.bind(yaml),\n    stringify: yaml.safeDump.bind(yaml)\n};\n/**\n * JSON\n */ engines.json = {\n    parse: JSON.parse.bind(JSON),\n    stringify: function(obj, options) {\n        const opts = Object.assign({\n            replacer: null,\n            space: 2\n        }, options);\n        return JSON.stringify(obj, opts.replacer, opts.space);\n    }\n};\n/**\n * JavaScript\n */ engines.javascript = {\n    parse: function parse(str, options, wrap) {\n        /* eslint no-eval: 0 */ try {\n            if (wrap !== false) {\n                str = \"(function() {\\nreturn \" + str.trim() + \";\\n}());\";\n            }\n            return eval(str) || {};\n        } catch (err) {\n            if (wrap !== false && /(unexpected|identifier)/i.test(err.message)) {\n                return parse(str, options, false);\n            }\n            throw new SyntaxError(err);\n        }\n    },\n    stringify: function() {\n        throw new Error(\"stringifying JavaScript is not supported\");\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9lbmdpbmVzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFckI7O0NBRUMsR0FFRCxNQUFNQyxVQUFVQyxVQUFVQyxPQUFPRCxPQUFPO0FBRXhDOztDQUVDLEdBRURELFFBQVFGLElBQUksR0FBRztJQUNiSyxPQUFPTCxLQUFLTSxRQUFRLENBQUNDLElBQUksQ0FBQ1A7SUFDMUJRLFdBQVdSLEtBQUtTLFFBQVEsQ0FBQ0YsSUFBSSxDQUFDUDtBQUNoQztBQUVBOztDQUVDLEdBRURFLFFBQVFRLElBQUksR0FBRztJQUNiTCxPQUFPTSxLQUFLTixLQUFLLENBQUNFLElBQUksQ0FBQ0k7SUFDdkJILFdBQVcsU0FBU0ksR0FBRyxFQUFFQyxPQUFPO1FBQzlCLE1BQU1DLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQztZQUFDQyxVQUFVO1lBQU1DLE9BQU87UUFBQyxHQUFHTDtRQUN2RCxPQUFPRixLQUFLSCxTQUFTLENBQUNJLEtBQUtFLEtBQUtHLFFBQVEsRUFBRUgsS0FBS0ksS0FBSztJQUN0RDtBQUNGO0FBRUE7O0NBRUMsR0FFRGhCLFFBQVFpQixVQUFVLEdBQUc7SUFDbkJkLE9BQU8sU0FBU0EsTUFBTWUsR0FBRyxFQUFFUCxPQUFPLEVBQUVRLElBQUk7UUFDdEMscUJBQXFCLEdBQ3JCLElBQUk7WUFDRixJQUFJQSxTQUFTLE9BQU87Z0JBQ2xCRCxNQUFNLDJCQUEyQkEsSUFBSUUsSUFBSSxLQUFLO1lBQ2hEO1lBQ0EsT0FBT0MsS0FBS0gsUUFBUSxDQUFDO1FBQ3ZCLEVBQUUsT0FBT0ksS0FBSztZQUNaLElBQUlILFNBQVMsU0FBUywyQkFBMkJJLElBQUksQ0FBQ0QsSUFBSUUsT0FBTyxHQUFHO2dCQUNsRSxPQUFPckIsTUFBTWUsS0FBS1AsU0FBUztZQUM3QjtZQUNBLE1BQU0sSUFBSWMsWUFBWUg7UUFDeEI7SUFDRjtJQUNBaEIsV0FBVztRQUNULE1BQU0sSUFBSW9CLE1BQU07SUFDbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvZW5naW5lcy5qcz9iM2Q5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeWFtbCA9IHJlcXVpcmUoJ2pzLXlhbWwnKTtcblxuLyoqXG4gKiBEZWZhdWx0IGVuZ2luZXNcbiAqL1xuXG5jb25zdCBlbmdpbmVzID0gZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuXG4vKipcbiAqIFlBTUxcbiAqL1xuXG5lbmdpbmVzLnlhbWwgPSB7XG4gIHBhcnNlOiB5YW1sLnNhZmVMb2FkLmJpbmQoeWFtbCksXG4gIHN0cmluZ2lmeTogeWFtbC5zYWZlRHVtcC5iaW5kKHlhbWwpXG59O1xuXG4vKipcbiAqIEpTT05cbiAqL1xuXG5lbmdpbmVzLmpzb24gPSB7XG4gIHBhcnNlOiBKU09OLnBhcnNlLmJpbmQoSlNPTiksXG4gIHN0cmluZ2lmeTogZnVuY3Rpb24ob2JqLCBvcHRpb25zKSB7XG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oe3JlcGxhY2VyOiBudWxsLCBzcGFjZTogMn0sIG9wdGlvbnMpO1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmosIG9wdHMucmVwbGFjZXIsIG9wdHMuc3BhY2UpO1xuICB9XG59O1xuXG4vKipcbiAqIEphdmFTY3JpcHRcbiAqL1xuXG5lbmdpbmVzLmphdmFzY3JpcHQgPSB7XG4gIHBhcnNlOiBmdW5jdGlvbiBwYXJzZShzdHIsIG9wdGlvbnMsIHdyYXApIHtcbiAgICAvKiBlc2xpbnQgbm8tZXZhbDogMCAqL1xuICAgIHRyeSB7XG4gICAgICBpZiAod3JhcCAhPT0gZmFsc2UpIHtcbiAgICAgICAgc3RyID0gJyhmdW5jdGlvbigpIHtcXG5yZXR1cm4gJyArIHN0ci50cmltKCkgKyAnO1xcbn0oKSk7JztcbiAgICAgIH1cbiAgICAgIHJldHVybiBldmFsKHN0cikgfHwge307XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAod3JhcCAhPT0gZmFsc2UgJiYgLyh1bmV4cGVjdGVkfGlkZW50aWZpZXIpL2kudGVzdChlcnIubWVzc2FnZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlKHN0ciwgb3B0aW9ucywgZmFsc2UpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKGVycik7XG4gICAgfVxuICB9LFxuICBzdHJpbmdpZnk6IGZ1bmN0aW9uKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc3RyaW5naWZ5aW5nIEphdmFTY3JpcHQgaXMgbm90IHN1cHBvcnRlZCcpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInlhbWwiLCJyZXF1aXJlIiwiZW5naW5lcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJwYXJzZSIsInNhZmVMb2FkIiwiYmluZCIsInN0cmluZ2lmeSIsInNhZmVEdW1wIiwianNvbiIsIkpTT04iLCJvYmoiLCJvcHRpb25zIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsInJlcGxhY2VyIiwic3BhY2UiLCJqYXZhc2NyaXB0Iiwic3RyIiwid3JhcCIsInRyaW0iLCJldmFsIiwiZXJyIiwidGVzdCIsIm1lc3NhZ2UiLCJTeW50YXhFcnJvciIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/engines.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/excerpt.js":
/*!**************************************************!*\
  !*** ../node_modules/gray-matter/lib/excerpt.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/../node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function(file, options) {\n    const opts = defaults(options);\n    if (file.data == null) {\n        file.data = {};\n    }\n    if (typeof opts.excerpt === \"function\") {\n        return opts.excerpt(file, opts);\n    }\n    const sep = file.data.excerpt_separator || opts.excerpt_separator;\n    if (sep == null && (opts.excerpt === false || opts.excerpt == null)) {\n        return file;\n    }\n    const delimiter = typeof opts.excerpt === \"string\" ? opts.excerpt : sep || opts.delimiters[0];\n    // if enabled, get the excerpt defined after front-matter\n    const idx = file.content.indexOf(delimiter);\n    if (idx !== -1) {\n        file.excerpt = file.content.slice(0, idx);\n    }\n    return file;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9leGNlcnB0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsV0FBV0MsbUJBQU9BLENBQUM7QUFFekJDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJLEVBQUVDLE9BQU87SUFDckMsTUFBTUMsT0FBT04sU0FBU0s7SUFFdEIsSUFBSUQsS0FBS0csSUFBSSxJQUFJLE1BQU07UUFDckJILEtBQUtHLElBQUksR0FBRyxDQUFDO0lBQ2Y7SUFFQSxJQUFJLE9BQU9ELEtBQUtFLE9BQU8sS0FBSyxZQUFZO1FBQ3RDLE9BQU9GLEtBQUtFLE9BQU8sQ0FBQ0osTUFBTUU7SUFDNUI7SUFFQSxNQUFNRyxNQUFNTCxLQUFLRyxJQUFJLENBQUNHLGlCQUFpQixJQUFJSixLQUFLSSxpQkFBaUI7SUFDakUsSUFBSUQsT0FBTyxRQUFTSCxDQUFBQSxLQUFLRSxPQUFPLEtBQUssU0FBU0YsS0FBS0UsT0FBTyxJQUFJLElBQUcsR0FBSTtRQUNuRSxPQUFPSjtJQUNUO0lBRUEsTUFBTU8sWUFBWSxPQUFPTCxLQUFLRSxPQUFPLEtBQUssV0FDdENGLEtBQUtFLE9BQU8sR0FDWEMsT0FBT0gsS0FBS00sVUFBVSxDQUFDLEVBQUU7SUFFOUIseURBQXlEO0lBQ3pELE1BQU1DLE1BQU1ULEtBQUtVLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDSjtJQUNqQyxJQUFJRSxRQUFRLENBQUMsR0FBRztRQUNkVCxLQUFLSSxPQUFPLEdBQUdKLEtBQUtVLE9BQU8sQ0FBQ0UsS0FBSyxDQUFDLEdBQUdIO0lBQ3ZDO0lBRUEsT0FBT1Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvZXhjZXJwdC5qcz9lZDA4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmlsZSwgb3B0aW9ucykge1xuICBjb25zdCBvcHRzID0gZGVmYXVsdHMob3B0aW9ucyk7XG5cbiAgaWYgKGZpbGUuZGF0YSA9PSBudWxsKSB7XG4gICAgZmlsZS5kYXRhID0ge307XG4gIH1cblxuICBpZiAodHlwZW9mIG9wdHMuZXhjZXJwdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvcHRzLmV4Y2VycHQoZmlsZSwgb3B0cyk7XG4gIH1cblxuICBjb25zdCBzZXAgPSBmaWxlLmRhdGEuZXhjZXJwdF9zZXBhcmF0b3IgfHwgb3B0cy5leGNlcnB0X3NlcGFyYXRvcjtcbiAgaWYgKHNlcCA9PSBudWxsICYmIChvcHRzLmV4Y2VycHQgPT09IGZhbHNlIHx8IG9wdHMuZXhjZXJwdCA9PSBudWxsKSkge1xuICAgIHJldHVybiBmaWxlO1xuICB9XG5cbiAgY29uc3QgZGVsaW1pdGVyID0gdHlwZW9mIG9wdHMuZXhjZXJwdCA9PT0gJ3N0cmluZydcbiAgICA/IG9wdHMuZXhjZXJwdFxuICAgIDogKHNlcCB8fCBvcHRzLmRlbGltaXRlcnNbMF0pO1xuXG4gIC8vIGlmIGVuYWJsZWQsIGdldCB0aGUgZXhjZXJwdCBkZWZpbmVkIGFmdGVyIGZyb250LW1hdHRlclxuICBjb25zdCBpZHggPSBmaWxlLmNvbnRlbnQuaW5kZXhPZihkZWxpbWl0ZXIpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIGZpbGUuZXhjZXJwdCA9IGZpbGUuY29udGVudC5zbGljZSgwLCBpZHgpO1xuICB9XG5cbiAgcmV0dXJuIGZpbGU7XG59O1xuIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWxlIiwib3B0aW9ucyIsIm9wdHMiLCJkYXRhIiwiZXhjZXJwdCIsInNlcCIsImV4Y2VycHRfc2VwYXJhdG9yIiwiZGVsaW1pdGVyIiwiZGVsaW1pdGVycyIsImlkeCIsImNvbnRlbnQiLCJpbmRleE9mIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/excerpt.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/parse.js":
/*!************************************************!*\
  !*** ../node_modules/gray-matter/lib/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst getEngine = __webpack_require__(/*! ./engine */ \"(rsc)/../node_modules/gray-matter/lib/engine.js\");\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/../node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function(language, str, options) {\n    const opts = defaults(options);\n    const engine = getEngine(language, opts);\n    if (typeof engine.parse !== \"function\") {\n        throw new TypeError('expected \"' + language + '.parse\" to be a function');\n    }\n    return engine.parse(str, opts);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFlBQVlDLG1CQUFPQSxDQUFDO0FBQzFCLE1BQU1DLFdBQVdELG1CQUFPQSxDQUFDO0FBRXpCRSxPQUFPQyxPQUFPLEdBQUcsU0FBU0MsUUFBUSxFQUFFQyxHQUFHLEVBQUVDLE9BQU87SUFDOUMsTUFBTUMsT0FBT04sU0FBU0s7SUFDdEIsTUFBTUUsU0FBU1QsVUFBVUssVUFBVUc7SUFDbkMsSUFBSSxPQUFPQyxPQUFPQyxLQUFLLEtBQUssWUFBWTtRQUN0QyxNQUFNLElBQUlDLFVBQVUsZUFBZU4sV0FBVztJQUNoRDtJQUNBLE9BQU9JLE9BQU9DLEtBQUssQ0FBQ0osS0FBS0U7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3BhcnNlLmpzP2Q1NzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBnZXRFbmdpbmUgPSByZXF1aXJlKCcuL2VuZ2luZScpO1xuY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGFuZ3VhZ2UsIHN0ciwgb3B0aW9ucykge1xuICBjb25zdCBvcHRzID0gZGVmYXVsdHMob3B0aW9ucyk7XG4gIGNvbnN0IGVuZ2luZSA9IGdldEVuZ2luZShsYW5ndWFnZSwgb3B0cyk7XG4gIGlmICh0eXBlb2YgZW5naW5lLnBhcnNlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgXCInICsgbGFuZ3VhZ2UgKyAnLnBhcnNlXCIgdG8gYmUgYSBmdW5jdGlvbicpO1xuICB9XG4gIHJldHVybiBlbmdpbmUucGFyc2Uoc3RyLCBvcHRzKTtcbn07XG4iXSwibmFtZXMiOlsiZ2V0RW5naW5lIiwicmVxdWlyZSIsImRlZmF1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsImxhbmd1YWdlIiwic3RyIiwib3B0aW9ucyIsIm9wdHMiLCJlbmdpbmUiLCJwYXJzZSIsIlR5cGVFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/stringify.js":
/*!****************************************************!*\
  !*** ../node_modules/gray-matter/lib/stringify.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/../node_modules/kind-of/index.js\");\nconst getEngine = __webpack_require__(/*! ./engine */ \"(rsc)/../node_modules/gray-matter/lib/engine.js\");\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/../node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function(file, data, options) {\n    if (data == null && options == null) {\n        switch(typeOf(file)){\n            case \"object\":\n                data = file.data;\n                options = {};\n                break;\n            case \"string\":\n                return file;\n            default:\n                {\n                    throw new TypeError(\"expected file to be a string or object\");\n                }\n        }\n    }\n    const str = file.content;\n    const opts = defaults(options);\n    if (data == null) {\n        if (!opts.data) return file;\n        data = opts.data;\n    }\n    const language = file.language || opts.language;\n    const engine = getEngine(language, opts);\n    if (typeof engine.stringify !== \"function\") {\n        throw new TypeError('expected \"' + language + '.stringify\" to be a function');\n    }\n    data = Object.assign({}, file.data, data);\n    const open = opts.delimiters[0];\n    const close = opts.delimiters[1];\n    const matter = engine.stringify(data, options).trim();\n    let buf = \"\";\n    if (matter !== \"{}\") {\n        buf = newline(open) + newline(matter) + newline(close);\n    }\n    if (typeof file.excerpt === \"string\" && file.excerpt !== \"\") {\n        if (str.indexOf(file.excerpt.trim()) === -1) {\n            buf += newline(file.excerpt) + newline(close);\n        }\n    }\n    return buf + newline(str);\n};\nfunction newline(str) {\n    return str.slice(-1) !== \"\\n\" ? str + \"\\n\" : str;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9zdHJpbmdpZnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQztBQUV6QkcsT0FBT0MsT0FBTyxHQUFHLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxPQUFPO0lBQzNDLElBQUlELFFBQVEsUUFBUUMsV0FBVyxNQUFNO1FBQ25DLE9BQVFSLE9BQU9NO1lBQ2IsS0FBSztnQkFDSEMsT0FBT0QsS0FBS0MsSUFBSTtnQkFDaEJDLFVBQVUsQ0FBQztnQkFDWDtZQUNGLEtBQUs7Z0JBQ0gsT0FBT0Y7WUFDVDtnQkFBUztvQkFDUCxNQUFNLElBQUlHLFVBQVU7Z0JBQ3RCO1FBQ0Y7SUFDRjtJQUVBLE1BQU1DLE1BQU1KLEtBQUtLLE9BQU87SUFDeEIsTUFBTUMsT0FBT1QsU0FBU0s7SUFDdEIsSUFBSUQsUUFBUSxNQUFNO1FBQ2hCLElBQUksQ0FBQ0ssS0FBS0wsSUFBSSxFQUFFLE9BQU9EO1FBQ3ZCQyxPQUFPSyxLQUFLTCxJQUFJO0lBQ2xCO0lBRUEsTUFBTU0sV0FBV1AsS0FBS08sUUFBUSxJQUFJRCxLQUFLQyxRQUFRO0lBQy9DLE1BQU1DLFNBQVNaLFVBQVVXLFVBQVVEO0lBQ25DLElBQUksT0FBT0UsT0FBT0MsU0FBUyxLQUFLLFlBQVk7UUFDMUMsTUFBTSxJQUFJTixVQUFVLGVBQWVJLFdBQVc7SUFDaEQ7SUFFQU4sT0FBT1MsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR1gsS0FBS0MsSUFBSSxFQUFFQTtJQUNwQyxNQUFNVyxPQUFPTixLQUFLTyxVQUFVLENBQUMsRUFBRTtJQUMvQixNQUFNQyxRQUFRUixLQUFLTyxVQUFVLENBQUMsRUFBRTtJQUNoQyxNQUFNRSxTQUFTUCxPQUFPQyxTQUFTLENBQUNSLE1BQU1DLFNBQVNjLElBQUk7SUFDbkQsSUFBSUMsTUFBTTtJQUVWLElBQUlGLFdBQVcsTUFBTTtRQUNuQkUsTUFBTUMsUUFBUU4sUUFBUU0sUUFBUUgsVUFBVUcsUUFBUUo7SUFDbEQ7SUFFQSxJQUFJLE9BQU9kLEtBQUttQixPQUFPLEtBQUssWUFBWW5CLEtBQUttQixPQUFPLEtBQUssSUFBSTtRQUMzRCxJQUFJZixJQUFJZ0IsT0FBTyxDQUFDcEIsS0FBS21CLE9BQU8sQ0FBQ0gsSUFBSSxRQUFRLENBQUMsR0FBRztZQUMzQ0MsT0FBT0MsUUFBUWxCLEtBQUttQixPQUFPLElBQUlELFFBQVFKO1FBQ3pDO0lBQ0Y7SUFFQSxPQUFPRyxNQUFNQyxRQUFRZDtBQUN2QjtBQUVBLFNBQVNjLFFBQVFkLEdBQUc7SUFDbEIsT0FBT0EsSUFBSWlCLEtBQUssQ0FBQyxDQUFDLE9BQU8sT0FBT2pCLE1BQU0sT0FBT0E7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3N0cmluZ2lmeS5qcz85MGJkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZU9mID0gcmVxdWlyZSgna2luZC1vZicpO1xuY29uc3QgZ2V0RW5naW5lID0gcmVxdWlyZSgnLi9lbmdpbmUnKTtcbmNvbnN0IGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGUsIGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKGRhdGEgPT0gbnVsbCAmJiBvcHRpb25zID09IG51bGwpIHtcbiAgICBzd2l0Y2ggKHR5cGVPZihmaWxlKSkge1xuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgZGF0YSA9IGZpbGUuZGF0YTtcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIHJldHVybiBmaWxlO1xuICAgICAgZGVmYXVsdDoge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBmaWxlIHRvIGJlIGEgc3RyaW5nIG9yIG9iamVjdCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ciA9IGZpbGUuY29udGVudDtcbiAgY29uc3Qgb3B0cyA9IGRlZmF1bHRzKG9wdGlvbnMpO1xuICBpZiAoZGF0YSA9PSBudWxsKSB7XG4gICAgaWYgKCFvcHRzLmRhdGEpIHJldHVybiBmaWxlO1xuICAgIGRhdGEgPSBvcHRzLmRhdGE7XG4gIH1cblxuICBjb25zdCBsYW5ndWFnZSA9IGZpbGUubGFuZ3VhZ2UgfHwgb3B0cy5sYW5ndWFnZTtcbiAgY29uc3QgZW5naW5lID0gZ2V0RW5naW5lKGxhbmd1YWdlLCBvcHRzKTtcbiAgaWYgKHR5cGVvZiBlbmdpbmUuc3RyaW5naWZ5ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgXCInICsgbGFuZ3VhZ2UgKyAnLnN0cmluZ2lmeVwiIHRvIGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGRhdGEgPSBPYmplY3QuYXNzaWduKHt9LCBmaWxlLmRhdGEsIGRhdGEpO1xuICBjb25zdCBvcGVuID0gb3B0cy5kZWxpbWl0ZXJzWzBdO1xuICBjb25zdCBjbG9zZSA9IG9wdHMuZGVsaW1pdGVyc1sxXTtcbiAgY29uc3QgbWF0dGVyID0gZW5naW5lLnN0cmluZ2lmeShkYXRhLCBvcHRpb25zKS50cmltKCk7XG4gIGxldCBidWYgPSAnJztcblxuICBpZiAobWF0dGVyICE9PSAne30nKSB7XG4gICAgYnVmID0gbmV3bGluZShvcGVuKSArIG5ld2xpbmUobWF0dGVyKSArIG5ld2xpbmUoY2xvc2UpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBmaWxlLmV4Y2VycHQgPT09ICdzdHJpbmcnICYmIGZpbGUuZXhjZXJwdCAhPT0gJycpIHtcbiAgICBpZiAoc3RyLmluZGV4T2YoZmlsZS5leGNlcnB0LnRyaW0oKSkgPT09IC0xKSB7XG4gICAgICBidWYgKz0gbmV3bGluZShmaWxlLmV4Y2VycHQpICsgbmV3bGluZShjbG9zZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1ZiArIG5ld2xpbmUoc3RyKTtcbn07XG5cbmZ1bmN0aW9uIG5ld2xpbmUoc3RyKSB7XG4gIHJldHVybiBzdHIuc2xpY2UoLTEpICE9PSAnXFxuJyA/IHN0ciArICdcXG4nIDogc3RyO1xufVxuIl0sIm5hbWVzIjpbInR5cGVPZiIsInJlcXVpcmUiLCJnZXRFbmdpbmUiLCJkZWZhdWx0cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJmaWxlIiwiZGF0YSIsIm9wdGlvbnMiLCJUeXBlRXJyb3IiLCJzdHIiLCJjb250ZW50Iiwib3B0cyIsImxhbmd1YWdlIiwiZW5naW5lIiwic3RyaW5naWZ5IiwiT2JqZWN0IiwiYXNzaWduIiwib3BlbiIsImRlbGltaXRlcnMiLCJjbG9zZSIsIm1hdHRlciIsInRyaW0iLCJidWYiLCJuZXdsaW5lIiwiZXhjZXJwdCIsImluZGV4T2YiLCJzbGljZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/stringify.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/to-file.js":
/*!**************************************************!*\
  !*** ../node_modules/gray-matter/lib/to-file.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/../node_modules/kind-of/index.js\");\nconst stringify = __webpack_require__(/*! ./stringify */ \"(rsc)/../node_modules/gray-matter/lib/stringify.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/../node_modules/gray-matter/lib/utils.js\");\n/**\n * Normalize the given value to ensure an object is returned\n * with the expected properties.\n */ module.exports = function(file) {\n    if (typeOf(file) !== \"object\") {\n        file = {\n            content: file\n        };\n    }\n    if (typeOf(file.data) !== \"object\") {\n        file.data = {};\n    }\n    // if file was passed as an object, ensure that\n    // \"file.content\" is set\n    if (file.contents && file.content == null) {\n        file.content = file.contents;\n    }\n    // set non-enumerable properties on the file object\n    utils.define(file, \"orig\", utils.toBuffer(file.content));\n    utils.define(file, \"language\", file.language || \"\");\n    utils.define(file, \"matter\", file.matter || \"\");\n    utils.define(file, \"stringify\", function(data, options) {\n        if (options && options.language) {\n            file.language = options.language;\n        }\n        return stringify(file, data, options);\n    });\n    // strip BOM and ensure that \"file.content\" is a string\n    file.content = utils.toString(file.content);\n    file.isEmpty = false;\n    file.excerpt = \"\";\n    return file;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi90by1maWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUMsWUFBWUQsbUJBQU9BLENBQUM7QUFDMUIsTUFBTUUsUUFBUUYsbUJBQU9BLENBQUM7QUFFdEI7OztDQUdDLEdBRURHLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxJQUFJO0lBQzVCLElBQUlOLE9BQU9NLFVBQVUsVUFBVTtRQUM3QkEsT0FBTztZQUFFQyxTQUFTRDtRQUFLO0lBQ3pCO0lBRUEsSUFBSU4sT0FBT00sS0FBS0UsSUFBSSxNQUFNLFVBQVU7UUFDbENGLEtBQUtFLElBQUksR0FBRyxDQUFDO0lBQ2Y7SUFFQSwrQ0FBK0M7SUFDL0Msd0JBQXdCO0lBQ3hCLElBQUlGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0MsT0FBTyxJQUFJLE1BQU07UUFDekNELEtBQUtDLE9BQU8sR0FBR0QsS0FBS0csUUFBUTtJQUM5QjtJQUVBLG1EQUFtRDtJQUNuRE4sTUFBTU8sTUFBTSxDQUFDSixNQUFNLFFBQVFILE1BQU1RLFFBQVEsQ0FBQ0wsS0FBS0MsT0FBTztJQUN0REosTUFBTU8sTUFBTSxDQUFDSixNQUFNLFlBQVlBLEtBQUtNLFFBQVEsSUFBSTtJQUNoRFQsTUFBTU8sTUFBTSxDQUFDSixNQUFNLFVBQVVBLEtBQUtPLE1BQU0sSUFBSTtJQUM1Q1YsTUFBTU8sTUFBTSxDQUFDSixNQUFNLGFBQWEsU0FBU0UsSUFBSSxFQUFFTSxPQUFPO1FBQ3BELElBQUlBLFdBQVdBLFFBQVFGLFFBQVEsRUFBRTtZQUMvQk4sS0FBS00sUUFBUSxHQUFHRSxRQUFRRixRQUFRO1FBQ2xDO1FBQ0EsT0FBT1YsVUFBVUksTUFBTUUsTUFBTU07SUFDL0I7SUFFQSx1REFBdUQ7SUFDdkRSLEtBQUtDLE9BQU8sR0FBR0osTUFBTVksUUFBUSxDQUFDVCxLQUFLQyxPQUFPO0lBQzFDRCxLQUFLVSxPQUFPLEdBQUc7SUFDZlYsS0FBS1csT0FBTyxHQUFHO0lBQ2YsT0FBT1g7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvdG8tZmlsZS5qcz83NmVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZU9mID0gcmVxdWlyZSgna2luZC1vZicpO1xuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gZW5zdXJlIGFuIG9iamVjdCBpcyByZXR1cm5lZFxuICogd2l0aCB0aGUgZXhwZWN0ZWQgcHJvcGVydGllcy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgaWYgKHR5cGVPZihmaWxlKSAhPT0gJ29iamVjdCcpIHtcbiAgICBmaWxlID0geyBjb250ZW50OiBmaWxlIH07XG4gIH1cblxuICBpZiAodHlwZU9mKGZpbGUuZGF0YSkgIT09ICdvYmplY3QnKSB7XG4gICAgZmlsZS5kYXRhID0ge307XG4gIH1cblxuICAvLyBpZiBmaWxlIHdhcyBwYXNzZWQgYXMgYW4gb2JqZWN0LCBlbnN1cmUgdGhhdFxuICAvLyBcImZpbGUuY29udGVudFwiIGlzIHNldFxuICBpZiAoZmlsZS5jb250ZW50cyAmJiBmaWxlLmNvbnRlbnQgPT0gbnVsbCkge1xuICAgIGZpbGUuY29udGVudCA9IGZpbGUuY29udGVudHM7XG4gIH1cblxuICAvLyBzZXQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBvbiB0aGUgZmlsZSBvYmplY3RcbiAgdXRpbHMuZGVmaW5lKGZpbGUsICdvcmlnJywgdXRpbHMudG9CdWZmZXIoZmlsZS5jb250ZW50KSk7XG4gIHV0aWxzLmRlZmluZShmaWxlLCAnbGFuZ3VhZ2UnLCBmaWxlLmxhbmd1YWdlIHx8ICcnKTtcbiAgdXRpbHMuZGVmaW5lKGZpbGUsICdtYXR0ZXInLCBmaWxlLm1hdHRlciB8fCAnJyk7XG4gIHV0aWxzLmRlZmluZShmaWxlLCAnc3RyaW5naWZ5JywgZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGFuZ3VhZ2UpIHtcbiAgICAgIGZpbGUubGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5KGZpbGUsIGRhdGEsIG9wdGlvbnMpO1xuICB9KTtcblxuICAvLyBzdHJpcCBCT00gYW5kIGVuc3VyZSB0aGF0IFwiZmlsZS5jb250ZW50XCIgaXMgYSBzdHJpbmdcbiAgZmlsZS5jb250ZW50ID0gdXRpbHMudG9TdHJpbmcoZmlsZS5jb250ZW50KTtcbiAgZmlsZS5pc0VtcHR5ID0gZmFsc2U7XG4gIGZpbGUuZXhjZXJwdCA9ICcnO1xuICByZXR1cm4gZmlsZTtcbn07XG4iXSwibmFtZXMiOlsidHlwZU9mIiwicmVxdWlyZSIsInN0cmluZ2lmeSIsInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZpbGUiLCJjb250ZW50IiwiZGF0YSIsImNvbnRlbnRzIiwiZGVmaW5lIiwidG9CdWZmZXIiLCJsYW5ndWFnZSIsIm1hdHRlciIsIm9wdGlvbnMiLCJ0b1N0cmluZyIsImlzRW1wdHkiLCJleGNlcnB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/to-file.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/lib/utils.js":
/*!************************************************!*\
  !*** ../node_modules/gray-matter/lib/utils.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nconst stripBom = __webpack_require__(/*! strip-bom-string */ \"(rsc)/../node_modules/strip-bom-string/index.js\");\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/../node_modules/kind-of/index.js\");\nexports.define = function(obj, key, val) {\n    Reflect.defineProperty(obj, key, {\n        enumerable: false,\n        configurable: true,\n        writable: true,\n        value: val\n    });\n};\n/**\n * Returns true if `val` is a buffer\n */ exports.isBuffer = function(val) {\n    return typeOf(val) === \"buffer\";\n};\n/**\n * Returns true if `val` is an object\n */ exports.isObject = function(val) {\n    return typeOf(val) === \"object\";\n};\n/**\n * Cast `input` to a buffer\n */ exports.toBuffer = function(input) {\n    return typeof input === \"string\" ? Buffer.from(input) : input;\n};\n/**\n * Cast `val` to a string.\n */ exports.toString = function(input) {\n    if (exports.isBuffer(input)) return stripBom(String(input));\n    if (typeof input !== \"string\") {\n        throw new TypeError(\"expected input to be a string or buffer\");\n    }\n    return stripBom(input);\n};\n/**\n * Cast `val` to an array.\n */ exports.arrayify = function(val) {\n    return val ? Array.isArray(val) ? val : [\n        val\n    ] : [];\n};\n/**\n * Returns true if `str` starts with `substr`.\n */ exports.startsWith = function(str, substr, len) {\n    if (typeof len !== \"number\") len = substr.length;\n    return str.slice(0, len) === substr;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLFdBQVdDLG1CQUFPQSxDQUFDO0FBQ3pCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBRXZCRSxjQUFjLEdBQUcsU0FBU0UsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLEdBQUc7SUFDckNDLFFBQVFDLGNBQWMsQ0FBQ0osS0FBS0MsS0FBSztRQUMvQkksWUFBWTtRQUNaQyxjQUFjO1FBQ2RDLFVBQVU7UUFDVkMsT0FBT047SUFDVDtBQUNGO0FBRUE7O0NBRUMsR0FFREosZ0JBQWdCLEdBQUcsU0FBU0ksR0FBRztJQUM3QixPQUFPTCxPQUFPSyxTQUFTO0FBQ3pCO0FBRUE7O0NBRUMsR0FFREosZ0JBQWdCLEdBQUcsU0FBU0ksR0FBRztJQUM3QixPQUFPTCxPQUFPSyxTQUFTO0FBQ3pCO0FBRUE7O0NBRUMsR0FFREosZ0JBQWdCLEdBQUcsU0FBU2MsS0FBSztJQUMvQixPQUFPLE9BQU9BLFVBQVUsV0FBV0MsT0FBT0MsSUFBSSxDQUFDRixTQUFTQTtBQUMxRDtBQUVBOztDQUVDLEdBRURkLGdCQUFnQixHQUFHLFNBQVNjLEtBQUs7SUFDL0IsSUFBSWQsUUFBUVcsUUFBUSxDQUFDRyxRQUFRLE9BQU9qQixTQUFTcUIsT0FBT0o7SUFDcEQsSUFBSSxPQUFPQSxVQUFVLFVBQVU7UUFDN0IsTUFBTSxJQUFJSyxVQUFVO0lBQ3RCO0lBQ0EsT0FBT3RCLFNBQVNpQjtBQUNsQjtBQUVBOztDQUVDLEdBRURkLGdCQUFnQixHQUFHLFNBQVNJLEdBQUc7SUFDN0IsT0FBT0EsTUFBT2lCLE1BQU1DLE9BQU8sQ0FBQ2xCLE9BQU9BLE1BQU07UUFBQ0E7S0FBSSxHQUFJLEVBQUU7QUFDdEQ7QUFFQTs7Q0FFQyxHQUVESixrQkFBa0IsR0FBRyxTQUFTd0IsR0FBRyxFQUFFQyxNQUFNLEVBQUVDLEdBQUc7SUFDNUMsSUFBSSxPQUFPQSxRQUFRLFVBQVVBLE1BQU1ELE9BQU9FLE1BQU07SUFDaEQsT0FBT0gsSUFBSUksS0FBSyxDQUFDLEdBQUdGLFNBQVNEO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi91dGlscy5qcz9iY2YyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RyaXBCb20gPSByZXF1aXJlKCdzdHJpcC1ib20tc3RyaW5nJyk7XG5jb25zdCB0eXBlT2YgPSByZXF1aXJlKCdraW5kLW9mJyk7XG5cbmV4cG9ydHMuZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbCkge1xuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiB2YWxcbiAgfSk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsYCBpcyBhIGJ1ZmZlclxuICovXG5cbmV4cG9ydHMuaXNCdWZmZXIgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVPZih2YWwpID09PSAnYnVmZmVyJztcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWxgIGlzIGFuIG9iamVjdFxuICovXG5cbmV4cG9ydHMuaXNPYmplY3QgPSBmdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHR5cGVPZih2YWwpID09PSAnb2JqZWN0Jztcbn07XG5cbi8qKlxuICogQ2FzdCBgaW5wdXRgIHRvIGEgYnVmZmVyXG4gKi9cblxuZXhwb3J0cy50b0J1ZmZlciA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gIHJldHVybiB0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnID8gQnVmZmVyLmZyb20oaW5wdXQpIDogaW5wdXQ7XG59O1xuXG4vKipcbiAqIENhc3QgYHZhbGAgdG8gYSBzdHJpbmcuXG4gKi9cblxuZXhwb3J0cy50b1N0cmluZyA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gIGlmIChleHBvcnRzLmlzQnVmZmVyKGlucHV0KSkgcmV0dXJuIHN0cmlwQm9tKFN0cmluZyhpbnB1dCkpO1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGlucHV0IHRvIGJlIGEgc3RyaW5nIG9yIGJ1ZmZlcicpO1xuICB9XG4gIHJldHVybiBzdHJpcEJvbShpbnB1dCk7XG59O1xuXG4vKipcbiAqIENhc3QgYHZhbGAgdG8gYW4gYXJyYXkuXG4gKi9cblxuZXhwb3J0cy5hcnJheWlmeSA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdmFsID8gKEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbCA6IFt2YWxdKSA6IFtdO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHN0cmAgc3RhcnRzIHdpdGggYHN1YnN0cmAuXG4gKi9cblxuZXhwb3J0cy5zdGFydHNXaXRoID0gZnVuY3Rpb24oc3RyLCBzdWJzdHIsIGxlbikge1xuICBpZiAodHlwZW9mIGxlbiAhPT0gJ251bWJlcicpIGxlbiA9IHN1YnN0ci5sZW5ndGg7XG4gIHJldHVybiBzdHIuc2xpY2UoMCwgbGVuKSA9PT0gc3Vic3RyO1xufTtcbiJdLCJuYW1lcyI6WyJzdHJpcEJvbSIsInJlcXVpcmUiLCJ0eXBlT2YiLCJleHBvcnRzIiwiZGVmaW5lIiwib2JqIiwia2V5IiwidmFsIiwiUmVmbGVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJpc0J1ZmZlciIsImlzT2JqZWN0IiwidG9CdWZmZXIiLCJpbnB1dCIsIkJ1ZmZlciIsImZyb20iLCJ0b1N0cmluZyIsIlN0cmluZyIsIlR5cGVFcnJvciIsImFycmF5aWZ5IiwiQXJyYXkiLCJpc0FycmF5Iiwic3RhcnRzV2l0aCIsInN0ciIsInN1YnN0ciIsImxlbiIsImxlbmd0aCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/index.js":
/*!*****************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar yaml = __webpack_require__(/*! ./lib/js-yaml.js */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js\");\nmodule.exports = yaml;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBR0EsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFHbkJDLE9BQU9DLE9BQU8sR0FBR0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanM/ZTY4OCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIHlhbWwgPSByZXF1aXJlKCcuL2xpYi9qcy15YW1sLmpzJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSB5YW1sO1xuIl0sIm5hbWVzIjpbInlhbWwiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js":
/*!***********************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar loader = __webpack_require__(/*! ./js-yaml/loader */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js\");\nvar dumper = __webpack_require__(/*! ./js-yaml/dumper */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\");\nfunction deprecated(name) {\n    return function() {\n        throw new Error(\"Function \" + name + \" is deprecated and cannot be used.\");\n    };\n}\nmodule.exports.Type = __webpack_require__(/*! ./js-yaml/type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./js-yaml/schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/json */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/core */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\");\nmodule.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.safeLoad = loader.safeLoad;\nmodule.exports.safeLoadAll = loader.safeLoadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.safeDump = dumper.safeDump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./js-yaml/exception */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n// Deprecated schema names from JS-YAML 2.0.x\nmodule.exports.MINIMAL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n// Deprecated functions from JS-YAML 1.x.x\nmodule.exports.scan = deprecated(\"scan\");\nmodule.exports.parse = deprecated(\"parse\");\nmodule.exports.compose = deprecated(\"compose\");\nmodule.exports.addConstructor = deprecated(\"addConstructor\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBR0EsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFHckIsU0FBU0UsV0FBV0MsSUFBSTtJQUN0QixPQUFPO1FBQ0wsTUFBTSxJQUFJQyxNQUFNLGNBQWNELE9BQU87SUFDdkM7QUFDRjtBQUdBRSw2SUFBNkM7QUFDN0NBLG1KQUE2QztBQUM3Q0EsOEtBQTZDO0FBQzdDQSxrS0FBNkM7QUFDN0NBLGtLQUE2QztBQUM3Q0EsMExBQTZDO0FBQzdDQSwwTEFBNkM7QUFDN0NBLG1CQUFtQixHQUFrQk4sT0FBT2UsSUFBSTtBQUNoRFQsc0JBQXNCLEdBQWVOLE9BQU9nQixPQUFPO0FBQ25EVix1QkFBdUIsR0FBY04sT0FBT2lCLFFBQVE7QUFDcERYLDBCQUEwQixHQUFXTixPQUFPa0IsV0FBVztBQUN2RFosbUJBQW1CLEdBQWtCSixPQUFPaUIsSUFBSTtBQUNoRGIsdUJBQXVCLEdBQWNKLE9BQU9rQixRQUFRO0FBQ3BEZCxnS0FBNkM7QUFFN0MsNkNBQTZDO0FBQzdDQSw2S0FBd0M7QUFDeENBLGtMQUF3QztBQUN4Q0EscUxBQXdDO0FBRXhDLDBDQUEwQztBQUMxQ0EsbUJBQW1CLEdBQWFILFdBQVc7QUFDM0NHLG9CQUFvQixHQUFZSCxXQUFXO0FBQzNDRyxzQkFBc0IsR0FBVUgsV0FBVztBQUMzQ0csNkJBQTZCLEdBQUdILFdBQVciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwuanM/N2NlOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGxvYWRlciA9IHJlcXVpcmUoJy4vanMteWFtbC9sb2FkZXInKTtcbnZhciBkdW1wZXIgPSByZXF1aXJlKCcuL2pzLXlhbWwvZHVtcGVyJyk7XG5cblxuZnVuY3Rpb24gZGVwcmVjYXRlZChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiAnICsgbmFtZSArICcgaXMgZGVwcmVjYXRlZCBhbmQgY2Fubm90IGJlIHVzZWQuJyk7XG4gIH07XG59XG5cblxubW9kdWxlLmV4cG9ydHMuVHlwZSAgICAgICAgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC90eXBlJyk7XG5tb2R1bGUuZXhwb3J0cy5TY2hlbWEgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYScpO1xubW9kdWxlLmV4cG9ydHMuRkFJTFNBRkVfU0NIRU1BICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZmFpbHNhZmUnKTtcbm1vZHVsZS5leHBvcnRzLkpTT05fU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2pzb24nKTtcbm1vZHVsZS5leHBvcnRzLkNPUkVfU0NIRU1BICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2NvcmUnKTtcbm1vZHVsZS5leHBvcnRzLkRFRkFVTFRfU0FGRV9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9GVUxMX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5tb2R1bGUuZXhwb3J0cy5sb2FkICAgICAgICAgICAgICAgID0gbG9hZGVyLmxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5sb2FkQWxsICAgICAgICAgICAgID0gbG9hZGVyLmxvYWRBbGw7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZCAgICAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkO1xubW9kdWxlLmV4cG9ydHMuc2FmZUxvYWRBbGwgICAgICAgICA9IGxvYWRlci5zYWZlTG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLmR1bXAgICAgICAgICAgICAgICAgPSBkdW1wZXIuZHVtcDtcbm1vZHVsZS5leHBvcnRzLnNhZmVEdW1wICAgICAgICAgICAgPSBkdW1wZXIuc2FmZUR1bXA7XG5tb2R1bGUuZXhwb3J0cy5ZQU1MRXhjZXB0aW9uICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL2V4Y2VwdGlvbicpO1xuXG4vLyBEZXByZWNhdGVkIHNjaGVtYSBuYW1lcyBmcm9tIEpTLVlBTUwgMi4wLnhcbm1vZHVsZS5leHBvcnRzLk1JTklNQUxfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuU0FGRV9TQ0hFTUEgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbCcpO1xuXG4vLyBEZXByZWNhdGVkIGZ1bmN0aW9ucyBmcm9tIEpTLVlBTUwgMS54Lnhcbm1vZHVsZS5leHBvcnRzLnNjYW4gICAgICAgICAgID0gZGVwcmVjYXRlZCgnc2NhbicpO1xubW9kdWxlLmV4cG9ydHMucGFyc2UgICAgICAgICAgPSBkZXByZWNhdGVkKCdwYXJzZScpO1xubW9kdWxlLmV4cG9ydHMuY29tcG9zZSAgICAgICAgPSBkZXByZWNhdGVkKCdjb21wb3NlJyk7XG5tb2R1bGUuZXhwb3J0cy5hZGRDb25zdHJ1Y3RvciA9IGRlcHJlY2F0ZWQoJ2FkZENvbnN0cnVjdG9yJyk7XG4iXSwibmFtZXMiOlsibG9hZGVyIiwicmVxdWlyZSIsImR1bXBlciIsImRlcHJlY2F0ZWQiLCJuYW1lIiwiRXJyb3IiLCJtb2R1bGUiLCJleHBvcnRzIiwiVHlwZSIsIlNjaGVtYSIsIkZBSUxTQUZFX1NDSEVNQSIsIkpTT05fU0NIRU1BIiwiQ09SRV9TQ0hFTUEiLCJERUZBVUxUX1NBRkVfU0NIRU1BIiwiREVGQVVMVF9GVUxMX1NDSEVNQSIsImxvYWQiLCJsb2FkQWxsIiwic2FmZUxvYWQiLCJzYWZlTG9hZEFsbCIsImR1bXAiLCJzYWZlRHVtcCIsIllBTUxFeGNlcHRpb24iLCJNSU5JTUFMX1NDSEVNQSIsIlNBRkVfU0NIRU1BIiwiREVGQVVMVF9TQ0hFTUEiLCJzY2FuIiwicGFyc2UiLCJjb21wb3NlIiwiYWRkQ29uc3RydWN0b3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js":
/*!******************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js ***!
  \******************************************************************************/
/***/ ((module) => {

eval("\nfunction isNothing(subject) {\n    return typeof subject === \"undefined\" || subject === null;\n}\nfunction isObject(subject) {\n    return typeof subject === \"object\" && subject !== null;\n}\nfunction toArray(sequence) {\n    if (Array.isArray(sequence)) return sequence;\n    else if (isNothing(sequence)) return [];\n    return [\n        sequence\n    ];\n}\nfunction extend(target, source) {\n    var index, length, key, sourceKeys;\n    if (source) {\n        sourceKeys = Object.keys(source);\n        for(index = 0, length = sourceKeys.length; index < length; index += 1){\n            key = sourceKeys[index];\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\nfunction repeat(string, count) {\n    var result = \"\", cycle;\n    for(cycle = 0; cycle < count; cycle += 1){\n        result += string;\n    }\n    return result;\n}\nfunction isNegativeZero(number) {\n    return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2NvbW1vbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUdBLFNBQVNBLFVBQVVDLE9BQU87SUFDeEIsT0FBTyxPQUFRQSxZQUFZLGVBQWlCQSxZQUFZO0FBQzFEO0FBR0EsU0FBU0MsU0FBU0QsT0FBTztJQUN2QixPQUFPLE9BQVFBLFlBQVksWUFBY0EsWUFBWTtBQUN2RDtBQUdBLFNBQVNFLFFBQVFDLFFBQVE7SUFDdkIsSUFBSUMsTUFBTUMsT0FBTyxDQUFDRixXQUFXLE9BQU9BO1NBQy9CLElBQUlKLFVBQVVJLFdBQVcsT0FBTyxFQUFFO0lBRXZDLE9BQU87UUFBRUE7S0FBVTtBQUNyQjtBQUdBLFNBQVNHLE9BQU9DLE1BQU0sRUFBRUMsTUFBTTtJQUM1QixJQUFJQyxPQUFPQyxRQUFRQyxLQUFLQztJQUV4QixJQUFJSixRQUFRO1FBQ1ZJLGFBQWFDLE9BQU9DLElBQUksQ0FBQ047UUFFekIsSUFBS0MsUUFBUSxHQUFHQyxTQUFTRSxXQUFXRixNQUFNLEVBQUVELFFBQVFDLFFBQVFELFNBQVMsRUFBRztZQUN0RUUsTUFBTUMsVUFBVSxDQUFDSCxNQUFNO1lBQ3ZCRixNQUFNLENBQUNJLElBQUksR0FBR0gsTUFBTSxDQUFDRyxJQUFJO1FBQzNCO0lBQ0Y7SUFFQSxPQUFPSjtBQUNUO0FBR0EsU0FBU1EsT0FBT0MsTUFBTSxFQUFFQyxLQUFLO0lBQzNCLElBQUlDLFNBQVMsSUFBSUM7SUFFakIsSUFBS0EsUUFBUSxHQUFHQSxRQUFRRixPQUFPRSxTQUFTLEVBQUc7UUFDekNELFVBQVVGO0lBQ1o7SUFFQSxPQUFPRTtBQUNUO0FBR0EsU0FBU0UsZUFBZUMsTUFBTTtJQUM1QixPQUFPLFdBQVksS0FBT0MsT0FBT0MsaUJBQWlCLEtBQUssSUFBSUY7QUFDN0Q7QUFHQUcsd0JBQXdCLEdBQVF6QjtBQUNoQ3lCLHVCQUF1QixHQUFTdkI7QUFDaEN1QixzQkFBc0IsR0FBVXRCO0FBQ2hDc0IscUJBQXFCLEdBQVdUO0FBQ2hDUyw2QkFBNkIsR0FBR0o7QUFDaENJLHFCQUFxQixHQUFXbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvY29tbW9uLmpzPzc2MzkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbmZ1bmN0aW9uIGlzTm90aGluZyhzdWJqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIHN1YmplY3QgPT09ICd1bmRlZmluZWQnKSB8fCAoc3ViamVjdCA9PT0gbnVsbCk7XG59XG5cblxuZnVuY3Rpb24gaXNPYmplY3Qoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAnb2JqZWN0JykgJiYgKHN1YmplY3QgIT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoc2VxdWVuY2UpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc2VxdWVuY2UpKSByZXR1cm4gc2VxdWVuY2U7XG4gIGVsc2UgaWYgKGlzTm90aGluZyhzZXF1ZW5jZSkpIHJldHVybiBbXTtcblxuICByZXR1cm4gWyBzZXF1ZW5jZSBdO1xufVxuXG5cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIgaW5kZXgsIGxlbmd0aCwga2V5LCBzb3VyY2VLZXlzO1xuXG4gIGlmIChzb3VyY2UpIHtcbiAgICBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBzb3VyY2VLZXlzLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgIGtleSA9IHNvdXJjZUtleXNbaW5kZXhdO1xuICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5cbmZ1bmN0aW9uIHJlcGVhdChzdHJpbmcsIGNvdW50KSB7XG4gIHZhciByZXN1bHQgPSAnJywgY3ljbGU7XG5cbiAgZm9yIChjeWNsZSA9IDA7IGN5Y2xlIDwgY291bnQ7IGN5Y2xlICs9IDEpIHtcbiAgICByZXN1bHQgKz0gc3RyaW5nO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBpc05lZ2F0aXZlWmVybyhudW1iZXIpIHtcbiAgcmV0dXJuIChudW1iZXIgPT09IDApICYmIChOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPT09IDEgLyBudW1iZXIpO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzLmlzTm90aGluZyAgICAgID0gaXNOb3RoaW5nO1xubW9kdWxlLmV4cG9ydHMuaXNPYmplY3QgICAgICAgPSBpc09iamVjdDtcbm1vZHVsZS5leHBvcnRzLnRvQXJyYXkgICAgICAgID0gdG9BcnJheTtcbm1vZHVsZS5leHBvcnRzLnJlcGVhdCAgICAgICAgID0gcmVwZWF0O1xubW9kdWxlLmV4cG9ydHMuaXNOZWdhdGl2ZVplcm8gPSBpc05lZ2F0aXZlWmVybztcbm1vZHVsZS5leHBvcnRzLmV4dGVuZCAgICAgICAgID0gZXh0ZW5kO1xuIl0sIm5hbWVzIjpbImlzTm90aGluZyIsInN1YmplY3QiLCJpc09iamVjdCIsInRvQXJyYXkiLCJzZXF1ZW5jZSIsIkFycmF5IiwiaXNBcnJheSIsImV4dGVuZCIsInRhcmdldCIsInNvdXJjZSIsImluZGV4IiwibGVuZ3RoIiwia2V5Iiwic291cmNlS2V5cyIsIk9iamVjdCIsImtleXMiLCJyZXBlYXQiLCJzdHJpbmciLCJjb3VudCIsInJlc3VsdCIsImN5Y2xlIiwiaXNOZWdhdGl2ZVplcm8iLCJudW1iZXIiLCJOdW1iZXIiLCJORUdBVElWRV9JTkZJTklUWSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js":
/*!******************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*eslint-disable no-use-before-define*/ var common = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09; /* Tab */ \nvar CHAR_LINE_FEED = 0x0A; /* LF */ \nvar CHAR_CARRIAGE_RETURN = 0x0D; /* CR */ \nvar CHAR_SPACE = 0x20; /* Space */ \nvar CHAR_EXCLAMATION = 0x21; /* ! */ \nvar CHAR_DOUBLE_QUOTE = 0x22; /* \" */ \nvar CHAR_SHARP = 0x23; /* # */ \nvar CHAR_PERCENT = 0x25; /* % */ \nvar CHAR_AMPERSAND = 0x26; /* & */ \nvar CHAR_SINGLE_QUOTE = 0x27; /* ' */ \nvar CHAR_ASTERISK = 0x2A; /* * */ \nvar CHAR_COMMA = 0x2C; /* , */ \nvar CHAR_MINUS = 0x2D; /* - */ \nvar CHAR_COLON = 0x3A; /* : */ \nvar CHAR_EQUALS = 0x3D; /* = */ \nvar CHAR_GREATER_THAN = 0x3E; /* > */ \nvar CHAR_QUESTION = 0x3F; /* ? */ \nvar CHAR_COMMERCIAL_AT = 0x40; /* @ */ \nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */ \nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */ \nvar CHAR_GRAVE_ACCENT = 0x60; /* ` */ \nvar CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */ \nvar CHAR_VERTICAL_LINE = 0x7C; /* | */ \nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */ \nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = \"\\\\0\";\nESCAPE_SEQUENCES[0x07] = \"\\\\a\";\nESCAPE_SEQUENCES[0x08] = \"\\\\b\";\nESCAPE_SEQUENCES[0x09] = \"\\\\t\";\nESCAPE_SEQUENCES[0x0A] = \"\\\\n\";\nESCAPE_SEQUENCES[0x0B] = \"\\\\v\";\nESCAPE_SEQUENCES[0x0C] = \"\\\\f\";\nESCAPE_SEQUENCES[0x0D] = \"\\\\r\";\nESCAPE_SEQUENCES[0x1B] = \"\\\\e\";\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = \"\\\\\\\\\";\nESCAPE_SEQUENCES[0x85] = \"\\\\N\";\nESCAPE_SEQUENCES[0xA0] = \"\\\\_\";\nESCAPE_SEQUENCES[0x2028] = \"\\\\L\";\nESCAPE_SEQUENCES[0x2029] = \"\\\\P\";\nvar DEPRECATED_BOOLEANS_SYNTAX = [\n    \"y\",\n    \"Y\",\n    \"yes\",\n    \"Yes\",\n    \"YES\",\n    \"on\",\n    \"On\",\n    \"ON\",\n    \"n\",\n    \"N\",\n    \"no\",\n    \"No\",\n    \"NO\",\n    \"off\",\n    \"Off\",\n    \"OFF\"\n];\nfunction compileStyleMap(schema, map) {\n    var result, keys, index, length, tag, style, type;\n    if (map === null) return {};\n    result = {};\n    keys = Object.keys(map);\n    for(index = 0, length = keys.length; index < length; index += 1){\n        tag = keys[index];\n        style = String(map[tag]);\n        if (tag.slice(0, 2) === \"!!\") {\n            tag = \"tag:yaml.org,2002:\" + tag.slice(2);\n        }\n        type = schema.compiledTypeMap[\"fallback\"][tag];\n        if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n            style = type.styleAliases[style];\n        }\n        result[tag] = style;\n    }\n    return result;\n}\nfunction encodeHex(character) {\n    var string, handle, length;\n    string = character.toString(16).toUpperCase();\n    if (character <= 0xFF) {\n        handle = \"x\";\n        length = 2;\n    } else if (character <= 0xFFFF) {\n        handle = \"u\";\n        length = 4;\n    } else if (character <= 0xFFFFFFFF) {\n        handle = \"U\";\n        length = 8;\n    } else {\n        throw new YAMLException(\"code point within a string may not be greater than 0xFFFFFFFF\");\n    }\n    return \"\\\\\" + handle + common.repeat(\"0\", length - string.length) + string;\n}\nfunction State(options) {\n    this.schema = options[\"schema\"] || DEFAULT_FULL_SCHEMA;\n    this.indent = Math.max(1, options[\"indent\"] || 2);\n    this.noArrayIndent = options[\"noArrayIndent\"] || false;\n    this.skipInvalid = options[\"skipInvalid\"] || false;\n    this.flowLevel = common.isNothing(options[\"flowLevel\"]) ? -1 : options[\"flowLevel\"];\n    this.styleMap = compileStyleMap(this.schema, options[\"styles\"] || null);\n    this.sortKeys = options[\"sortKeys\"] || false;\n    this.lineWidth = options[\"lineWidth\"] || 80;\n    this.noRefs = options[\"noRefs\"] || false;\n    this.noCompatMode = options[\"noCompatMode\"] || false;\n    this.condenseFlow = options[\"condenseFlow\"] || false;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.explicitTypes = this.schema.compiledExplicit;\n    this.tag = null;\n    this.result = \"\";\n    this.duplicates = [];\n    this.usedDuplicates = null;\n}\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n    var ind = common.repeat(\" \", spaces), position = 0, next = -1, result = \"\", line, length = string.length;\n    while(position < length){\n        next = string.indexOf(\"\\n\", position);\n        if (next === -1) {\n            line = string.slice(position);\n            position = length;\n        } else {\n            line = string.slice(position, next + 1);\n            position = next + 1;\n        }\n        if (line.length && line !== \"\\n\") result += ind;\n        result += line;\n    }\n    return result;\n}\nfunction generateNextLine(state, level) {\n    return \"\\n\" + common.repeat(\" \", state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n    var index, length, type;\n    for(index = 0, length = state.implicitTypes.length; index < length; index += 1){\n        type = state.implicitTypes[index];\n        if (type.resolve(str)) {\n            return true;\n        }\n    }\n    return false;\n}\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n    return c === CHAR_SPACE || c === CHAR_TAB;\n}\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n    return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF /* BOM */  || 0x10000 <= c && c <= 0x10FFFF;\n}\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// [24] b-line-feed       ::=     #xA    /* LF */\n// [25] b-carriage-return ::=     #xD    /* CR */\n// [3]  c-byte-order-mark ::=     #xFEFF\nfunction isNsChar(c) {\n    return isPrintable(c) && !isWhitespace(c) && c !== 0xFEFF && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n}\n// Simplified test for values allowed after the first character in plain style.\nfunction isPlainSafe(c, prev) {\n    // Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"\n    // where nb-char ::= c-printable - b-char - c-byte-order-mark.\n    return isPrintable(c) && c !== 0xFEFF && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));\n}\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n    // Uses a subset of ns-char - c-indicator\n    // where ns-char = nb-char - s-white.\n    return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white\n     && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n}\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n    var leadingSpaceRe = /^\\n* /;\n    return leadingSpaceRe.test(string);\n}\nvar STYLE_PLAIN = 1, STYLE_SINGLE = 2, STYLE_LITERAL = 3, STYLE_FOLDED = 4, STYLE_DOUBLE = 5;\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {\n    var i;\n    var char, prev_char;\n    var hasLineBreak = false;\n    var hasFoldableLine = false; // only checked if shouldTrackWidth\n    var shouldTrackWidth = lineWidth !== -1;\n    var previousLineBreak = -1; // count the first line correctly\n    var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));\n    if (singleLineOnly) {\n        // Case: no block styles.\n        // Check for disallowed characters to rule out plain and single.\n        for(i = 0; i < string.length; i++){\n            char = string.charCodeAt(i);\n            if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n            plain = plain && isPlainSafe(char, prev_char);\n        }\n    } else {\n        // Case: block styles permitted.\n        for(i = 0; i < string.length; i++){\n            char = string.charCodeAt(i);\n            if (char === CHAR_LINE_FEED) {\n                hasLineBreak = true;\n                // Check if any line can be folded.\n                if (shouldTrackWidth) {\n                    hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n                    i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n                    previousLineBreak = i;\n                }\n            } else if (!isPrintable(char)) {\n                return STYLE_DOUBLE;\n            }\n            prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n            plain = plain && isPlainSafe(char, prev_char);\n        }\n        // in case the end is missing a \\n\n        hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== \" \";\n    }\n    // Although every style can represent \\n without escaping, prefer block styles\n    // for multiline, since they're more readable and they don't add empty lines.\n    // Also prefer folding a super-long line.\n    if (!hasLineBreak && !hasFoldableLine) {\n        // Strings interpretable as another type have to be quoted;\n        // e.g. the string 'true' vs. the boolean true.\n        return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;\n    }\n    // Edge case: block indentation indicator can only have one digit.\n    if (indentPerLevel > 9 && needIndentIndicator(string)) {\n        return STYLE_DOUBLE;\n    }\n    // At this point we know block styles are valid.\n    // Prefer literal style unless we want to fold.\n    return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n}\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey) {\n    state.dump = function() {\n        if (string.length === 0) {\n            return \"''\";\n        }\n        if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {\n            return \"'\" + string + \"'\";\n        }\n        var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n        // As indentation gets deeper, let the width decrease monotonically\n        // to the lower bound min(state.lineWidth, 40).\n        // Note that this implies\n        //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n        //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n        // This behaves better than a constant minimum width which disallows narrower options,\n        // or an indent threshold which causes the width to suddenly increase.\n        var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n        // Without knowing if keys are implicit/explicit, assume implicit for safety.\n        var singleLineOnly = iskey || state.flowLevel > -1 && level >= state.flowLevel;\n        function testAmbiguity(string) {\n            return testImplicitResolving(state, string);\n        }\n        switch(chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)){\n            case STYLE_PLAIN:\n                return string;\n            case STYLE_SINGLE:\n                return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n            case STYLE_LITERAL:\n                return \"|\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n            case STYLE_FOLDED:\n                return \">\" + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n            case STYLE_DOUBLE:\n                return '\"' + escapeString(string, lineWidth) + '\"';\n            default:\n                throw new YAMLException(\"impossible error: invalid scalar style\");\n        }\n    }();\n}\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n    var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : \"\";\n    // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n    var clip = string[string.length - 1] === \"\\n\";\n    var keep = clip && (string[string.length - 2] === \"\\n\" || string === \"\\n\");\n    var chomp = keep ? \"+\" : clip ? \"\" : \"-\";\n    return indentIndicator + chomp + \"\\n\";\n}\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n    return string[string.length - 1] === \"\\n\" ? string.slice(0, -1) : string;\n}\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n    // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n    // unless they're before or after a more-indented line, or at the very\n    // beginning or end, in which case $k$ maps to $k$.\n    // Therefore, parse each chunk as newline(s) followed by a content line.\n    var lineRe = /(\\n+)([^\\n]*)/g;\n    // first line (possibly an empty line)\n    var result = function() {\n        var nextLF = string.indexOf(\"\\n\");\n        nextLF = nextLF !== -1 ? nextLF : string.length;\n        lineRe.lastIndex = nextLF;\n        return foldLine(string.slice(0, nextLF), width);\n    }();\n    // If we haven't reached the first content line yet, don't add an extra \\n.\n    var prevMoreIndented = string[0] === \"\\n\" || string[0] === \" \";\n    var moreIndented;\n    // rest of the lines\n    var match;\n    while(match = lineRe.exec(string)){\n        var prefix = match[1], line = match[2];\n        moreIndented = line[0] === \" \";\n        result += prefix + (!prevMoreIndented && !moreIndented && line !== \"\" ? \"\\n\" : \"\") + foldLine(line, width);\n        prevMoreIndented = moreIndented;\n    }\n    return result;\n}\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n    if (line === \"\" || line[0] === \" \") return line;\n    // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n    var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n    var match;\n    // start is an inclusive index. end, curr, and next are exclusive.\n    var start = 0, end, curr = 0, next = 0;\n    var result = \"\";\n    // Invariants: 0 <= start <= length-1.\n    //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n    // Inside the loop:\n    //   A match implies length >= 2, so curr and next are <= length-2.\n    while(match = breakRe.exec(line)){\n        next = match.index;\n        // maintain invariant: curr - start <= width\n        if (next - start > width) {\n            end = curr > start ? curr : next; // derive end <= length-2\n            result += \"\\n\" + line.slice(start, end);\n            // skip the space that was output as \\n\n            start = end + 1; // derive start <= length-1\n        }\n        curr = next;\n    }\n    // By the invariants, start <= length-1, so there is something left over.\n    // It is either the whole string or a part starting from non-whitespace.\n    result += \"\\n\";\n    // Insert a break if the remainder is too long and there is a break available.\n    if (line.length - start > width && curr > start) {\n        result += line.slice(start, curr) + \"\\n\" + line.slice(curr + 1);\n    } else {\n        result += line.slice(start);\n    }\n    return result.slice(1); // drop extra \\n joiner\n}\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n    var result = \"\";\n    var char, nextChar;\n    var escapeSeq;\n    for(var i = 0; i < string.length; i++){\n        char = string.charCodeAt(i);\n        // Check for surrogate pairs (reference Unicode 3.0 section \"3.7 Surrogates\").\n        if (char >= 0xD800 && char <= 0xDBFF /* high surrogate */ ) {\n            nextChar = string.charCodeAt(i + 1);\n            if (nextChar >= 0xDC00 && nextChar <= 0xDFFF /* low surrogate */ ) {\n                // Combine the surrogate pair and store it escaped.\n                result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);\n                // Advance index one extra since we already used that char here.\n                i++;\n                continue;\n            }\n        }\n        escapeSeq = ESCAPE_SEQUENCES[char];\n        result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);\n    }\n    return result;\n}\nfunction writeFlowSequence(state, level, object) {\n    var _result = \"\", _tag = state.tag, index, length;\n    for(index = 0, length = object.length; index < length; index += 1){\n        // Write only valid elements.\n        if (writeNode(state, level, object[index], false, false)) {\n            if (index !== 0) _result += \",\" + (!state.condenseFlow ? \" \" : \"\");\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = \"[\" + _result + \"]\";\n}\nfunction writeBlockSequence(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, index, length;\n    for(index = 0, length = object.length; index < length; index += 1){\n        // Write only valid elements.\n        if (writeNode(state, level + 1, object[index], true, true)) {\n            if (!compact || index !== 0) {\n                _result += generateNextLine(state, level);\n            }\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                _result += \"-\";\n            } else {\n                _result += \"- \";\n            }\n            _result += state.dump;\n        }\n    }\n    state.tag = _tag;\n    state.dump = _result || \"[]\"; // Empty sequence if no valid values.\n}\nfunction writeFlowMapping(state, level, object) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, pairBuffer;\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (index !== 0) pairBuffer += \", \";\n        if (state.condenseFlow) pairBuffer += '\"';\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (!writeNode(state, level, objectKey, false, false)) {\n            continue; // Skip this pair because of invalid key;\n        }\n        if (state.dump.length > 1024) pairBuffer += \"? \";\n        pairBuffer += state.dump + (state.condenseFlow ? '\"' : \"\") + \":\" + (state.condenseFlow ? \"\" : \" \");\n        if (!writeNode(state, level, objectValue, false, false)) {\n            continue; // Skip this pair because of invalid value.\n        }\n        pairBuffer += state.dump;\n        // Both key and value are valid.\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = \"{\" + _result + \"}\";\n}\nfunction writeBlockMapping(state, level, object, compact) {\n    var _result = \"\", _tag = state.tag, objectKeyList = Object.keys(object), index, length, objectKey, objectValue, explicitPair, pairBuffer;\n    // Allow sorting keys so that the output file is deterministic\n    if (state.sortKeys === true) {\n        // Default sorting\n        objectKeyList.sort();\n    } else if (typeof state.sortKeys === \"function\") {\n        // Custom sort function\n        objectKeyList.sort(state.sortKeys);\n    } else if (state.sortKeys) {\n        // Something is wrong\n        throw new YAMLException(\"sortKeys must be a boolean or a function\");\n    }\n    for(index = 0, length = objectKeyList.length; index < length; index += 1){\n        pairBuffer = \"\";\n        if (!compact || index !== 0) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        objectKey = objectKeyList[index];\n        objectValue = object[objectKey];\n        if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n            continue; // Skip this pair because of invalid key.\n        }\n        explicitPair = state.tag !== null && state.tag !== \"?\" || state.dump && state.dump.length > 1024;\n        if (explicitPair) {\n            if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n                pairBuffer += \"?\";\n            } else {\n                pairBuffer += \"? \";\n            }\n        }\n        pairBuffer += state.dump;\n        if (explicitPair) {\n            pairBuffer += generateNextLine(state, level);\n        }\n        if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n            continue; // Skip this pair because of invalid value.\n        }\n        if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n            pairBuffer += \":\";\n        } else {\n            pairBuffer += \": \";\n        }\n        pairBuffer += state.dump;\n        // Both key and value are valid.\n        _result += pairBuffer;\n    }\n    state.tag = _tag;\n    state.dump = _result || \"{}\"; // Empty mapping if no valid pairs.\n}\nfunction detectType(state, object, explicit) {\n    var _result, typeList, index, length, type, style;\n    typeList = explicit ? state.explicitTypes : state.implicitTypes;\n    for(index = 0, length = typeList.length; index < length; index += 1){\n        type = typeList[index];\n        if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === \"object\" && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n            state.tag = explicit ? type.tag : \"?\";\n            if (type.represent) {\n                style = state.styleMap[type.tag] || type.defaultStyle;\n                if (_toString.call(type.represent) === \"[object Function]\") {\n                    _result = type.represent(object, style);\n                } else if (_hasOwnProperty.call(type.represent, style)) {\n                    _result = type.represent[style](object, style);\n                } else {\n                    throw new YAMLException(\"!<\" + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n                }\n                state.dump = _result;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey) {\n    state.tag = null;\n    state.dump = object;\n    if (!detectType(state, object, false)) {\n        detectType(state, object, true);\n    }\n    var type = _toString.call(state.dump);\n    if (block) {\n        block = state.flowLevel < 0 || state.flowLevel > level;\n    }\n    var objectOrArray = type === \"[object Object]\" || type === \"[object Array]\", duplicateIndex, duplicate;\n    if (objectOrArray) {\n        duplicateIndex = state.duplicates.indexOf(object);\n        duplicate = duplicateIndex !== -1;\n    }\n    if (state.tag !== null && state.tag !== \"?\" || duplicate || state.indent !== 2 && level > 0) {\n        compact = false;\n    }\n    if (duplicate && state.usedDuplicates[duplicateIndex]) {\n        state.dump = \"*ref_\" + duplicateIndex;\n    } else {\n        if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n            state.usedDuplicates[duplicateIndex] = true;\n        }\n        if (type === \"[object Object]\") {\n            if (block && Object.keys(state.dump).length !== 0) {\n                writeBlockMapping(state, level, state.dump, compact);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowMapping(state, level, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object Array]\") {\n            var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;\n            if (block && state.dump.length !== 0) {\n                writeBlockSequence(state, arrayLevel, state.dump, compact);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + state.dump;\n                }\n            } else {\n                writeFlowSequence(state, arrayLevel, state.dump);\n                if (duplicate) {\n                    state.dump = \"&ref_\" + duplicateIndex + \" \" + state.dump;\n                }\n            }\n        } else if (type === \"[object String]\") {\n            if (state.tag !== \"?\") {\n                writeScalar(state, state.dump, level, iskey);\n            }\n        } else {\n            if (state.skipInvalid) return false;\n            throw new YAMLException(\"unacceptable kind of an object to dump \" + type);\n        }\n        if (state.tag !== null && state.tag !== \"?\") {\n            state.dump = \"!<\" + state.tag + \"> \" + state.dump;\n        }\n    }\n    return true;\n}\nfunction getDuplicateReferences(object, state) {\n    var objects = [], duplicatesIndexes = [], index, length;\n    inspectNode(object, objects, duplicatesIndexes);\n    for(index = 0, length = duplicatesIndexes.length; index < length; index += 1){\n        state.duplicates.push(objects[duplicatesIndexes[index]]);\n    }\n    state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n    var objectKeyList, index, length;\n    if (object !== null && typeof object === \"object\") {\n        index = objects.indexOf(object);\n        if (index !== -1) {\n            if (duplicatesIndexes.indexOf(index) === -1) {\n                duplicatesIndexes.push(index);\n            }\n        } else {\n            objects.push(object);\n            if (Array.isArray(object)) {\n                for(index = 0, length = object.length; index < length; index += 1){\n                    inspectNode(object[index], objects, duplicatesIndexes);\n                }\n            } else {\n                objectKeyList = Object.keys(object);\n                for(index = 0, length = objectKeyList.length; index < length; index += 1){\n                    inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n                }\n            }\n        }\n    }\n}\nfunction dump(input, options) {\n    options = options || {};\n    var state = new State(options);\n    if (!state.noRefs) getDuplicateReferences(input, state);\n    if (writeNode(state, 0, input, true, true)) return state.dump + \"\\n\";\n    return \"\";\n}\nfunction safeDump(input, options) {\n    return dump(input, common.extend({\n        schema: DEFAULT_SAFE_SCHEMA\n    }, options));\n}\nmodule.exports.dump = dump;\nmodule.exports.safeDump = safeDump;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js ***!
  \*********************************************************************************/
/***/ ((module) => {

eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\nfunction YAMLException(reason, mark) {\n    // Super constructor\n    Error.call(this);\n    this.name = \"YAMLException\";\n    this.reason = reason;\n    this.mark = mark;\n    this.message = (this.reason || \"(unknown reason)\") + (this.mark ? \" \" + this.mark.toString() : \"\");\n    // Include stack trace in error object\n    if (Error.captureStackTrace) {\n        // Chrome and NodeJS\n        Error.captureStackTrace(this, this.constructor);\n    } else {\n        // FF, IE 10+ and Safari 6+. Fallback for others\n        this.stack = new Error().stack || \"\";\n    }\n}\n// Inherit from Error\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\nYAMLException.prototype.toString = function toString(compact) {\n    var result = this.name + \": \";\n    result += this.reason || \"(unknown reason)\";\n    if (!compact && this.mark) {\n        result += \" \" + this.mark.toString();\n    }\n    return result;\n};\nmodule.exports = YAMLException;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2V4Y2VwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQSwrREFBK0Q7QUFDL0QsRUFBRTtBQUNGO0FBRUEsU0FBU0EsY0FBY0MsTUFBTSxFQUFFQyxJQUFJO0lBQ2pDLG9CQUFvQjtJQUNwQkMsTUFBTUMsSUFBSSxDQUFDLElBQUk7SUFFZixJQUFJLENBQUNDLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ0osTUFBTSxHQUFHQTtJQUNkLElBQUksQ0FBQ0MsSUFBSSxHQUFHQTtJQUNaLElBQUksQ0FBQ0ksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDTCxNQUFNLElBQUksa0JBQWlCLElBQU0sS0FBSSxDQUFDQyxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUNBLElBQUksQ0FBQ0ssUUFBUSxLQUFLLEVBQUM7SUFFaEcsc0NBQXNDO0lBQ3RDLElBQUlKLE1BQU1LLGlCQUFpQixFQUFFO1FBQzNCLG9CQUFvQjtRQUNwQkwsTUFBTUssaUJBQWlCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQ0MsV0FBVztJQUNoRCxPQUFPO1FBQ0wsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQ0MsS0FBSyxHQUFHLElBQUtQLFFBQVNPLEtBQUssSUFBSTtJQUN0QztBQUNGO0FBR0EscUJBQXFCO0FBQ3JCVixjQUFjVyxTQUFTLEdBQUdDLE9BQU9DLE1BQU0sQ0FBQ1YsTUFBTVEsU0FBUztBQUN2RFgsY0FBY1csU0FBUyxDQUFDRixXQUFXLEdBQUdUO0FBR3RDQSxjQUFjVyxTQUFTLENBQUNKLFFBQVEsR0FBRyxTQUFTQSxTQUFTTyxPQUFPO0lBQzFELElBQUlDLFNBQVMsSUFBSSxDQUFDVixJQUFJLEdBQUc7SUFFekJVLFVBQVUsSUFBSSxDQUFDZCxNQUFNLElBQUk7SUFFekIsSUFBSSxDQUFDYSxXQUFXLElBQUksQ0FBQ1osSUFBSSxFQUFFO1FBQ3pCYSxVQUFVLE1BQU0sSUFBSSxDQUFDYixJQUFJLENBQUNLLFFBQVE7SUFDcEM7SUFFQSxPQUFPUTtBQUNUO0FBR0FDLE9BQU9DLE9BQU8sR0FBR2pCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2V4Y2VwdGlvbi5qcz9jMWRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFlBTUwgZXJyb3IgY2xhc3MuIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvODQ1ODk4NFxuLy9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gWUFNTEV4Y2VwdGlvbihyZWFzb24sIG1hcmspIHtcbiAgLy8gU3VwZXIgY29uc3RydWN0b3JcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICB0aGlzLm5hbWUgPSAnWUFNTEV4Y2VwdGlvbic7XG4gIHRoaXMucmVhc29uID0gcmVhc29uO1xuICB0aGlzLm1hcmsgPSBtYXJrO1xuICB0aGlzLm1lc3NhZ2UgPSAodGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknKSArICh0aGlzLm1hcmsgPyAnICcgKyB0aGlzLm1hcmsudG9TdHJpbmcoKSA6ICcnKTtcblxuICAvLyBJbmNsdWRlIHN0YWNrIHRyYWNlIGluIGVycm9yIG9iamVjdFxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAvLyBDaHJvbWUgYW5kIE5vZGVKU1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIC8vIEZGLCBJRSAxMCsgYW5kIFNhZmFyaSA2Ky4gRmFsbGJhY2sgZm9yIG90aGVyc1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrIHx8ICcnO1xuICB9XG59XG5cblxuLy8gSW5oZXJpdCBmcm9tIEVycm9yXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gWUFNTEV4Y2VwdGlvbjtcblxuXG5ZQU1MRXhjZXB0aW9uLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMubmFtZSArICc6ICc7XG5cbiAgcmVzdWx0ICs9IHRoaXMucmVhc29uIHx8ICcodW5rbm93biByZWFzb24pJztcblxuICBpZiAoIWNvbXBhY3QgJiYgdGhpcy5tYXJrKSB7XG4gICAgcmVzdWx0ICs9ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBZQU1MRXhjZXB0aW9uO1xuIl0sIm5hbWVzIjpbIllBTUxFeGNlcHRpb24iLCJyZWFzb24iLCJtYXJrIiwiRXJyb3IiLCJjYWxsIiwibmFtZSIsIm1lc3NhZ2UiLCJ0b1N0cmluZyIsImNhcHR1cmVTdGFja1RyYWNlIiwiY29uc3RydWN0b3IiLCJzdGFjayIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbXBhY3QiLCJyZXN1bHQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js":
/*!******************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*eslint-disable max-len,no-use-before-define*/ var common = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar Mark = __webpack_require__(/*! ./mark */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction _class(obj) {\n    return Object.prototype.toString.call(obj);\n}\nfunction is_EOL(c) {\n    return c === 0x0A /* LF */  || c === 0x0D /* CR */ ;\n}\nfunction is_WHITE_SPACE(c) {\n    return c === 0x09 /* Tab */  || c === 0x20 /* Space */ ;\n}\nfunction is_WS_OR_EOL(c) {\n    return c === 0x09 /* Tab */  || c === 0x20 /* Space */  || c === 0x0A /* LF */  || c === 0x0D /* CR */ ;\n}\nfunction is_FLOW_INDICATOR(c) {\n    return c === 0x2C /* , */  || c === 0x5B /* [ */  || c === 0x5D /* ] */  || c === 0x7B /* { */  || c === 0x7D /* } */ ;\n}\nfunction fromHexCode(c) {\n    var lc;\n    if (0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ) {\n        return c - 0x30;\n    }\n    /*eslint-disable no-bitwise*/ lc = c | 0x20;\n    if (0x61 /* a */  <= lc && lc <= 0x66 /* f */ ) {\n        return lc - 0x61 + 10;\n    }\n    return -1;\n}\nfunction escapedHexLen(c) {\n    if (c === 0x78 /* x */ ) {\n        return 2;\n    }\n    if (c === 0x75 /* u */ ) {\n        return 4;\n    }\n    if (c === 0x55 /* U */ ) {\n        return 8;\n    }\n    return 0;\n}\nfunction fromDecimalCode(c) {\n    if (0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ) {\n        return c - 0x30;\n    }\n    return -1;\n}\nfunction simpleEscapeSequence(c) {\n    /* eslint-disable indent */ return c === 0x30 /* 0 */  ? \"\\x00\" : c === 0x61 /* a */  ? \"\\x07\" : c === 0x62 /* b */  ? \"\\b\" : c === 0x74 /* t */  ? \"\t\" : c === 0x09 /* Tab */  ? \"\t\" : c === 0x6E /* n */  ? \"\\n\" : c === 0x76 /* v */  ? \"\\v\" : c === 0x66 /* f */  ? \"\\f\" : c === 0x72 /* r */  ? \"\\r\" : c === 0x65 /* e */  ? \"\\x1b\" : c === 0x20 /* Space */  ? \" \" : c === 0x22 /* \" */  ? '\"' : c === 0x2F /* / */  ? \"/\" : c === 0x5C /* \\ */  ? \"\\\\\" : c === 0x4E /* N */  ? \"\\x85\" : c === 0x5F /* _ */  ? \"\\xa0\" : c === 0x4C /* L */  ? \"\\u2028\" : c === 0x50 /* P */  ? \"\\u2029\" : \"\";\n}\nfunction charFromCodepoint(c) {\n    if (c <= 0xFFFF) {\n        return String.fromCharCode(c);\n    }\n    // Encode UTF-16 surrogate pair\n    // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n    return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor(var i = 0; i < 256; i++){\n    simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n    simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State(input, options) {\n    this.input = input;\n    this.filename = options[\"filename\"] || null;\n    this.schema = options[\"schema\"] || DEFAULT_FULL_SCHEMA;\n    this.onWarning = options[\"onWarning\"] || null;\n    this.legacy = options[\"legacy\"] || false;\n    this.json = options[\"json\"] || false;\n    this.listener = options[\"listener\"] || null;\n    this.implicitTypes = this.schema.compiledImplicit;\n    this.typeMap = this.schema.compiledTypeMap;\n    this.length = input.length;\n    this.position = 0;\n    this.line = 0;\n    this.lineStart = 0;\n    this.lineIndent = 0;\n    this.documents = [];\n/*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/ }\nfunction generateError(state, message) {\n    return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\nfunction throwError(state, message) {\n    throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n    if (state.onWarning) {\n        state.onWarning.call(null, generateError(state, message));\n    }\n}\nvar directiveHandlers = {\n    YAML: function handleYamlDirective(state, name, args) {\n        var match, major, minor;\n        if (state.version !== null) {\n            throwError(state, \"duplication of %YAML directive\");\n        }\n        if (args.length !== 1) {\n            throwError(state, \"YAML directive accepts exactly one argument\");\n        }\n        match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n        if (match === null) {\n            throwError(state, \"ill-formed argument of the YAML directive\");\n        }\n        major = parseInt(match[1], 10);\n        minor = parseInt(match[2], 10);\n        if (major !== 1) {\n            throwError(state, \"unacceptable YAML version of the document\");\n        }\n        state.version = args[0];\n        state.checkLineBreaks = minor < 2;\n        if (minor !== 1 && minor !== 2) {\n            throwWarning(state, \"unsupported YAML version of the document\");\n        }\n    },\n    TAG: function handleTagDirective(state, name, args) {\n        var handle, prefix;\n        if (args.length !== 2) {\n            throwError(state, \"TAG directive accepts exactly two arguments\");\n        }\n        handle = args[0];\n        prefix = args[1];\n        if (!PATTERN_TAG_HANDLE.test(handle)) {\n            throwError(state, \"ill-formed tag handle (first argument) of the TAG directive\");\n        }\n        if (_hasOwnProperty.call(state.tagMap, handle)) {\n            throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n        }\n        if (!PATTERN_TAG_URI.test(prefix)) {\n            throwError(state, \"ill-formed tag prefix (second argument) of the TAG directive\");\n        }\n        state.tagMap[handle] = prefix;\n    }\n};\nfunction captureSegment(state, start, end, checkJson) {\n    var _position, _length, _character, _result;\n    if (start < end) {\n        _result = state.input.slice(start, end);\n        if (checkJson) {\n            for(_position = 0, _length = _result.length; _position < _length; _position += 1){\n                _character = _result.charCodeAt(_position);\n                if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n                    throwError(state, \"expected valid JSON character\");\n                }\n            }\n        } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n            throwError(state, \"the stream contains non-printable characters\");\n        }\n        state.result += _result;\n    }\n}\nfunction mergeMappings(state, destination, source, overridableKeys) {\n    var sourceKeys, key, index, quantity;\n    if (!common.isObject(source)) {\n        throwError(state, \"cannot merge mappings; the provided source object is unacceptable\");\n    }\n    sourceKeys = Object.keys(source);\n    for(index = 0, quantity = sourceKeys.length; index < quantity; index += 1){\n        key = sourceKeys[index];\n        if (!_hasOwnProperty.call(destination, key)) {\n            destination[key] = source[key];\n            overridableKeys[key] = true;\n        }\n    }\n}\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n    var index, quantity;\n    // The output is a plain object here, so keys can only be strings.\n    // We need to convert keyNode to a string, but doing so can hang the process\n    // (deeply nested arrays that explode exponentially using aliases).\n    if (Array.isArray(keyNode)) {\n        keyNode = Array.prototype.slice.call(keyNode);\n        for(index = 0, quantity = keyNode.length; index < quantity; index += 1){\n            if (Array.isArray(keyNode[index])) {\n                throwError(state, \"nested arrays are not supported inside keys\");\n            }\n            if (typeof keyNode === \"object\" && _class(keyNode[index]) === \"[object Object]\") {\n                keyNode[index] = \"[object Object]\";\n            }\n        }\n    }\n    // Avoid code execution in load() via toString property\n    // (still use its own toString for arrays, timestamps,\n    // and whatever user schema extensions happen to have @@toStringTag)\n    if (typeof keyNode === \"object\" && _class(keyNode) === \"[object Object]\") {\n        keyNode = \"[object Object]\";\n    }\n    keyNode = String(keyNode);\n    if (_result === null) {\n        _result = {};\n    }\n    if (keyTag === \"tag:yaml.org,2002:merge\") {\n        if (Array.isArray(valueNode)) {\n            for(index = 0, quantity = valueNode.length; index < quantity; index += 1){\n                mergeMappings(state, _result, valueNode[index], overridableKeys);\n            }\n        } else {\n            mergeMappings(state, _result, valueNode, overridableKeys);\n        }\n    } else {\n        if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n            state.line = startLine || state.line;\n            state.position = startPos || state.position;\n            throwError(state, \"duplicated mapping key\");\n        }\n        _result[keyNode] = valueNode;\n        delete overridableKeys[keyNode];\n    }\n    return _result;\n}\nfunction readLineBreak(state) {\n    var ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x0A /* LF */ ) {\n        state.position++;\n    } else if (ch === 0x0D /* CR */ ) {\n        state.position++;\n        if (state.input.charCodeAt(state.position) === 0x0A /* LF */ ) {\n            state.position++;\n        }\n    } else {\n        throwError(state, \"a line break is expected\");\n    }\n    state.line += 1;\n    state.lineStart = state.position;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n    var lineBreaks = 0, ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        while(is_WHITE_SPACE(ch)){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (allowComments && ch === 0x23 /* # */ ) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (ch !== 0x0A /* LF */  && ch !== 0x0D /* CR */  && ch !== 0);\n        }\n        if (is_EOL(ch)) {\n            readLineBreak(state);\n            ch = state.input.charCodeAt(state.position);\n            lineBreaks++;\n            state.lineIndent = 0;\n            while(ch === 0x20 /* Space */ ){\n                state.lineIndent++;\n                ch = state.input.charCodeAt(++state.position);\n            }\n        } else {\n            break;\n        }\n    }\n    if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n        throwWarning(state, \"deficient indentation\");\n    }\n    return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n    var _position = state.position, ch;\n    ch = state.input.charCodeAt(_position);\n    // Condition state.position === state.lineStart is tested\n    // in parent on each call, for efficiency. No needs to test here again.\n    if ((ch === 0x2D /* - */  || ch === 0x2E /* . */ ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n        _position += 3;\n        ch = state.input.charCodeAt(_position);\n        if (ch === 0 || is_WS_OR_EOL(ch)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction writeFoldedLines(state, count) {\n    if (count === 1) {\n        state.result += \" \";\n    } else if (count > 1) {\n        state.result += common.repeat(\"\\n\", count - 1);\n    }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n    var preceding, following, captureStart, captureEnd, hasPendingContent, _line, _lineStart, _lineIndent, _kind = state.kind, _result = state.result, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 /* # */  || ch === 0x26 /* & */  || ch === 0x2A /* * */  || ch === 0x21 /* ! */  || ch === 0x7C /* | */  || ch === 0x3E /* > */  || ch === 0x27 /* ' */  || ch === 0x22 /* \" */  || ch === 0x25 /* % */  || ch === 0x40 /* @ */  || ch === 0x60 /* ` */ ) {\n        return false;\n    }\n    if (ch === 0x3F /* ? */  || ch === 0x2D /* - */ ) {\n        following = state.input.charCodeAt(state.position + 1);\n        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n            return false;\n        }\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    captureStart = captureEnd = state.position;\n    hasPendingContent = false;\n    while(ch !== 0){\n        if (ch === 0x3A /* : */ ) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n                break;\n            }\n        } else if (ch === 0x23 /* # */ ) {\n            preceding = state.input.charCodeAt(state.position - 1);\n            if (is_WS_OR_EOL(preceding)) {\n                break;\n            }\n        } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n            break;\n        } else if (is_EOL(ch)) {\n            _line = state.line;\n            _lineStart = state.lineStart;\n            _lineIndent = state.lineIndent;\n            skipSeparationSpace(state, false, -1);\n            if (state.lineIndent >= nodeIndent) {\n                hasPendingContent = true;\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            } else {\n                state.position = captureEnd;\n                state.line = _line;\n                state.lineStart = _lineStart;\n                state.lineIndent = _lineIndent;\n                break;\n            }\n        }\n        if (hasPendingContent) {\n            captureSegment(state, captureStart, captureEnd, false);\n            writeFoldedLines(state, state.line - _line);\n            captureStart = captureEnd = state.position;\n            hasPendingContent = false;\n        }\n        if (!is_WHITE_SPACE(ch)) {\n            captureEnd = state.position + 1;\n        }\n        ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, captureEnd, false);\n    if (state.result) {\n        return true;\n    }\n    state.kind = _kind;\n    state.result = _result;\n    return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n    var ch, captureStart, captureEnd;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x27 /* ' */ ) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x27 /* ' */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (ch === 0x27 /* ' */ ) {\n                captureStart = state.position;\n                state.position++;\n                captureEnd = state.position;\n            } else {\n                return true;\n            }\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a single quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a single quoted scalar\");\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n    var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x22 /* \" */ ) {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    state.position++;\n    captureStart = captureEnd = state.position;\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        if (ch === 0x22 /* \" */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            state.position++;\n            return true;\n        } else if (ch === 0x5C /* \\ */ ) {\n            captureSegment(state, captureStart, state.position, true);\n            ch = state.input.charCodeAt(++state.position);\n            if (is_EOL(ch)) {\n                skipSeparationSpace(state, false, nodeIndent);\n            // TODO: rework to inline fn with no type cast?\n            } else if (ch < 256 && simpleEscapeCheck[ch]) {\n                state.result += simpleEscapeMap[ch];\n                state.position++;\n            } else if ((tmp = escapedHexLen(ch)) > 0) {\n                hexLength = tmp;\n                hexResult = 0;\n                for(; hexLength > 0; hexLength--){\n                    ch = state.input.charCodeAt(++state.position);\n                    if ((tmp = fromHexCode(ch)) >= 0) {\n                        hexResult = (hexResult << 4) + tmp;\n                    } else {\n                        throwError(state, \"expected hexadecimal character\");\n                    }\n                }\n                state.result += charFromCodepoint(hexResult);\n                state.position++;\n            } else {\n                throwError(state, \"unknown escape sequence\");\n            }\n            captureStart = captureEnd = state.position;\n        } else if (is_EOL(ch)) {\n            captureSegment(state, captureStart, captureEnd, true);\n            writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n            captureStart = captureEnd = state.position;\n        } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n            throwError(state, \"unexpected end of the document within a double quoted scalar\");\n        } else {\n            state.position++;\n            captureEnd = state.position;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a double quoted scalar\");\n}\nfunction readFlowCollection(state, nodeIndent) {\n    var readNext = true, _line, _tag = state.tag, _result, _anchor = state.anchor, following, terminator, isPair, isExplicitPair, isMapping, overridableKeys = {}, keyNode, keyTag, valueNode, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x5B /* [ */ ) {\n        terminator = 0x5D; /* ] */ \n        isMapping = false;\n        _result = [];\n    } else if (ch === 0x7B /* { */ ) {\n        terminator = 0x7D; /* } */ \n        isMapping = true;\n        _result = {};\n    } else {\n        return false;\n    }\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(++state.position);\n    while(ch !== 0){\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === terminator) {\n            state.position++;\n            state.tag = _tag;\n            state.anchor = _anchor;\n            state.kind = isMapping ? \"mapping\" : \"sequence\";\n            state.result = _result;\n            return true;\n        } else if (!readNext) {\n            throwError(state, \"missed comma between flow collection entries\");\n        }\n        keyTag = keyNode = valueNode = null;\n        isPair = isExplicitPair = false;\n        if (ch === 0x3F /* ? */ ) {\n            following = state.input.charCodeAt(state.position + 1);\n            if (is_WS_OR_EOL(following)) {\n                isPair = isExplicitPair = true;\n                state.position++;\n                skipSeparationSpace(state, true, nodeIndent);\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        keyTag = state.tag;\n        keyNode = state.result;\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if ((isExplicitPair || state.line === _line) && ch === 0x3A /* : */ ) {\n            isPair = true;\n            ch = state.input.charCodeAt(++state.position);\n            skipSeparationSpace(state, true, nodeIndent);\n            composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n            valueNode = state.result;\n        }\n        if (isMapping) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n        } else if (isPair) {\n            _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n        } else {\n            _result.push(keyNode);\n        }\n        skipSeparationSpace(state, true, nodeIndent);\n        ch = state.input.charCodeAt(state.position);\n        if (ch === 0x2C /* , */ ) {\n            readNext = true;\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            readNext = false;\n        }\n    }\n    throwError(state, \"unexpected end of the stream within a flow collection\");\n}\nfunction readBlockScalar(state, nodeIndent) {\n    var captureStart, folding, chomping = CHOMPING_CLIP, didReadContent = false, detectedIndent = false, textIndent = nodeIndent, emptyLines = 0, atMoreIndented = false, tmp, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x7C /* | */ ) {\n        folding = false;\n    } else if (ch === 0x3E /* > */ ) {\n        folding = true;\n    } else {\n        return false;\n    }\n    state.kind = \"scalar\";\n    state.result = \"\";\n    while(ch !== 0){\n        ch = state.input.charCodeAt(++state.position);\n        if (ch === 0x2B /* + */  || ch === 0x2D /* - */ ) {\n            if (CHOMPING_CLIP === chomping) {\n                chomping = ch === 0x2B /* + */  ? CHOMPING_KEEP : CHOMPING_STRIP;\n            } else {\n                throwError(state, \"repeat of a chomping mode identifier\");\n            }\n        } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n            if (tmp === 0) {\n                throwError(state, \"bad explicit indentation width of a block scalar; it cannot be less than one\");\n            } else if (!detectedIndent) {\n                textIndent = nodeIndent + tmp - 1;\n                detectedIndent = true;\n            } else {\n                throwError(state, \"repeat of an indentation width identifier\");\n            }\n        } else {\n            break;\n        }\n    }\n    if (is_WHITE_SPACE(ch)) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (is_WHITE_SPACE(ch));\n        if (ch === 0x23 /* # */ ) {\n            do {\n                ch = state.input.charCodeAt(++state.position);\n            }while (!is_EOL(ch) && ch !== 0);\n        }\n    }\n    while(ch !== 0){\n        readLineBreak(state);\n        state.lineIndent = 0;\n        ch = state.input.charCodeAt(state.position);\n        while((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20 /* Space */ ){\n            state.lineIndent++;\n            ch = state.input.charCodeAt(++state.position);\n        }\n        if (!detectedIndent && state.lineIndent > textIndent) {\n            textIndent = state.lineIndent;\n        }\n        if (is_EOL(ch)) {\n            emptyLines++;\n            continue;\n        }\n        // End of the scalar.\n        if (state.lineIndent < textIndent) {\n            // Perform the chomping.\n            if (chomping === CHOMPING_KEEP) {\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            } else if (chomping === CHOMPING_CLIP) {\n                if (didReadContent) {\n                    state.result += \"\\n\";\n                }\n            }\n            break;\n        }\n        // Folded style: use fancy rules to handle line breaks.\n        if (folding) {\n            // Lines starting with white space characters (more-indented lines) are not folded.\n            if (is_WHITE_SPACE(ch)) {\n                atMoreIndented = true;\n                // except for the first content line (cf. Example 8.1)\n                state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n            // End of more-indented block.\n            } else if (atMoreIndented) {\n                atMoreIndented = false;\n                state.result += common.repeat(\"\\n\", emptyLines + 1);\n            // Just one line break - perceive as the same line.\n            } else if (emptyLines === 0) {\n                if (didReadContent) {\n                    state.result += \" \";\n                }\n            // Several line breaks - perceive as different lines.\n            } else {\n                state.result += common.repeat(\"\\n\", emptyLines);\n            }\n        // Literal style: just add exact number of line breaks between content lines.\n        } else {\n            // Keep all line breaks except the header line break.\n            state.result += common.repeat(\"\\n\", didReadContent ? 1 + emptyLines : emptyLines);\n        }\n        didReadContent = true;\n        detectedIndent = true;\n        emptyLines = 0;\n        captureStart = state.position;\n        while(!is_EOL(ch) && ch !== 0){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        captureSegment(state, captureStart, state.position, false);\n    }\n    return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n    var _line, _tag = state.tag, _anchor = state.anchor, _result = [], following, detected = false, ch;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        if (ch !== 0x2D /* - */ ) {\n            break;\n        }\n        following = state.input.charCodeAt(state.position + 1);\n        if (!is_WS_OR_EOL(following)) {\n            break;\n        }\n        detected = true;\n        state.position++;\n        if (skipSeparationSpace(state, true, -1)) {\n            if (state.lineIndent <= nodeIndent) {\n                _result.push(null);\n                ch = state.input.charCodeAt(state.position);\n                continue;\n            }\n        }\n        _line = state.line;\n        composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n        _result.push(state.result);\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n            throwError(state, \"bad indentation of a sequence entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"sequence\";\n        state.result = _result;\n        return true;\n    }\n    return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n    var following, allowCompact, _line, _pos, _tag = state.tag, _anchor = state.anchor, _result = {}, overridableKeys = {}, keyTag = null, keyNode = null, valueNode = null, atExplicitKey = false, detected = false, ch;\n    if (state.anchor !== null) {\n        state.anchorMap[state.anchor] = _result;\n    }\n    ch = state.input.charCodeAt(state.position);\n    while(ch !== 0){\n        following = state.input.charCodeAt(state.position + 1);\n        _line = state.line; // Save the current line.\n        _pos = state.position;\n        //\n        // Explicit notation case. There are two separate blocks:\n        // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n        //\n        if ((ch === 0x3F /* ? */  || ch === 0x3A /* : */ ) && is_WS_OR_EOL(following)) {\n            if (ch === 0x3F /* ? */ ) {\n                if (atExplicitKey) {\n                    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n                    keyTag = keyNode = valueNode = null;\n                }\n                detected = true;\n                atExplicitKey = true;\n                allowCompact = true;\n            } else if (atExplicitKey) {\n                // i.e. 0x3A/* : */ === character after the explicit key.\n                atExplicitKey = false;\n                allowCompact = true;\n            } else {\n                throwError(state, \"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line\");\n            }\n            state.position += 1;\n            ch = following;\n        //\n        // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n        //\n        } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n            if (state.line === _line) {\n                ch = state.input.charCodeAt(state.position);\n                while(is_WHITE_SPACE(ch)){\n                    ch = state.input.charCodeAt(++state.position);\n                }\n                if (ch === 0x3A /* : */ ) {\n                    ch = state.input.charCodeAt(++state.position);\n                    if (!is_WS_OR_EOL(ch)) {\n                        throwError(state, \"a whitespace character is expected after the key-value separator within a block mapping\");\n                    }\n                    if (atExplicitKey) {\n                        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n                        keyTag = keyNode = valueNode = null;\n                    }\n                    detected = true;\n                    atExplicitKey = false;\n                    allowCompact = false;\n                    keyTag = state.tag;\n                    keyNode = state.result;\n                } else if (detected) {\n                    throwError(state, \"can not read an implicit mapping pair; a colon is missed\");\n                } else {\n                    state.tag = _tag;\n                    state.anchor = _anchor;\n                    return true; // Keep the result of `composeNode`.\n                }\n            } else if (detected) {\n                throwError(state, \"can not read a block mapping entry; a multiline key may not be an implicit key\");\n            } else {\n                state.tag = _tag;\n                state.anchor = _anchor;\n                return true; // Keep the result of `composeNode`.\n            }\n        } else {\n            break; // Reading is done. Go to the epilogue.\n        }\n        //\n        // Common reading code for both explicit and implicit notations.\n        //\n        if (state.line === _line || state.lineIndent > nodeIndent) {\n            if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n                if (atExplicitKey) {\n                    keyNode = state.result;\n                } else {\n                    valueNode = state.result;\n                }\n            }\n            if (!atExplicitKey) {\n                storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n                keyTag = keyNode = valueNode = null;\n            }\n            skipSeparationSpace(state, true, -1);\n            ch = state.input.charCodeAt(state.position);\n        }\n        if (state.lineIndent > nodeIndent && ch !== 0) {\n            throwError(state, \"bad indentation of a mapping entry\");\n        } else if (state.lineIndent < nodeIndent) {\n            break;\n        }\n    }\n    //\n    // Epilogue.\n    //\n    // Special case: last mapping's node contains only the key in explicit notation.\n    if (atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n    }\n    // Expose the resulting mapping.\n    if (detected) {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        state.kind = \"mapping\";\n        state.result = _result;\n    }\n    return detected;\n}\nfunction readTagProperty(state) {\n    var _position, isVerbatim = false, isNamed = false, tagHandle, tagName, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x21 /* ! */ ) return false;\n    if (state.tag !== null) {\n        throwError(state, \"duplication of a tag property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    if (ch === 0x3C /* < */ ) {\n        isVerbatim = true;\n        ch = state.input.charCodeAt(++state.position);\n    } else if (ch === 0x21 /* ! */ ) {\n        isNamed = true;\n        tagHandle = \"!!\";\n        ch = state.input.charCodeAt(++state.position);\n    } else {\n        tagHandle = \"!\";\n    }\n    _position = state.position;\n    if (isVerbatim) {\n        do {\n            ch = state.input.charCodeAt(++state.position);\n        }while (ch !== 0 && ch !== 0x3E /* > */ );\n        if (state.position < state.length) {\n            tagName = state.input.slice(_position, state.position);\n            ch = state.input.charCodeAt(++state.position);\n        } else {\n            throwError(state, \"unexpected end of the stream within a verbatim tag\");\n        }\n    } else {\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            if (ch === 0x21 /* ! */ ) {\n                if (!isNamed) {\n                    tagHandle = state.input.slice(_position - 1, state.position + 1);\n                    if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n                        throwError(state, \"named tag handle cannot contain such characters\");\n                    }\n                    isNamed = true;\n                    _position = state.position + 1;\n                } else {\n                    throwError(state, \"tag suffix cannot contain exclamation marks\");\n                }\n            }\n            ch = state.input.charCodeAt(++state.position);\n        }\n        tagName = state.input.slice(_position, state.position);\n        if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n            throwError(state, \"tag suffix cannot contain flow indicator characters\");\n        }\n    }\n    if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n        throwError(state, \"tag name cannot contain such characters: \" + tagName);\n    }\n    if (isVerbatim) {\n        state.tag = tagName;\n    } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n        state.tag = state.tagMap[tagHandle] + tagName;\n    } else if (tagHandle === \"!\") {\n        state.tag = \"!\" + tagName;\n    } else if (tagHandle === \"!!\") {\n        state.tag = \"tag:yaml.org,2002:\" + tagName;\n    } else {\n        throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n    }\n    return true;\n}\nfunction readAnchorProperty(state) {\n    var _position, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x26 /* & */ ) return false;\n    if (state.anchor !== null) {\n        throwError(state, \"duplication of an anchor property\");\n    }\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an anchor node must contain at least one character\");\n    }\n    state.anchor = state.input.slice(_position, state.position);\n    return true;\n}\nfunction readAlias(state) {\n    var _position, alias, ch;\n    ch = state.input.charCodeAt(state.position);\n    if (ch !== 0x2A /* * */ ) return false;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while(ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)){\n        ch = state.input.charCodeAt(++state.position);\n    }\n    if (state.position === _position) {\n        throwError(state, \"name of an alias node must contain at least one character\");\n    }\n    alias = state.input.slice(_position, state.position);\n    if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n        throwError(state, 'unidentified alias \"' + alias + '\"');\n    }\n    state.result = state.anchorMap[alias];\n    skipSeparationSpace(state, true, -1);\n    return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n    var allowBlockStyles, allowBlockScalars, allowBlockCollections, indentStatus = 1, atNewLine = false, hasContent = false, typeIndex, typeQuantity, type, flowIndent, blockIndent;\n    if (state.listener !== null) {\n        state.listener(\"open\", state);\n    }\n    state.tag = null;\n    state.anchor = null;\n    state.kind = null;\n    state.result = null;\n    allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n    if (allowToSeek) {\n        if (skipSeparationSpace(state, true, -1)) {\n            atNewLine = true;\n            if (state.lineIndent > parentIndent) {\n                indentStatus = 1;\n            } else if (state.lineIndent === parentIndent) {\n                indentStatus = 0;\n            } else if (state.lineIndent < parentIndent) {\n                indentStatus = -1;\n            }\n        }\n    }\n    if (indentStatus === 1) {\n        while(readTagProperty(state) || readAnchorProperty(state)){\n            if (skipSeparationSpace(state, true, -1)) {\n                atNewLine = true;\n                allowBlockCollections = allowBlockStyles;\n                if (state.lineIndent > parentIndent) {\n                    indentStatus = 1;\n                } else if (state.lineIndent === parentIndent) {\n                    indentStatus = 0;\n                } else if (state.lineIndent < parentIndent) {\n                    indentStatus = -1;\n                }\n            } else {\n                allowBlockCollections = false;\n            }\n        }\n    }\n    if (allowBlockCollections) {\n        allowBlockCollections = atNewLine || allowCompact;\n    }\n    if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n        if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n            flowIndent = parentIndent;\n        } else {\n            flowIndent = parentIndent + 1;\n        }\n        blockIndent = state.position - state.lineStart;\n        if (indentStatus === 1) {\n            if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n                hasContent = true;\n            } else {\n                if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n                    hasContent = true;\n                } else if (readAlias(state)) {\n                    hasContent = true;\n                    if (state.tag !== null || state.anchor !== null) {\n                        throwError(state, \"alias node should not have any properties\");\n                    }\n                } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n                    hasContent = true;\n                    if (state.tag === null) {\n                        state.tag = \"?\";\n                    }\n                }\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n            }\n        } else if (indentStatus === 0) {\n            // Special case: block sequences are allowed to have same indentation level as the parent.\n            // http://www.yaml.org/spec/1.2/spec.html#id2799784\n            hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n        }\n    }\n    if (state.tag !== null && state.tag !== \"!\") {\n        if (state.tag === \"?\") {\n            // Implicit resolving is not allowed for non-scalar types, and '?'\n            // non-specific tag is only automatically assigned to plain scalars.\n            //\n            // We only need to check kind conformity in case user explicitly assigns '?'\n            // tag, for example like this: \"!<?> [0]\"\n            //\n            if (state.result !== null && state.kind !== \"scalar\") {\n                throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n            }\n            for(typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1){\n                type = state.implicitTypes[typeIndex];\n                if (type.resolve(state.result)) {\n                    state.result = type.construct(state.result);\n                    state.tag = type.tag;\n                    if (state.anchor !== null) {\n                        state.anchorMap[state.anchor] = state.result;\n                    }\n                    break;\n                }\n            }\n        } else if (_hasOwnProperty.call(state.typeMap[state.kind || \"fallback\"], state.tag)) {\n            type = state.typeMap[state.kind || \"fallback\"][state.tag];\n            if (state.result !== null && type.kind !== state.kind) {\n                throwError(state, \"unacceptable node kind for !<\" + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n            }\n            if (!type.resolve(state.result)) {\n                throwError(state, \"cannot resolve a node with !<\" + state.tag + \"> explicit tag\");\n            } else {\n                state.result = type.construct(state.result);\n                if (state.anchor !== null) {\n                    state.anchorMap[state.anchor] = state.result;\n                }\n            }\n        } else {\n            throwError(state, \"unknown tag !<\" + state.tag + \">\");\n        }\n    }\n    if (state.listener !== null) {\n        state.listener(\"close\", state);\n    }\n    return state.tag !== null || state.anchor !== null || hasContent;\n}\nfunction readDocument(state) {\n    var documentStart = state.position, _position, directiveName, directiveArgs, hasDirectives = false, ch;\n    state.version = null;\n    state.checkLineBreaks = state.legacy;\n    state.tagMap = {};\n    state.anchorMap = {};\n    while((ch = state.input.charCodeAt(state.position)) !== 0){\n        skipSeparationSpace(state, true, -1);\n        ch = state.input.charCodeAt(state.position);\n        if (state.lineIndent > 0 || ch !== 0x25 /* % */ ) {\n            break;\n        }\n        hasDirectives = true;\n        ch = state.input.charCodeAt(++state.position);\n        _position = state.position;\n        while(ch !== 0 && !is_WS_OR_EOL(ch)){\n            ch = state.input.charCodeAt(++state.position);\n        }\n        directiveName = state.input.slice(_position, state.position);\n        directiveArgs = [];\n        if (directiveName.length < 1) {\n            throwError(state, \"directive name must not be less than one character in length\");\n        }\n        while(ch !== 0){\n            while(is_WHITE_SPACE(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            if (ch === 0x23 /* # */ ) {\n                do {\n                    ch = state.input.charCodeAt(++state.position);\n                }while (ch !== 0 && !is_EOL(ch));\n                break;\n            }\n            if (is_EOL(ch)) break;\n            _position = state.position;\n            while(ch !== 0 && !is_WS_OR_EOL(ch)){\n                ch = state.input.charCodeAt(++state.position);\n            }\n            directiveArgs.push(state.input.slice(_position, state.position));\n        }\n        if (ch !== 0) readLineBreak(state);\n        if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n            directiveHandlers[directiveName](state, directiveName, directiveArgs);\n        } else {\n            throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n        }\n    }\n    skipSeparationSpace(state, true, -1);\n    if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D /* - */  && state.input.charCodeAt(state.position + 1) === 0x2D /* - */  && state.input.charCodeAt(state.position + 2) === 0x2D /* - */ ) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n    } else if (hasDirectives) {\n        throwError(state, \"directives end mark is expected\");\n    }\n    composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n    skipSeparationSpace(state, true, -1);\n    if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n        throwWarning(state, \"non-ASCII line breaks are interpreted as content\");\n    }\n    state.documents.push(state.result);\n    if (state.position === state.lineStart && testDocumentSeparator(state)) {\n        if (state.input.charCodeAt(state.position) === 0x2E /* . */ ) {\n            state.position += 3;\n            skipSeparationSpace(state, true, -1);\n        }\n        return;\n    }\n    if (state.position < state.length - 1) {\n        throwError(state, \"end of the stream or a document separator is expected\");\n    } else {\n        return;\n    }\n}\nfunction loadDocuments(input, options) {\n    input = String(input);\n    options = options || {};\n    if (input.length !== 0) {\n        // Add tailing `\\n` if not exists\n        if (input.charCodeAt(input.length - 1) !== 0x0A /* LF */  && input.charCodeAt(input.length - 1) !== 0x0D /* CR */ ) {\n            input += \"\\n\";\n        }\n        // Strip BOM\n        if (input.charCodeAt(0) === 0xFEFF) {\n            input = input.slice(1);\n        }\n    }\n    var state = new State(input, options);\n    var nullpos = input.indexOf(\"\\x00\");\n    if (nullpos !== -1) {\n        state.position = nullpos;\n        throwError(state, \"null byte is not allowed in input\");\n    }\n    // Use 0 as string terminator. That significantly simplifies bounds check.\n    state.input += \"\\x00\";\n    while(state.input.charCodeAt(state.position) === 0x20 /* Space */ ){\n        state.lineIndent += 1;\n        state.position += 1;\n    }\n    while(state.position < state.length - 1){\n        readDocument(state);\n    }\n    return state.documents;\n}\nfunction loadAll(input, iterator, options) {\n    if (iterator !== null && typeof iterator === \"object\" && typeof options === \"undefined\") {\n        options = iterator;\n        iterator = null;\n    }\n    var documents = loadDocuments(input, options);\n    if (typeof iterator !== \"function\") {\n        return documents;\n    }\n    for(var index = 0, length = documents.length; index < length; index += 1){\n        iterator(documents[index]);\n    }\n}\nfunction load(input, options) {\n    var documents = loadDocuments(input, options);\n    if (documents.length === 0) {\n        /*eslint-disable no-undefined*/ return undefined;\n    } else if (documents.length === 1) {\n        return documents[0];\n    }\n    throw new YAMLException(\"expected a single document in the stream, but found more\");\n}\nfunction safeLoadAll(input, iterator, options) {\n    if (typeof iterator === \"object\" && iterator !== null && typeof options === \"undefined\") {\n        options = iterator;\n        iterator = null;\n    }\n    return loadAll(input, iterator, common.extend({\n        schema: DEFAULT_SAFE_SCHEMA\n    }, options));\n}\nfunction safeLoad(input, options) {\n    return load(input, common.extend({\n        schema: DEFAULT_SAFE_SCHEMA\n    }, options));\n}\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js":
/*!****************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar common = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nfunction Mark(name, buffer, position, line, column) {\n    this.name = name;\n    this.buffer = buffer;\n    this.position = position;\n    this.line = line;\n    this.column = column;\n}\nMark.prototype.getSnippet = function getSnippet(indent, maxLength) {\n    var head, start, tail, end, snippet;\n    if (!this.buffer) return null;\n    indent = indent || 4;\n    maxLength = maxLength || 75;\n    head = \"\";\n    start = this.position;\n    while(start > 0 && \"\\x00\\r\\n\\x85\\u2028\\u2029\".indexOf(this.buffer.charAt(start - 1)) === -1){\n        start -= 1;\n        if (this.position - start > maxLength / 2 - 1) {\n            head = \" ... \";\n            start += 5;\n            break;\n        }\n    }\n    tail = \"\";\n    end = this.position;\n    while(end < this.buffer.length && \"\\x00\\r\\n\\x85\\u2028\\u2029\".indexOf(this.buffer.charAt(end)) === -1){\n        end += 1;\n        if (end - this.position > maxLength / 2 - 1) {\n            tail = \" ... \";\n            end -= 5;\n            break;\n        }\n    }\n    snippet = this.buffer.slice(start, end);\n    return common.repeat(\" \", indent) + head + snippet + tail + \"\\n\" + common.repeat(\" \", indent + this.position - start + head.length) + \"^\";\n};\nMark.prototype.toString = function toString(compact) {\n    var snippet, where = \"\";\n    if (this.name) {\n        where += 'in \"' + this.name + '\" ';\n    }\n    where += \"at line \" + (this.line + 1) + \", column \" + (this.column + 1);\n    if (!compact) {\n        snippet = this.getSnippet();\n        if (snippet) {\n            where += \":\\n\" + snippet;\n        }\n    }\n    return where;\n};\nmodule.exports = Mark;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL21hcmsuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFHQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUdyQixTQUFTQyxLQUFLQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDaEQsSUFBSSxDQUFDSixJQUFJLEdBQU9BO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFLQTtJQUNoQixJQUFJLENBQUNDLFFBQVEsR0FBR0E7SUFDaEIsSUFBSSxDQUFDQyxJQUFJLEdBQU9BO0lBQ2hCLElBQUksQ0FBQ0MsTUFBTSxHQUFLQTtBQUNsQjtBQUdBTCxLQUFLTSxTQUFTLENBQUNDLFVBQVUsR0FBRyxTQUFTQSxXQUFXQyxNQUFNLEVBQUVDLFNBQVM7SUFDL0QsSUFBSUMsTUFBTUMsT0FBT0MsTUFBTUMsS0FBS0M7SUFFNUIsSUFBSSxDQUFDLElBQUksQ0FBQ1osTUFBTSxFQUFFLE9BQU87SUFFekJNLFNBQVNBLFVBQVU7SUFDbkJDLFlBQVlBLGFBQWE7SUFFekJDLE9BQU87SUFDUEMsUUFBUSxJQUFJLENBQUNSLFFBQVE7SUFFckIsTUFBT1EsUUFBUSxLQUFLLDJCQUEyQkksT0FBTyxDQUFDLElBQUksQ0FBQ2IsTUFBTSxDQUFDYyxNQUFNLENBQUNMLFFBQVEsUUFBUSxDQUFDLEVBQUc7UUFDNUZBLFNBQVM7UUFDVCxJQUFJLElBQUksQ0FBQ1IsUUFBUSxHQUFHUSxRQUFTRixZQUFZLElBQUksR0FBSTtZQUMvQ0MsT0FBTztZQUNQQyxTQUFTO1lBQ1Q7UUFDRjtJQUNGO0lBRUFDLE9BQU87SUFDUEMsTUFBTSxJQUFJLENBQUNWLFFBQVE7SUFFbkIsTUFBT1UsTUFBTSxJQUFJLENBQUNYLE1BQU0sQ0FBQ2UsTUFBTSxJQUFJLDJCQUEyQkYsT0FBTyxDQUFDLElBQUksQ0FBQ2IsTUFBTSxDQUFDYyxNQUFNLENBQUNILFVBQVUsQ0FBQyxFQUFHO1FBQ3JHQSxPQUFPO1FBQ1AsSUFBSUEsTUFBTSxJQUFJLENBQUNWLFFBQVEsR0FBSU0sWUFBWSxJQUFJLEdBQUk7WUFDN0NHLE9BQU87WUFDUEMsT0FBTztZQUNQO1FBQ0Y7SUFDRjtJQUVBQyxVQUFVLElBQUksQ0FBQ1osTUFBTSxDQUFDZ0IsS0FBSyxDQUFDUCxPQUFPRTtJQUVuQyxPQUFPZixPQUFPcUIsTUFBTSxDQUFDLEtBQUtYLFVBQVVFLE9BQU9JLFVBQVVGLE9BQU8sT0FDckRkLE9BQU9xQixNQUFNLENBQUMsS0FBS1gsU0FBUyxJQUFJLENBQUNMLFFBQVEsR0FBR1EsUUFBUUQsS0FBS08sTUFBTSxJQUFJO0FBQzVFO0FBR0FqQixLQUFLTSxTQUFTLENBQUNjLFFBQVEsR0FBRyxTQUFTQSxTQUFTQyxPQUFPO0lBQ2pELElBQUlQLFNBQVNRLFFBQVE7SUFFckIsSUFBSSxJQUFJLENBQUNyQixJQUFJLEVBQUU7UUFDYnFCLFNBQVMsU0FBUyxJQUFJLENBQUNyQixJQUFJLEdBQUc7SUFDaEM7SUFFQXFCLFNBQVMsYUFBYyxLQUFJLENBQUNsQixJQUFJLEdBQUcsS0FBSyxjQUFlLEtBQUksQ0FBQ0MsTUFBTSxHQUFHO0lBRXJFLElBQUksQ0FBQ2dCLFNBQVM7UUFDWlAsVUFBVSxJQUFJLENBQUNQLFVBQVU7UUFFekIsSUFBSU8sU0FBUztZQUNYUSxTQUFTLFFBQVFSO1FBQ25CO0lBQ0Y7SUFFQSxPQUFPUTtBQUNUO0FBR0FDLE9BQU9DLE9BQU8sR0FBR3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL21hcmsuanM/OTExYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuZnVuY3Rpb24gTWFyayhuYW1lLCBidWZmZXIsIHBvc2l0aW9uLCBsaW5lLCBjb2x1bW4pIHtcbiAgdGhpcy5uYW1lICAgICA9IG5hbWU7XG4gIHRoaXMuYnVmZmVyICAgPSBidWZmZXI7XG4gIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgdGhpcy5saW5lICAgICA9IGxpbmU7XG4gIHRoaXMuY29sdW1uICAgPSBjb2x1bW47XG59XG5cblxuTWFyay5wcm90b3R5cGUuZ2V0U25pcHBldCA9IGZ1bmN0aW9uIGdldFNuaXBwZXQoaW5kZW50LCBtYXhMZW5ndGgpIHtcbiAgdmFyIGhlYWQsIHN0YXJ0LCB0YWlsLCBlbmQsIHNuaXBwZXQ7XG5cbiAgaWYgKCF0aGlzLmJ1ZmZlcikgcmV0dXJuIG51bGw7XG5cbiAgaW5kZW50ID0gaW5kZW50IHx8IDQ7XG4gIG1heExlbmd0aCA9IG1heExlbmd0aCB8fCA3NTtcblxuICBoZWFkID0gJyc7XG4gIHN0YXJ0ID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoc3RhcnQgPiAwICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KHN0YXJ0IC0gMSkpID09PSAtMSkge1xuICAgIHN0YXJ0IC09IDE7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gLSBzdGFydCA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIGhlYWQgPSAnIC4uLiAnO1xuICAgICAgc3RhcnQgKz0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRhaWwgPSAnJztcbiAgZW5kID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoZW5kIDwgdGhpcy5idWZmZXIubGVuZ3RoICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KGVuZCkpID09PSAtMSkge1xuICAgIGVuZCArPSAxO1xuICAgIGlmIChlbmQgLSB0aGlzLnBvc2l0aW9uID4gKG1heExlbmd0aCAvIDIgLSAxKSkge1xuICAgICAgdGFpbCA9ICcgLi4uICc7XG4gICAgICBlbmQgLT0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHNuaXBwZXQgPSB0aGlzLmJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTtcblxuICByZXR1cm4gY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCkgKyBoZWFkICsgc25pcHBldCArIHRhaWwgKyAnXFxuJyArXG4gICAgICAgICBjb21tb24ucmVwZWF0KCcgJywgaW5kZW50ICsgdGhpcy5wb3NpdGlvbiAtIHN0YXJ0ICsgaGVhZC5sZW5ndGgpICsgJ14nO1xufTtcblxuXG5NYXJrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHNuaXBwZXQsIHdoZXJlID0gJyc7XG5cbiAgaWYgKHRoaXMubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyB0aGlzLm5hbWUgKyAnXCIgJztcbiAgfVxuXG4gIHdoZXJlICs9ICdhdCBsaW5lICcgKyAodGhpcy5saW5lICsgMSkgKyAnLCBjb2x1bW4gJyArICh0aGlzLmNvbHVtbiArIDEpO1xuXG4gIGlmICghY29tcGFjdCkge1xuICAgIHNuaXBwZXQgPSB0aGlzLmdldFNuaXBwZXQoKTtcblxuICAgIGlmIChzbmlwcGV0KSB7XG4gICAgICB3aGVyZSArPSAnOlxcbicgKyBzbmlwcGV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3aGVyZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrO1xuIl0sIm5hbWVzIjpbImNvbW1vbiIsInJlcXVpcmUiLCJNYXJrIiwibmFtZSIsImJ1ZmZlciIsInBvc2l0aW9uIiwibGluZSIsImNvbHVtbiIsInByb3RvdHlwZSIsImdldFNuaXBwZXQiLCJpbmRlbnQiLCJtYXhMZW5ndGgiLCJoZWFkIiwic3RhcnQiLCJ0YWlsIiwiZW5kIiwic25pcHBldCIsImluZGV4T2YiLCJjaGFyQXQiLCJsZW5ndGgiLCJzbGljZSIsInJlcGVhdCIsInRvU3RyaW5nIiwiY29tcGFjdCIsIndoZXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js":
/*!******************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*eslint-disable max-len*/ var common = __webpack_require__(/*! ./common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar Type = __webpack_require__(/*! ./type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction compileList(schema, name, result) {\n    var exclude = [];\n    schema.include.forEach(function(includedSchema) {\n        result = compileList(includedSchema, name, result);\n    });\n    schema[name].forEach(function(currentType) {\n        result.forEach(function(previousType, previousIndex) {\n            if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n                exclude.push(previousIndex);\n            }\n        });\n        result.push(currentType);\n    });\n    return result.filter(function(type, index) {\n        return exclude.indexOf(index) === -1;\n    });\n}\nfunction compileMap() {\n    var result = {\n        scalar: {},\n        sequence: {},\n        mapping: {},\n        fallback: {}\n    }, index, length;\n    function collectType(type) {\n        result[type.kind][type.tag] = result[\"fallback\"][type.tag] = type;\n    }\n    for(index = 0, length = arguments.length; index < length; index += 1){\n        arguments[index].forEach(collectType);\n    }\n    return result;\n}\nfunction Schema(definition) {\n    this.include = definition.include || [];\n    this.implicit = definition.implicit || [];\n    this.explicit = definition.explicit || [];\n    this.implicit.forEach(function(type) {\n        if (type.loadKind && type.loadKind !== \"scalar\") {\n            throw new YAMLException(\"There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.\");\n        }\n    });\n    this.compiledImplicit = compileList(this, \"implicit\", []);\n    this.compiledExplicit = compileList(this, \"explicit\", []);\n    this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\nSchema.DEFAULT = null;\nSchema.create = function createSchema() {\n    var schemas, types;\n    switch(arguments.length){\n        case 1:\n            schemas = Schema.DEFAULT;\n            types = arguments[0];\n            break;\n        case 2:\n            schemas = arguments[0];\n            types = arguments[1];\n            break;\n        default:\n            throw new YAMLException(\"Wrong number of arguments for Schema.create function\");\n    }\n    schemas = common.toArray(schemas);\n    types = common.toArray(types);\n    if (!schemas.every(function(schema) {\n        return schema instanceof Schema;\n    })) {\n        throw new YAMLException(\"Specified list of super schemas (or a single Schema object) contains a non-Schema object.\");\n    }\n    if (!types.every(function(type) {\n        return type instanceof Type;\n    })) {\n        throw new YAMLException(\"Specified list of YAML types (or a single Type object) contains a non-Type object.\");\n    }\n    return new Schema({\n        include: schemas,\n        explicit: types\n    });\n};\nmodule.exports = Schema;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLHdCQUF3QixHQUV4QixJQUFJQSxTQUFnQkMsbUJBQU9BLENBQUM7QUFDNUIsSUFBSUMsZ0JBQWdCRCxtQkFBT0EsQ0FBQztBQUM1QixJQUFJRSxPQUFnQkYsbUJBQU9BLENBQUM7QUFHNUIsU0FBU0csWUFBWUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLE1BQU07SUFDdkMsSUFBSUMsVUFBVSxFQUFFO0lBRWhCSCxPQUFPSSxPQUFPLENBQUNDLE9BQU8sQ0FBQyxTQUFVQyxjQUFjO1FBQzdDSixTQUFTSCxZQUFZTyxnQkFBZ0JMLE1BQU1DO0lBQzdDO0lBRUFGLE1BQU0sQ0FBQ0MsS0FBSyxDQUFDSSxPQUFPLENBQUMsU0FBVUUsV0FBVztRQUN4Q0wsT0FBT0csT0FBTyxDQUFDLFNBQVVHLFlBQVksRUFBRUMsYUFBYTtZQUNsRCxJQUFJRCxhQUFhRSxHQUFHLEtBQUtILFlBQVlHLEdBQUcsSUFBSUYsYUFBYUcsSUFBSSxLQUFLSixZQUFZSSxJQUFJLEVBQUU7Z0JBQ2xGUixRQUFRUyxJQUFJLENBQUNIO1lBQ2Y7UUFDRjtRQUVBUCxPQUFPVSxJQUFJLENBQUNMO0lBQ2Q7SUFFQSxPQUFPTCxPQUFPVyxNQUFNLENBQUMsU0FBVUMsSUFBSSxFQUFFQyxLQUFLO1FBQ3hDLE9BQU9aLFFBQVFhLE9BQU8sQ0FBQ0QsV0FBVyxDQUFDO0lBQ3JDO0FBQ0Y7QUFHQSxTQUFTRTtJQUNQLElBQUlmLFNBQVM7UUFDUGdCLFFBQVEsQ0FBQztRQUNUQyxVQUFVLENBQUM7UUFDWEMsU0FBUyxDQUFDO1FBQ1ZDLFVBQVUsQ0FBQztJQUNiLEdBQUdOLE9BQU9PO0lBRWQsU0FBU0MsWUFBWVQsSUFBSTtRQUN2QlosTUFBTSxDQUFDWSxLQUFLSCxJQUFJLENBQUMsQ0FBQ0csS0FBS0osR0FBRyxDQUFDLEdBQUdSLE1BQU0sQ0FBQyxXQUFXLENBQUNZLEtBQUtKLEdBQUcsQ0FBQyxHQUFHSTtJQUMvRDtJQUVBLElBQUtDLFFBQVEsR0FBR08sU0FBU0UsVUFBVUYsTUFBTSxFQUFFUCxRQUFRTyxRQUFRUCxTQUFTLEVBQUc7UUFDckVTLFNBQVMsQ0FBQ1QsTUFBTSxDQUFDVixPQUFPLENBQUNrQjtJQUMzQjtJQUNBLE9BQU9yQjtBQUNUO0FBR0EsU0FBU3VCLE9BQU9DLFVBQVU7SUFDeEIsSUFBSSxDQUFDdEIsT0FBTyxHQUFJc0IsV0FBV3RCLE9BQU8sSUFBSyxFQUFFO0lBQ3pDLElBQUksQ0FBQ3VCLFFBQVEsR0FBR0QsV0FBV0MsUUFBUSxJQUFJLEVBQUU7SUFDekMsSUFBSSxDQUFDQyxRQUFRLEdBQUdGLFdBQVdFLFFBQVEsSUFBSSxFQUFFO0lBRXpDLElBQUksQ0FBQ0QsUUFBUSxDQUFDdEIsT0FBTyxDQUFDLFNBQVVTLElBQUk7UUFDbEMsSUFBSUEsS0FBS2UsUUFBUSxJQUFJZixLQUFLZSxRQUFRLEtBQUssVUFBVTtZQUMvQyxNQUFNLElBQUloQyxjQUFjO1FBQzFCO0lBQ0Y7SUFFQSxJQUFJLENBQUNpQyxnQkFBZ0IsR0FBRy9CLFlBQVksSUFBSSxFQUFFLFlBQVksRUFBRTtJQUN4RCxJQUFJLENBQUNnQyxnQkFBZ0IsR0FBR2hDLFlBQVksSUFBSSxFQUFFLFlBQVksRUFBRTtJQUN4RCxJQUFJLENBQUNpQyxlQUFlLEdBQUlmLFdBQVcsSUFBSSxDQUFDYSxnQkFBZ0IsRUFBRSxJQUFJLENBQUNDLGdCQUFnQjtBQUNqRjtBQUdBTixPQUFPUSxPQUFPLEdBQUc7QUFHakJSLE9BQU9TLE1BQU0sR0FBRyxTQUFTQztJQUN2QixJQUFJQyxTQUFTQztJQUViLE9BQVFiLFVBQVVGLE1BQU07UUFDdEIsS0FBSztZQUNIYyxVQUFVWCxPQUFPUSxPQUFPO1lBQ3hCSSxRQUFRYixTQUFTLENBQUMsRUFBRTtZQUNwQjtRQUVGLEtBQUs7WUFDSFksVUFBVVosU0FBUyxDQUFDLEVBQUU7WUFDdEJhLFFBQVFiLFNBQVMsQ0FBQyxFQUFFO1lBQ3BCO1FBRUY7WUFDRSxNQUFNLElBQUkzQixjQUFjO0lBQzVCO0lBRUF1QyxVQUFVekMsT0FBTzJDLE9BQU8sQ0FBQ0Y7SUFDekJDLFFBQVExQyxPQUFPMkMsT0FBTyxDQUFDRDtJQUV2QixJQUFJLENBQUNELFFBQVFHLEtBQUssQ0FBQyxTQUFVdkMsTUFBTTtRQUFJLE9BQU9BLGtCQUFrQnlCO0lBQVEsSUFBSTtRQUMxRSxNQUFNLElBQUk1QixjQUFjO0lBQzFCO0lBRUEsSUFBSSxDQUFDd0MsTUFBTUUsS0FBSyxDQUFDLFNBQVV6QixJQUFJO1FBQUksT0FBT0EsZ0JBQWdCaEI7SUFBTSxJQUFJO1FBQ2xFLE1BQU0sSUFBSUQsY0FBYztJQUMxQjtJQUVBLE9BQU8sSUFBSTRCLE9BQU87UUFDaEJyQixTQUFTZ0M7UUFDVFIsVUFBVVM7SUFDWjtBQUNGO0FBR0FHLE9BQU9DLE9BQU8sR0FBR2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS5qcz8yN2RiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyplc2xpbnQtZGlzYWJsZSBtYXgtbGVuKi9cblxudmFyIGNvbW1vbiAgICAgICAgPSByZXF1aXJlKCcuL2NvbW1vbicpO1xudmFyIFlBTUxFeGNlcHRpb24gPSByZXF1aXJlKCcuL2V4Y2VwdGlvbicpO1xudmFyIFR5cGUgICAgICAgICAgPSByZXF1aXJlKCcuL3R5cGUnKTtcblxuXG5mdW5jdGlvbiBjb21waWxlTGlzdChzY2hlbWEsIG5hbWUsIHJlc3VsdCkge1xuICB2YXIgZXhjbHVkZSA9IFtdO1xuXG4gIHNjaGVtYS5pbmNsdWRlLmZvckVhY2goZnVuY3Rpb24gKGluY2x1ZGVkU2NoZW1hKSB7XG4gICAgcmVzdWx0ID0gY29tcGlsZUxpc3QoaW5jbHVkZWRTY2hlbWEsIG5hbWUsIHJlc3VsdCk7XG4gIH0pO1xuXG4gIHNjaGVtYVtuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50VHlwZSkge1xuICAgIHJlc3VsdC5mb3JFYWNoKGZ1bmN0aW9uIChwcmV2aW91c1R5cGUsIHByZXZpb3VzSW5kZXgpIHtcbiAgICAgIGlmIChwcmV2aW91c1R5cGUudGFnID09PSBjdXJyZW50VHlwZS50YWcgJiYgcHJldmlvdXNUeXBlLmtpbmQgPT09IGN1cnJlbnRUeXBlLmtpbmQpIHtcbiAgICAgICAgZXhjbHVkZS5wdXNoKHByZXZpb3VzSW5kZXgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVzdWx0LnB1c2goY3VycmVudFR5cGUpO1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0LmZpbHRlcihmdW5jdGlvbiAodHlwZSwgaW5kZXgpIHtcbiAgICByZXR1cm4gZXhjbHVkZS5pbmRleE9mKGluZGV4KSA9PT0gLTE7XG4gIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGNvbXBpbGVNYXAoLyogbGlzdHMuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICAgICAgc2NhbGFyOiB7fSxcbiAgICAgICAgc2VxdWVuY2U6IHt9LFxuICAgICAgICBtYXBwaW5nOiB7fSxcbiAgICAgICAgZmFsbGJhY2s6IHt9XG4gICAgICB9LCBpbmRleCwgbGVuZ3RoO1xuXG4gIGZ1bmN0aW9uIGNvbGxlY3RUeXBlKHR5cGUpIHtcbiAgICByZXN1bHRbdHlwZS5raW5kXVt0eXBlLnRhZ10gPSByZXN1bHRbJ2ZhbGxiYWNrJ11bdHlwZS50YWddID0gdHlwZTtcbiAgfVxuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIGFyZ3VtZW50c1tpbmRleF0uZm9yRWFjaChjb2xsZWN0VHlwZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuXG5mdW5jdGlvbiBTY2hlbWEoZGVmaW5pdGlvbikge1xuICB0aGlzLmluY2x1ZGUgID0gZGVmaW5pdGlvbi5pbmNsdWRlICB8fCBbXTtcbiAgdGhpcy5pbXBsaWNpdCA9IGRlZmluaXRpb24uaW1wbGljaXQgfHwgW107XG4gIHRoaXMuZXhwbGljaXQgPSBkZWZpbml0aW9uLmV4cGxpY2l0IHx8IFtdO1xuXG4gIHRoaXMuaW1wbGljaXQuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIGlmICh0eXBlLmxvYWRLaW5kICYmIHR5cGUubG9hZEtpbmQgIT09ICdzY2FsYXInKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVGhlcmUgaXMgYSBub24tc2NhbGFyIHR5cGUgaW4gdGhlIGltcGxpY2l0IGxpc3Qgb2YgYSBzY2hlbWEuIEltcGxpY2l0IHJlc29sdmluZyBvZiBzdWNoIHR5cGVzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgfVxuICB9KTtcblxuICB0aGlzLmNvbXBpbGVkSW1wbGljaXQgPSBjb21waWxlTGlzdCh0aGlzLCAnaW1wbGljaXQnLCBbXSk7XG4gIHRoaXMuY29tcGlsZWRFeHBsaWNpdCA9IGNvbXBpbGVMaXN0KHRoaXMsICdleHBsaWNpdCcsIFtdKTtcbiAgdGhpcy5jb21waWxlZFR5cGVNYXAgID0gY29tcGlsZU1hcCh0aGlzLmNvbXBpbGVkSW1wbGljaXQsIHRoaXMuY29tcGlsZWRFeHBsaWNpdCk7XG59XG5cblxuU2NoZW1hLkRFRkFVTFQgPSBudWxsO1xuXG5cblNjaGVtYS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGVTY2hlbWEoKSB7XG4gIHZhciBzY2hlbWFzLCB0eXBlcztcblxuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICBzY2hlbWFzID0gU2NoZW1hLkRFRkFVTFQ7XG4gICAgICB0eXBlcyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAyOlxuICAgICAgc2NoZW1hcyA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHR5cGVzID0gYXJndW1lbnRzWzFdO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1dyb25nIG51bWJlciBvZiBhcmd1bWVudHMgZm9yIFNjaGVtYS5jcmVhdGUgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIHNjaGVtYXMgPSBjb21tb24udG9BcnJheShzY2hlbWFzKTtcbiAgdHlwZXMgPSBjb21tb24udG9BcnJheSh0eXBlcyk7XG5cbiAgaWYgKCFzY2hlbWFzLmV2ZXJ5KGZ1bmN0aW9uIChzY2hlbWEpIHsgcmV0dXJuIHNjaGVtYSBpbnN0YW5jZW9mIFNjaGVtYTsgfSkpIHtcbiAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignU3BlY2lmaWVkIGxpc3Qgb2Ygc3VwZXIgc2NoZW1hcyAob3IgYSBzaW5nbGUgU2NoZW1hIG9iamVjdCkgY29udGFpbnMgYSBub24tU2NoZW1hIG9iamVjdC4nKTtcbiAgfVxuXG4gIGlmICghdHlwZXMuZXZlcnkoZnVuY3Rpb24gKHR5cGUpIHsgcmV0dXJuIHR5cGUgaW5zdGFuY2VvZiBUeXBlOyB9KSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdTcGVjaWZpZWQgbGlzdCBvZiBZQU1MIHR5cGVzIChvciBhIHNpbmdsZSBUeXBlIG9iamVjdCkgY29udGFpbnMgYSBub24tVHlwZSBvYmplY3QuJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNjaGVtYSh7XG4gICAgaW5jbHVkZTogc2NoZW1hcyxcbiAgICBleHBsaWNpdDogdHlwZXNcbiAgfSk7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hO1xuIl0sIm5hbWVzIjpbImNvbW1vbiIsInJlcXVpcmUiLCJZQU1MRXhjZXB0aW9uIiwiVHlwZSIsImNvbXBpbGVMaXN0Iiwic2NoZW1hIiwibmFtZSIsInJlc3VsdCIsImV4Y2x1ZGUiLCJpbmNsdWRlIiwiZm9yRWFjaCIsImluY2x1ZGVkU2NoZW1hIiwiY3VycmVudFR5cGUiLCJwcmV2aW91c1R5cGUiLCJwcmV2aW91c0luZGV4IiwidGFnIiwia2luZCIsInB1c2giLCJmaWx0ZXIiLCJ0eXBlIiwiaW5kZXgiLCJpbmRleE9mIiwiY29tcGlsZU1hcCIsInNjYWxhciIsInNlcXVlbmNlIiwibWFwcGluZyIsImZhbGxiYWNrIiwibGVuZ3RoIiwiY29sbGVjdFR5cGUiLCJhcmd1bWVudHMiLCJTY2hlbWEiLCJkZWZpbml0aW9uIiwiaW1wbGljaXQiLCJleHBsaWNpdCIsImxvYWRLaW5kIiwiY29tcGlsZWRJbXBsaWNpdCIsImNvbXBpbGVkRXhwbGljaXQiLCJjb21waWxlZFR5cGVNYXAiLCJERUZBVUxUIiwiY3JlYXRlIiwiY3JlYXRlU2NoZW1hIiwic2NoZW1hcyIsInR5cGVzIiwidG9BcnJheSIsImV2ZXJ5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n    include: [\n        __webpack_require__(/*! ./json */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\")\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9jb3JlLmpzIiwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjtBQUMvQixtREFBbUQ7QUFDbkQsRUFBRTtBQUNGLDhFQUE4RTtBQUM5RSxtRUFBbUU7QUFHbkU7QUFHQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUdyQkMsT0FBT0MsT0FBTyxHQUFHLElBQUlILE9BQU87SUFDMUJJLFNBQVM7UUFDUEgsbUJBQU9BLENBQUM7S0FDVDtBQUNIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9jb3JlLmpzP2RmOGYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9qc29uJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// JS-YAML's default schema for `load` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on JS-YAML's default safe schema and includes\n// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.\n//\n// Also this schema is used as default base schema at `Schema.create` function.\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = Schema.DEFAULT = new Schema({\n    include: [\n        __webpack_require__(/*! ./default_safe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\")\n    ],\n    explicit: [\n        __webpack_require__(/*! ../type/js/undefined */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\"),\n        __webpack_require__(/*! ../type/js/regexp */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\"),\n        __webpack_require__(/*! ../type/js/function */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\")\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwuanMiLCJtYXBwaW5ncyI6IkFBQUEsZ0RBQWdEO0FBQ2hELGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YscUVBQXFFO0FBQ3JFLDRFQUE0RTtBQUM1RSxFQUFFO0FBQ0YsK0VBQStFO0FBRy9FO0FBR0EsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFHckJDLE9BQU9DLE9BQU8sR0FBR0gsT0FBT0ksT0FBTyxHQUFHLElBQUlKLE9BQU87SUFDM0NLLFNBQVM7UUFDUEosbUJBQU9BLENBQUM7S0FDVDtJQUNESyxVQUFVO1FBQ1JMLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO0tBQ1Q7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsLmpzPzUzOTkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgbG9hZGAgZnVuY3Rpb24uXG4vLyBJdCBpcyBub3QgZGVzY3JpYmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vL1xuLy8gVGhpcyBzY2hlbWEgaXMgYmFzZWQgb24gSlMtWUFNTCdzIGRlZmF1bHQgc2FmZSBzY2hlbWEgYW5kIGluY2x1ZGVzXG4vLyBKYXZhU2NyaXB0LXNwZWNpZmljIHR5cGVzOiAhIWpzL3VuZGVmaW5lZCwgISFqcy9yZWdleHAgYW5kICEhanMvZnVuY3Rpb24uXG4vL1xuLy8gQWxzbyB0aGlzIHNjaGVtYSBpcyB1c2VkIGFzIGRlZmF1bHQgYmFzZSBzY2hlbWEgYXQgYFNjaGVtYS5jcmVhdGVgIGZ1bmN0aW9uLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBTY2hlbWEuREVGQVVMVCA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9kZWZhdWx0X3NhZmUnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvdW5kZWZpbmVkJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy9yZWdleHAnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL2Z1bmN0aW9uJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJERUZBVUxUIiwiaW5jbHVkZSIsImV4cGxpY2l0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n    include: [\n        __webpack_require__(/*! ./core */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\")\n    ],\n    implicit: [\n        __webpack_require__(/*! ../type/timestamp */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\"),\n        __webpack_require__(/*! ../type/merge */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\")\n    ],\n    explicit: [\n        __webpack_require__(/*! ../type/binary */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\"),\n        __webpack_require__(/*! ../type/omap */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\"),\n        __webpack_require__(/*! ../type/pairs */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\"),\n        __webpack_require__(/*! ../type/set */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\")\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X3NhZmUuanMiLCJtYXBwaW5ncyI6IkFBQUEsb0RBQW9EO0FBQ3BELGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsMkVBQTJFO0FBQzNFLHdFQUF3RTtBQUd4RTtBQUdBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBR3JCQyxPQUFPQyxPQUFPLEdBQUcsSUFBSUgsT0FBTztJQUMxQkksU0FBUztRQUNQSCxtQkFBT0EsQ0FBQztLQUNUO0lBQ0RJLFVBQVU7UUFDUkosbUJBQU9BLENBQUM7UUFDUkEsbUJBQU9BLENBQUM7S0FDVDtJQUNESyxVQUFVO1FBQ1JMLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO0tBQ1Q7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzP2U0NjgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgc2FmZUxvYWRgIGZ1bmN0aW9uLlxuLy8gSXQgaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy9cbi8vIFRoaXMgc2NoZW1hIGlzIGJhc2VkIG9uIHN0YW5kYXJkIFlBTUwncyBDb3JlIHNjaGVtYSBhbmQgaW5jbHVkZXMgbW9zdCBvZlxuLy8gZXh0cmEgdHlwZXMgZGVzY3JpYmVkIGF0IFlBTUwgdGFnIHJlcG9zaXRvcnkuIChodHRwOi8veWFtbC5vcmcvdHlwZS8pXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9jb3JlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3RpbWVzdGFtcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvbWVyZ2UnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvYmluYXJ5JyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9vbWFwJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9wYWlycycpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2V0JylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIiwiaW1wbGljaXQiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n    explicit: [\n        __webpack_require__(/*! ../type/str */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\"),\n        __webpack_require__(/*! ../type/seq */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\"),\n        __webpack_require__(/*! ../type/map */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\")\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZS5qcyIsIm1hcHBpbmdzIjoiQUFBQSxtQ0FBbUM7QUFDbkMsbURBQW1EO0FBR25EO0FBR0EsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFHckJDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCxPQUFPO0lBQzFCSSxVQUFVO1FBQ1JILG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO1FBQ1JBLG1CQUFPQSxDQUFDO0tBQ1Q7QUFDSCIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZmFpbHNhZmUuanM/ZjJhOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgRmFpbHNhZmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODAyMzQ2XG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvc3RyJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9zZXEnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL21hcCcpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhwbGljaXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n    include: [\n        __webpack_require__(/*! ./failsafe */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\")\n    ],\n    implicit: [\n        __webpack_require__(/*! ../type/null */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\"),\n        __webpack_require__(/*! ../type/bool */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\"),\n        __webpack_require__(/*! ../type/int */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\"),\n        __webpack_require__(/*! ../type/float */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\")\n    ]\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9qc29uLmpzIiwibWFwcGluZ3MiOiJBQUFBLCtCQUErQjtBQUMvQixtREFBbUQ7QUFDbkQsRUFBRTtBQUNGLDhFQUE4RTtBQUM5RSwyRUFBMkU7QUFDM0UsNkVBQTZFO0FBRzdFO0FBR0EsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFHckJDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCxPQUFPO0lBQzFCSSxTQUFTO1FBQ1BILG1CQUFPQSxDQUFDO0tBQ1Q7SUFDREksVUFBVTtRQUNSSixtQkFBT0EsQ0FBQztRQUNSQSxtQkFBT0EsQ0FBQztRQUNSQSxtQkFBT0EsQ0FBQztRQUNSQSxtQkFBT0EsQ0FBQztLQUNUO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2pzb24uanM/Nzg2ZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBTdGFuZGFyZCBZQU1MJ3MgSlNPTiBzY2hlbWEuXG4vLyBodHRwOi8vd3d3LnlhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNpZDI4MDMyMzFcbi8vXG4vLyBOT1RFOiBKUy1ZQU1MIGRvZXMgbm90IHN1cHBvcnQgc2NoZW1hLXNwZWNpZmljIHRhZyByZXNvbHV0aW9uIHJlc3RyaWN0aW9ucy5cbi8vIFNvLCB0aGlzIHNjaGVtYSBpcyBub3Qgc3VjaCBzdHJpY3QgYXMgZGVmaW5lZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy8gSXQgYWxsb3dzIG51bWJlcnMgaW4gYmluYXJ5IG5vdGFpb24sIHVzZSBgTnVsbGAgYW5kIGBOVUxMYCBhcyBgbnVsbGAsIGV0Yy5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFNjaGVtYSh7XG4gIGluY2x1ZGU6IFtcbiAgICByZXF1aXJlKCcuL2ZhaWxzYWZlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL251bGwnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2Jvb2wnKSxcbiAgICByZXF1aXJlKCcuLi90eXBlL2ludCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvZmxvYXQnKVxuICBdXG59KTtcbiJdLCJuYW1lcyI6WyJTY2hlbWEiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluY2x1ZGUiLCJpbXBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js":
/*!****************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar TYPE_CONSTRUCTOR_OPTIONS = [\n    \"kind\",\n    \"resolve\",\n    \"construct\",\n    \"instanceOf\",\n    \"predicate\",\n    \"represent\",\n    \"defaultStyle\",\n    \"styleAliases\"\n];\nvar YAML_NODE_KINDS = [\n    \"scalar\",\n    \"sequence\",\n    \"mapping\"\n];\nfunction compileStyleAliases(map) {\n    var result = {};\n    if (map !== null) {\n        Object.keys(map).forEach(function(style) {\n            map[style].forEach(function(alias) {\n                result[String(alias)] = style;\n            });\n        });\n    }\n    return result;\n}\nfunction Type(tag, options) {\n    options = options || {};\n    Object.keys(options).forEach(function(name) {\n        if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n            throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n        }\n    });\n    // TODO: Add tag format check.\n    this.tag = tag;\n    this.kind = options[\"kind\"] || null;\n    this.resolve = options[\"resolve\"] || function() {\n        return true;\n    };\n    this.construct = options[\"construct\"] || function(data) {\n        return data;\n    };\n    this.instanceOf = options[\"instanceOf\"] || null;\n    this.predicate = options[\"predicate\"] || null;\n    this.represent = options[\"represent\"] || null;\n    this.defaultStyle = options[\"defaultStyle\"] || null;\n    this.styleAliases = compileStyleAliases(options[\"styleAliases\"] || null);\n    if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n        throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n    }\n}\nmodule.exports = Type;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxnQkFBZ0JDLG1CQUFPQSxDQUFDO0FBRTVCLElBQUlDLDJCQUEyQjtJQUM3QjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxJQUFJQyxrQkFBa0I7SUFDcEI7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxTQUFTQyxvQkFBb0JDLEdBQUc7SUFDOUIsSUFBSUMsU0FBUyxDQUFDO0lBRWQsSUFBSUQsUUFBUSxNQUFNO1FBQ2hCRSxPQUFPQyxJQUFJLENBQUNILEtBQUtJLE9BQU8sQ0FBQyxTQUFVQyxLQUFLO1lBQ3RDTCxHQUFHLENBQUNLLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDLFNBQVVFLEtBQUs7Z0JBQ2hDTCxNQUFNLENBQUNNLE9BQU9ELE9BQU8sR0FBR0Q7WUFDMUI7UUFDRjtJQUNGO0lBRUEsT0FBT0o7QUFDVDtBQUVBLFNBQVNPLEtBQUtDLEdBQUcsRUFBRUMsT0FBTztJQUN4QkEsVUFBVUEsV0FBVyxDQUFDO0lBRXRCUixPQUFPQyxJQUFJLENBQUNPLFNBQVNOLE9BQU8sQ0FBQyxTQUFVTyxJQUFJO1FBQ3pDLElBQUlkLHlCQUF5QmUsT0FBTyxDQUFDRCxVQUFVLENBQUMsR0FBRztZQUNqRCxNQUFNLElBQUloQixjQUFjLHFCQUFxQmdCLE9BQU8sZ0NBQWdDRixNQUFNO1FBQzVGO0lBQ0Y7SUFFQSw4QkFBOEI7SUFDOUIsSUFBSSxDQUFDQSxHQUFHLEdBQVlBO0lBQ3BCLElBQUksQ0FBQ0ksSUFBSSxHQUFXSCxPQUFPLENBQUMsT0FBTyxJQUFZO0lBQy9DLElBQUksQ0FBQ0ksT0FBTyxHQUFRSixPQUFPLENBQUMsVUFBVSxJQUFTO1FBQWMsT0FBTztJQUFNO0lBQzFFLElBQUksQ0FBQ0ssU0FBUyxHQUFNTCxPQUFPLENBQUMsWUFBWSxJQUFPLFNBQVVNLElBQUk7UUFBSSxPQUFPQTtJQUFNO0lBQzlFLElBQUksQ0FBQ0MsVUFBVSxHQUFLUCxPQUFPLENBQUMsYUFBYSxJQUFNO0lBQy9DLElBQUksQ0FBQ1EsU0FBUyxHQUFNUixPQUFPLENBQUMsWUFBWSxJQUFPO0lBQy9DLElBQUksQ0FBQ1MsU0FBUyxHQUFNVCxPQUFPLENBQUMsWUFBWSxJQUFPO0lBQy9DLElBQUksQ0FBQ1UsWUFBWSxHQUFHVixPQUFPLENBQUMsZUFBZSxJQUFJO0lBQy9DLElBQUksQ0FBQ1csWUFBWSxHQUFHdEIsb0JBQW9CVyxPQUFPLENBQUMsZUFBZSxJQUFJO0lBRW5FLElBQUlaLGdCQUFnQmMsT0FBTyxDQUFDLElBQUksQ0FBQ0MsSUFBSSxNQUFNLENBQUMsR0FBRztRQUM3QyxNQUFNLElBQUlsQixjQUFjLG1CQUFtQixJQUFJLENBQUNrQixJQUFJLEdBQUcseUJBQXlCSixNQUFNO0lBQ3hGO0FBQ0Y7QUFFQWEsT0FBT0MsT0FBTyxHQUFHZiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlLmpzP2Y2Y2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgWUFNTEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vZXhjZXB0aW9uJyk7XG5cbnZhciBUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMgPSBbXG4gICdraW5kJyxcbiAgJ3Jlc29sdmUnLFxuICAnY29uc3RydWN0JyxcbiAgJ2luc3RhbmNlT2YnLFxuICAncHJlZGljYXRlJyxcbiAgJ3JlcHJlc2VudCcsXG4gICdkZWZhdWx0U3R5bGUnLFxuICAnc3R5bGVBbGlhc2VzJ1xuXTtcblxudmFyIFlBTUxfTk9ERV9LSU5EUyA9IFtcbiAgJ3NjYWxhcicsXG4gICdzZXF1ZW5jZScsXG4gICdtYXBwaW5nJ1xuXTtcblxuZnVuY3Rpb24gY29tcGlsZVN0eWxlQWxpYXNlcyhtYXApIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuXG4gIGlmIChtYXAgIT09IG51bGwpIHtcbiAgICBPYmplY3Qua2V5cyhtYXApLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBtYXBbc3R5bGVdLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzKSB7XG4gICAgICAgIHJlc3VsdFtTdHJpbmcoYWxpYXMpXSA9IHN0eWxlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBUeXBlKHRhZywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUy5pbmRleE9mKG5hbWUpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24gb3B0aW9uIFwiJyArIG5hbWUgKyAnXCIgaXMgbWV0IGluIGRlZmluaXRpb24gb2YgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIFRPRE86IEFkZCB0YWcgZm9ybWF0IGNoZWNrLlxuICB0aGlzLnRhZyAgICAgICAgICA9IHRhZztcbiAgdGhpcy5raW5kICAgICAgICAgPSBvcHRpb25zWydraW5kJ10gICAgICAgICB8fCBudWxsO1xuICB0aGlzLnJlc29sdmUgICAgICA9IG9wdGlvbnNbJ3Jlc29sdmUnXSAgICAgIHx8IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH07XG4gIHRoaXMuY29uc3RydWN0ICAgID0gb3B0aW9uc1snY29uc3RydWN0J10gICAgfHwgZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGE7IH07XG4gIHRoaXMuaW5zdGFuY2VPZiAgID0gb3B0aW9uc1snaW5zdGFuY2VPZiddICAgfHwgbnVsbDtcbiAgdGhpcy5wcmVkaWNhdGUgICAgPSBvcHRpb25zWydwcmVkaWNhdGUnXSAgICB8fCBudWxsO1xuICB0aGlzLnJlcHJlc2VudCAgICA9IG9wdGlvbnNbJ3JlcHJlc2VudCddICAgIHx8IG51bGw7XG4gIHRoaXMuZGVmYXVsdFN0eWxlID0gb3B0aW9uc1snZGVmYXVsdFN0eWxlJ10gfHwgbnVsbDtcbiAgdGhpcy5zdHlsZUFsaWFzZXMgPSBjb21waWxlU3R5bGVBbGlhc2VzKG9wdGlvbnNbJ3N0eWxlQWxpYXNlcyddIHx8IG51bGwpO1xuXG4gIGlmIChZQU1MX05PREVfS0lORFMuaW5kZXhPZih0aGlzLmtpbmQpID09PSAtMSkge1xuICAgIHRocm93IG5ldyBZQU1MRXhjZXB0aW9uKCdVbmtub3duIGtpbmQgXCInICsgdGhpcy5raW5kICsgJ1wiIGlzIHNwZWNpZmllZCBmb3IgXCInICsgdGFnICsgJ1wiIFlBTUwgdHlwZS4nKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFR5cGU7XG4iXSwibmFtZXMiOlsiWUFNTEV4Y2VwdGlvbiIsInJlcXVpcmUiLCJUWVBFX0NPTlNUUlVDVE9SX09QVElPTlMiLCJZQU1MX05PREVfS0lORFMiLCJjb21waWxlU3R5bGVBbGlhc2VzIiwibWFwIiwicmVzdWx0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJzdHlsZSIsImFsaWFzIiwiU3RyaW5nIiwiVHlwZSIsInRhZyIsIm9wdGlvbnMiLCJuYW1lIiwiaW5kZXhPZiIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwiZGF0YSIsImluc3RhbmNlT2YiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJkZWZhdWx0U3R5bGUiLCJzdHlsZUFsaWFzZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*eslint-disable no-bitwise*/ var NodeBuffer;\ntry {\n    // A trick for browserified version, to not include `Buffer` shim\n    var _require = undefined;\n    NodeBuffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n} catch (__) {}\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r\";\nfunction resolveYamlBinary(data) {\n    if (data === null) return false;\n    var code, idx, bitlen = 0, max = data.length, map = BASE64_MAP;\n    // Convert one by one.\n    for(idx = 0; idx < max; idx++){\n        code = map.indexOf(data.charAt(idx));\n        // Skip CR/LF\n        if (code > 64) continue;\n        // Fail on illegal characters\n        if (code < 0) return false;\n        bitlen += 6;\n    }\n    // If there are any bits left, source was corrupted\n    return bitlen % 8 === 0;\n}\nfunction constructYamlBinary(data) {\n    var idx, tailbits, input = data.replace(/[\\r\\n=]/g, \"\"), max = input.length, map = BASE64_MAP, bits = 0, result = [];\n    // Collect by 6*4 bits (3 bytes)\n    for(idx = 0; idx < max; idx++){\n        if (idx % 4 === 0 && idx) {\n            result.push(bits >> 16 & 0xFF);\n            result.push(bits >> 8 & 0xFF);\n            result.push(bits & 0xFF);\n        }\n        bits = bits << 6 | map.indexOf(input.charAt(idx));\n    }\n    // Dump tail\n    tailbits = max % 4 * 6;\n    if (tailbits === 0) {\n        result.push(bits >> 16 & 0xFF);\n        result.push(bits >> 8 & 0xFF);\n        result.push(bits & 0xFF);\n    } else if (tailbits === 18) {\n        result.push(bits >> 10 & 0xFF);\n        result.push(bits >> 2 & 0xFF);\n    } else if (tailbits === 12) {\n        result.push(bits >> 4 & 0xFF);\n    }\n    // Wrap into Buffer for NodeJS and leave Array for browser\n    if (NodeBuffer) {\n        // Support node 6.+ Buffer API when available\n        return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n    }\n    return result;\n}\nfunction representYamlBinary(object /*, style*/ ) {\n    var result = \"\", bits = 0, idx, tail, max = object.length, map = BASE64_MAP;\n    // Convert every three bytes to 4 ASCII characters.\n    for(idx = 0; idx < max; idx++){\n        if (idx % 3 === 0 && idx) {\n            result += map[bits >> 18 & 0x3F];\n            result += map[bits >> 12 & 0x3F];\n            result += map[bits >> 6 & 0x3F];\n            result += map[bits & 0x3F];\n        }\n        bits = (bits << 8) + object[idx];\n    }\n    // Dump tail\n    tail = max % 3;\n    if (tail === 0) {\n        result += map[bits >> 18 & 0x3F];\n        result += map[bits >> 12 & 0x3F];\n        result += map[bits >> 6 & 0x3F];\n        result += map[bits & 0x3F];\n    } else if (tail === 2) {\n        result += map[bits >> 10 & 0x3F];\n        result += map[bits >> 4 & 0x3F];\n        result += map[bits << 2 & 0x3F];\n        result += map[64];\n    } else if (tail === 1) {\n        result += map[bits >> 2 & 0x3F];\n        result += map[bits << 4 & 0x3F];\n        result += map[64];\n        result += map[64];\n    }\n    return result;\n}\nfunction isBinary(object) {\n    return NodeBuffer && NodeBuffer.isBuffer(object);\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:binary\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBinary,\n    construct: constructYamlBinary,\n    predicate: isBinary,\n    represent: representYamlBinary\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlBoolean(data) {\n    if (data === null) return false;\n    var max = data.length;\n    return max === 4 && (data === \"true\" || data === \"True\" || data === \"TRUE\") || max === 5 && (data === \"false\" || data === \"False\" || data === \"FALSE\");\n}\nfunction constructYamlBoolean(data) {\n    return data === \"true\" || data === \"True\" || data === \"TRUE\";\n}\nfunction isBoolean(object) {\n    return Object.prototype.toString.call(object) === \"[object Boolean]\";\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:bool\", {\n    kind: \"scalar\",\n    resolve: resolveYamlBoolean,\n    construct: constructYamlBoolean,\n    predicate: isBoolean,\n    represent: {\n        lowercase: function(object) {\n            return object ? \"true\" : \"false\";\n        },\n        uppercase: function(object) {\n            return object ? \"TRUE\" : \"FALSE\";\n        },\n        camelcase: function(object) {\n            return object ? \"True\" : \"False\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvYm9vbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNDLG1CQUFtQkMsSUFBSTtJQUM5QixJQUFJQSxTQUFTLE1BQU0sT0FBTztJQUUxQixJQUFJQyxNQUFNRCxLQUFLRSxNQUFNO0lBRXJCLE9BQU8sUUFBUyxLQUFNRixDQUFBQSxTQUFTLFVBQVVBLFNBQVMsVUFBVUEsU0FBUyxNQUFLLEtBQ2xFQyxRQUFRLEtBQU1ELENBQUFBLFNBQVMsV0FBV0EsU0FBUyxXQUFXQSxTQUFTLE9BQU07QUFDL0U7QUFFQSxTQUFTRyxxQkFBcUJILElBQUk7SUFDaEMsT0FBT0EsU0FBUyxVQUNUQSxTQUFTLFVBQ1RBLFNBQVM7QUFDbEI7QUFFQSxTQUFTSSxVQUFVQyxNQUFNO0lBQ3ZCLE9BQU9DLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNKLFlBQVk7QUFDcEQ7QUFFQUssT0FBT0MsT0FBTyxHQUFHLElBQUlkLEtBQUssMEJBQTBCO0lBQ2xEZSxNQUFNO0lBQ05DLFNBQVNkO0lBQ1RlLFdBQVdYO0lBQ1hZLFdBQVdYO0lBQ1hZLFdBQVc7UUFDVEMsV0FBVyxTQUFVWixNQUFNO1lBQUksT0FBT0EsU0FBUyxTQUFTO1FBQVM7UUFDakVhLFdBQVcsU0FBVWIsTUFBTTtZQUFJLE9BQU9BLFNBQVMsU0FBUztRQUFTO1FBQ2pFYyxXQUFXLFNBQVVkLE1BQU07WUFBSSxPQUFPQSxTQUFTLFNBQVM7UUFBUztJQUNuRTtJQUNBZSxjQUFjO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvYm9vbC5qcz8zNDA5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sQm9vbGVhbihkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIG1heCA9IGRhdGEubGVuZ3RoO1xuXG4gIHJldHVybiAobWF4ID09PSA0ICYmIChkYXRhID09PSAndHJ1ZScgfHwgZGF0YSA9PT0gJ1RydWUnIHx8IGRhdGEgPT09ICdUUlVFJykpIHx8XG4gICAgICAgICAobWF4ID09PSA1ICYmIChkYXRhID09PSAnZmFsc2UnIHx8IGRhdGEgPT09ICdGYWxzZScgfHwgZGF0YSA9PT0gJ0ZBTFNFJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sQm9vbGVhbihkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAndHJ1ZScgfHxcbiAgICAgICAgIGRhdGEgPT09ICdUcnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RSVUUnO1xufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpib29sJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCb29sZWFuLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxCb29sZWFuLFxuICBwcmVkaWNhdGU6IGlzQm9vbGVhbixcbiAgcmVwcmVzZW50OiB7XG4gICAgbG93ZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAndHJ1ZScgOiAnZmFsc2UnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RSVUUnIDogJ0ZBTFNFJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICdUcnVlJyA6ICdGYWxzZSc7IH1cbiAgfSxcbiAgZGVmYXVsdFN0eWxlOiAnbG93ZXJjYXNlJ1xufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbEJvb2xlYW4iLCJkYXRhIiwibWF4IiwibGVuZ3RoIiwiY29uc3RydWN0WWFtbEJvb2xlYW4iLCJpc0Jvb2xlYW4iLCJvYmplY3QiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiLCJsb3dlcmNhc2UiLCJ1cHBlcmNhc2UiLCJjYW1lbGNhc2UiLCJkZWZhdWx0U3R5bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar common = __webpack_require__(/*! ../common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar YAML_FLOAT_PATTERN = new RegExp(// 2.5e4, 2.5 and integers\n\"^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?\" + // .2e4, .2\n// special case, seems not from spec\n\"|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?\" + // 20:59\n\"|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*\" + // .inf\n\"|[-+]?\\\\.(?:inf|Inf|INF)\" + // .nan\n\"|\\\\.(?:nan|NaN|NAN))$\");\nfunction resolveYamlFloat(data) {\n    if (data === null) return false;\n    if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n    // Probably should update regexp & check speed\n    data[data.length - 1] === \"_\") {\n        return false;\n    }\n    return true;\n}\nfunction constructYamlFloat(data) {\n    var value, sign, base, digits;\n    value = data.replace(/_/g, \"\").toLowerCase();\n    sign = value[0] === \"-\" ? -1 : 1;\n    digits = [];\n    if (\"+-\".indexOf(value[0]) >= 0) {\n        value = value.slice(1);\n    }\n    if (value === \".inf\") {\n        return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n    } else if (value === \".nan\") {\n        return NaN;\n    } else if (value.indexOf(\":\") >= 0) {\n        value.split(\":\").forEach(function(v) {\n            digits.unshift(parseFloat(v, 10));\n        });\n        value = 0.0;\n        base = 1;\n        digits.forEach(function(d) {\n            value += d * base;\n            base *= 60;\n        });\n        return sign * value;\n    }\n    return sign * parseFloat(value, 10);\n}\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\nfunction representYamlFloat(object, style) {\n    var res;\n    if (isNaN(object)) {\n        switch(style){\n            case \"lowercase\":\n                return \".nan\";\n            case \"uppercase\":\n                return \".NAN\";\n            case \"camelcase\":\n                return \".NaN\";\n        }\n    } else if (Number.POSITIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \".inf\";\n            case \"uppercase\":\n                return \".INF\";\n            case \"camelcase\":\n                return \".Inf\";\n        }\n    } else if (Number.NEGATIVE_INFINITY === object) {\n        switch(style){\n            case \"lowercase\":\n                return \"-.inf\";\n            case \"uppercase\":\n                return \"-.INF\";\n            case \"camelcase\":\n                return \"-.Inf\";\n        }\n    } else if (common.isNegativeZero(object)) {\n        return \"-0.0\";\n    }\n    res = object.toString(10);\n    // JS stringifier can build scientific format without dots: 5e-100,\n    // while YAML requres dot: 5.e-100. Fix it with simple hack\n    return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace(\"e\", \".e\") : res;\n}\nfunction isFloat(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && (object % 1 !== 0 || common.isNegativeZero(object));\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:float\", {\n    kind: \"scalar\",\n    resolve: resolveYamlFloat,\n    construct: constructYamlFloat,\n    predicate: isFloat,\n    represent: representYamlFloat,\n    defaultStyle: \"lowercase\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvZmxvYXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxPQUFTRCxtQkFBT0EsQ0FBQztBQUVyQixJQUFJRSxxQkFBcUIsSUFBSUMsT0FDM0IsMEJBQTBCO0FBQzFCLG1FQUNBLFdBQVc7QUFDWCxvQ0FBb0M7QUFDcEMsb0NBQ0EsUUFBUTtBQUNSLGtEQUNBLE9BQU87QUFDUCw2QkFDQSxPQUFPO0FBQ1A7QUFFRixTQUFTQyxpQkFBaUJDLElBQUk7SUFDNUIsSUFBSUEsU0FBUyxNQUFNLE9BQU87SUFFMUIsSUFBSSxDQUFDSCxtQkFBbUJJLElBQUksQ0FBQ0QsU0FDekIsZ0RBQWdEO0lBQ2hELDhDQUE4QztJQUM5Q0EsSUFBSSxDQUFDQSxLQUFLRSxNQUFNLEdBQUcsRUFBRSxLQUFLLEtBQUs7UUFDakMsT0FBTztJQUNUO0lBRUEsT0FBTztBQUNUO0FBRUEsU0FBU0MsbUJBQW1CSCxJQUFJO0lBQzlCLElBQUlJLE9BQU9DLE1BQU1DLE1BQU1DO0lBRXZCSCxRQUFTSixLQUFLUSxPQUFPLENBQUMsTUFBTSxJQUFJQyxXQUFXO0lBQzNDSixPQUFTRCxLQUFLLENBQUMsRUFBRSxLQUFLLE1BQU0sQ0FBQyxJQUFJO0lBQ2pDRyxTQUFTLEVBQUU7SUFFWCxJQUFJLEtBQUtHLE9BQU8sQ0FBQ04sS0FBSyxDQUFDLEVBQUUsS0FBSyxHQUFHO1FBQy9CQSxRQUFRQSxNQUFNTyxLQUFLLENBQUM7SUFDdEI7SUFFQSxJQUFJUCxVQUFVLFFBQVE7UUFDcEIsT0FBTyxTQUFVLElBQUtRLE9BQU9DLGlCQUFpQixHQUFHRCxPQUFPRSxpQkFBaUI7SUFFM0UsT0FBTyxJQUFJVixVQUFVLFFBQVE7UUFDM0IsT0FBT1c7SUFFVCxPQUFPLElBQUlYLE1BQU1NLE9BQU8sQ0FBQyxRQUFRLEdBQUc7UUFDbENOLE1BQU1ZLEtBQUssQ0FBQyxLQUFLQyxPQUFPLENBQUMsU0FBVUMsQ0FBQztZQUNsQ1gsT0FBT1ksT0FBTyxDQUFDQyxXQUFXRixHQUFHO1FBQy9CO1FBRUFkLFFBQVE7UUFDUkUsT0FBTztRQUVQQyxPQUFPVSxPQUFPLENBQUMsU0FBVUksQ0FBQztZQUN4QmpCLFNBQVNpQixJQUFJZjtZQUNiQSxRQUFRO1FBQ1Y7UUFFQSxPQUFPRCxPQUFPRDtJQUVoQjtJQUNBLE9BQU9DLE9BQU9lLFdBQVdoQixPQUFPO0FBQ2xDO0FBR0EsSUFBSWtCLHlCQUF5QjtBQUU3QixTQUFTQyxtQkFBbUJDLE1BQU0sRUFBRUMsS0FBSztJQUN2QyxJQUFJQztJQUVKLElBQUlDLE1BQU1ILFNBQVM7UUFDakIsT0FBUUM7WUFDTixLQUFLO2dCQUFhLE9BQU87WUFDekIsS0FBSztnQkFBYSxPQUFPO1lBQ3pCLEtBQUs7Z0JBQWEsT0FBTztRQUMzQjtJQUNGLE9BQU8sSUFBSWIsT0FBT0MsaUJBQWlCLEtBQUtXLFFBQVE7UUFDOUMsT0FBUUM7WUFDTixLQUFLO2dCQUFhLE9BQU87WUFDekIsS0FBSztnQkFBYSxPQUFPO1lBQ3pCLEtBQUs7Z0JBQWEsT0FBTztRQUMzQjtJQUNGLE9BQU8sSUFBSWIsT0FBT0UsaUJBQWlCLEtBQUtVLFFBQVE7UUFDOUMsT0FBUUM7WUFDTixLQUFLO2dCQUFhLE9BQU87WUFDekIsS0FBSztnQkFBYSxPQUFPO1lBQ3pCLEtBQUs7Z0JBQWEsT0FBTztRQUMzQjtJQUNGLE9BQU8sSUFBSS9CLE9BQU9rQyxjQUFjLENBQUNKLFNBQVM7UUFDeEMsT0FBTztJQUNUO0lBRUFFLE1BQU1GLE9BQU9LLFFBQVEsQ0FBQztJQUV0QixtRUFBbUU7SUFDbkUsMkRBQTJEO0lBRTNELE9BQU9QLHVCQUF1QnJCLElBQUksQ0FBQ3lCLE9BQU9BLElBQUlsQixPQUFPLENBQUMsS0FBSyxRQUFRa0I7QUFDckU7QUFFQSxTQUFTSSxRQUFRTixNQUFNO0lBQ3JCLE9BQU8sT0FBUVEsU0FBUyxDQUFDSCxRQUFRLENBQUNJLElBQUksQ0FBQ1QsWUFBWSxxQkFDM0NBLENBQUFBLFNBQVMsTUFBTSxLQUFLOUIsT0FBT2tDLGNBQWMsQ0FBQ0osT0FBTTtBQUMxRDtBQUVBVSxPQUFPQyxPQUFPLEdBQUcsSUFBSXZDLEtBQUssMkJBQTJCO0lBQ25Ed0MsTUFBTTtJQUNOQyxTQUFTdEM7SUFDVHVDLFdBQVduQztJQUNYb0MsV0FBV1Q7SUFDWFUsV0FBV2pCO0lBQ1hrQixjQUFjO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvZmxvYXQuanM/ODQxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb24gPSByZXF1aXJlKCcuLi9jb21tb24nKTtcbnZhciBUeXBlICAgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBZQU1MX0ZMT0FUX1BBVFRFUk4gPSBuZXcgUmVnRXhwKFxuICAvLyAyLjVlNCwgMi41IGFuZCBpbnRlZ2Vyc1xuICAnXig/OlstK10/KD86MHxbMS05XVswLTlfXSopKD86XFxcXC5bMC05X10qKT8oPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAuMmU0LCAuMlxuICAvLyBzcGVjaWFsIGNhc2UsIHNlZW1zIG5vdCBmcm9tIHNwZWNcbiAgJ3xcXFxcLlswLTlfXSsoPzpbZUVdWy0rXT9bMC05XSspPycgK1xuICAvLyAyMDo1OVxuICAnfFstK10/WzAtOV1bMC05X10qKD86OlswLTVdP1swLTldKStcXFxcLlswLTlfXSonICtcbiAgLy8gLmluZlxuICAnfFstK10/XFxcXC4oPzppbmZ8SW5mfElORiknICtcbiAgLy8gLm5hblxuICAnfFxcXFwuKD86bmFufE5hTnxOQU4pKSQnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxGbG9hdChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFZQU1MX0ZMT0FUX1BBVFRFUk4udGVzdChkYXRhKSB8fFxuICAgICAgLy8gUXVpY2sgaGFjayB0byBub3QgYWxsb3cgaW50ZWdlcnMgZW5kIHdpdGggYF9gXG4gICAgICAvLyBQcm9iYWJseSBzaG91bGQgdXBkYXRlIHJlZ2V4cCAmIGNoZWNrIHNwZWVkXG4gICAgICBkYXRhW2RhdGEubGVuZ3RoIC0gMV0gPT09ICdfJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sRmxvYXQoZGF0YSkge1xuICB2YXIgdmFsdWUsIHNpZ24sIGJhc2UsIGRpZ2l0cztcblxuICB2YWx1ZSAgPSBkYXRhLnJlcGxhY2UoL18vZywgJycpLnRvTG93ZXJDYXNlKCk7XG4gIHNpZ24gICA9IHZhbHVlWzBdID09PSAnLScgPyAtMSA6IDE7XG4gIGRpZ2l0cyA9IFtdO1xuXG4gIGlmICgnKy0nLmluZGV4T2YodmFsdWVbMF0pID49IDApIHtcbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDEpO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSAnLmluZicpIHtcbiAgICByZXR1cm4gKHNpZ24gPT09IDEpID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xuXG4gIH0gZWxzZSBpZiAodmFsdWUgPT09ICcubmFuJykge1xuICAgIHJldHVybiBOYU47XG5cbiAgfSBlbHNlIGlmICh2YWx1ZS5pbmRleE9mKCc6JykgPj0gMCkge1xuICAgIHZhbHVlLnNwbGl0KCc6JykuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgZGlnaXRzLnVuc2hpZnQocGFyc2VGbG9hdCh2LCAxMCkpO1xuICAgIH0pO1xuXG4gICAgdmFsdWUgPSAwLjA7XG4gICAgYmFzZSA9IDE7XG5cbiAgICBkaWdpdHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xuICAgICAgdmFsdWUgKz0gZCAqIGJhc2U7XG4gICAgICBiYXNlICo9IDYwO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpZ24gKiB2YWx1ZTtcblxuICB9XG4gIHJldHVybiBzaWduICogcGFyc2VGbG9hdCh2YWx1ZSwgMTApO1xufVxuXG5cbnZhciBTQ0lFTlRJRklDX1dJVEhPVVRfRE9UID0gL15bLStdP1swLTldK2UvO1xuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sRmxvYXQob2JqZWN0LCBzdHlsZSkge1xuICB2YXIgcmVzO1xuXG4gIGlmIChpc05hTihvYmplY3QpKSB7XG4gICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgY2FzZSAnbG93ZXJjYXNlJzogcmV0dXJuICcubmFuJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLk5BTic7XG4gICAgICBjYXNlICdjYW1lbGNhc2UnOiByZXR1cm4gJy5OYU4nO1xuICAgIH1cbiAgfSBlbHNlIGlmIChOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPT09IG9iamVjdCkge1xuICAgIHN3aXRjaCAoc3R5bGUpIHtcbiAgICAgIGNhc2UgJ2xvd2VyY2FzZSc6IHJldHVybiAnLmluZic7XG4gICAgICBjYXNlICd1cHBlcmNhc2UnOiByZXR1cm4gJy5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICcuSW5mJztcbiAgICB9XG4gIH0gZWxzZSBpZiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSBvYmplY3QpIHtcbiAgICBzd2l0Y2ggKHN0eWxlKSB7XG4gICAgICBjYXNlICdsb3dlcmNhc2UnOiByZXR1cm4gJy0uaW5mJztcbiAgICAgIGNhc2UgJ3VwcGVyY2FzZSc6IHJldHVybiAnLS5JTkYnO1xuICAgICAgY2FzZSAnY2FtZWxjYXNlJzogcmV0dXJuICctLkluZic7XG4gICAgfVxuICB9IGVsc2UgaWYgKGNvbW1vbi5pc05lZ2F0aXZlWmVybyhvYmplY3QpKSB7XG4gICAgcmV0dXJuICctMC4wJztcbiAgfVxuXG4gIHJlcyA9IG9iamVjdC50b1N0cmluZygxMCk7XG5cbiAgLy8gSlMgc3RyaW5naWZpZXIgY2FuIGJ1aWxkIHNjaWVudGlmaWMgZm9ybWF0IHdpdGhvdXQgZG90czogNWUtMTAwLFxuICAvLyB3aGlsZSBZQU1MIHJlcXVyZXMgZG90OiA1LmUtMTAwLiBGaXggaXQgd2l0aCBzaW1wbGUgaGFja1xuXG4gIHJldHVybiBTQ0lFTlRJRklDX1dJVEhPVVRfRE9ULnRlc3QocmVzKSA/IHJlcy5yZXBsYWNlKCdlJywgJy5lJykgOiByZXM7XG59XG5cbmZ1bmN0aW9uIGlzRmxvYXQob2JqZWN0KSB7XG4gIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IE51bWJlcl0nKSAmJlxuICAgICAgICAgKG9iamVjdCAlIDEgIT09IDAgfHwgY29tbW9uLmlzTmVnYXRpdmVaZXJvKG9iamVjdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sRmxvYXQsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEZsb2F0LFxuICBwcmVkaWNhdGU6IGlzRmxvYXQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50WWFtbEZsb2F0LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJjb21tb24iLCJyZXF1aXJlIiwiVHlwZSIsIllBTUxfRkxPQVRfUEFUVEVSTiIsIlJlZ0V4cCIsInJlc29sdmVZYW1sRmxvYXQiLCJkYXRhIiwidGVzdCIsImxlbmd0aCIsImNvbnN0cnVjdFlhbWxGbG9hdCIsInZhbHVlIiwic2lnbiIsImJhc2UiLCJkaWdpdHMiLCJyZXBsYWNlIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2xpY2UiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIk5FR0FUSVZFX0lORklOSVRZIiwiTmFOIiwic3BsaXQiLCJmb3JFYWNoIiwidiIsInVuc2hpZnQiLCJwYXJzZUZsb2F0IiwiZCIsIlNDSUVOVElGSUNfV0lUSE9VVF9ET1QiLCJyZXByZXNlbnRZYW1sRmxvYXQiLCJvYmplY3QiLCJzdHlsZSIsInJlcyIsImlzTmFOIiwiaXNOZWdhdGl2ZVplcm8iLCJ0b1N0cmluZyIsImlzRmxvYXQiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50IiwiZGVmYXVsdFN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js":
/*!********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar common = __webpack_require__(/*! ../common */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction isHexCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x39 /* 9 */  || 0x41 /* A */  <= c && c <= 0x46 /* F */  || 0x61 /* a */  <= c && c <= 0x66 /* f */ ;\n}\nfunction isOctCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x37 /* 7 */ ;\n}\nfunction isDecCode(c) {\n    return 0x30 /* 0 */  <= c && c <= 0x39 /* 9 */ ;\n}\nfunction resolveYamlInteger(data) {\n    if (data === null) return false;\n    var max = data.length, index = 0, hasDigits = false, ch;\n    if (!max) return false;\n    ch = data[index];\n    // sign\n    if (ch === \"-\" || ch === \"+\") {\n        ch = data[++index];\n    }\n    if (ch === \"0\") {\n        // 0\n        if (index + 1 === max) return true;\n        ch = data[++index];\n        // base 2, base 8, base 16\n        if (ch === \"b\") {\n            // base 2\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (ch !== \"0\" && ch !== \"1\") return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        if (ch === \"x\") {\n            // base 16\n            index++;\n            for(; index < max; index++){\n                ch = data[index];\n                if (ch === \"_\") continue;\n                if (!isHexCode(data.charCodeAt(index))) return false;\n                hasDigits = true;\n            }\n            return hasDigits && ch !== \"_\";\n        }\n        // base 8\n        for(; index < max; index++){\n            ch = data[index];\n            if (ch === \"_\") continue;\n            if (!isOctCode(data.charCodeAt(index))) return false;\n            hasDigits = true;\n        }\n        return hasDigits && ch !== \"_\";\n    }\n    // base 10 (except 0) or base 60\n    // value should not start with `_`;\n    if (ch === \"_\") return false;\n    for(; index < max; index++){\n        ch = data[index];\n        if (ch === \"_\") continue;\n        if (ch === \":\") break;\n        if (!isDecCode(data.charCodeAt(index))) {\n            return false;\n        }\n        hasDigits = true;\n    }\n    // Should have digits and should not end with `_`\n    if (!hasDigits || ch === \"_\") return false;\n    // if !base60 - done;\n    if (ch !== \":\") return true;\n    // base60 almost not used, no needs to optimize\n    return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\nfunction constructYamlInteger(data) {\n    var value = data, sign = 1, ch, base, digits = [];\n    if (value.indexOf(\"_\") !== -1) {\n        value = value.replace(/_/g, \"\");\n    }\n    ch = value[0];\n    if (ch === \"-\" || ch === \"+\") {\n        if (ch === \"-\") sign = -1;\n        value = value.slice(1);\n        ch = value[0];\n    }\n    if (value === \"0\") return 0;\n    if (ch === \"0\") {\n        if (value[1] === \"b\") return sign * parseInt(value.slice(2), 2);\n        if (value[1] === \"x\") return sign * parseInt(value, 16);\n        return sign * parseInt(value, 8);\n    }\n    if (value.indexOf(\":\") !== -1) {\n        value.split(\":\").forEach(function(v) {\n            digits.unshift(parseInt(v, 10));\n        });\n        value = 0;\n        base = 1;\n        digits.forEach(function(d) {\n            value += d * base;\n            base *= 60;\n        });\n        return sign * value;\n    }\n    return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n    return Object.prototype.toString.call(object) === \"[object Number]\" && object % 1 === 0 && !common.isNegativeZero(object);\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:int\", {\n    kind: \"scalar\",\n    resolve: resolveYamlInteger,\n    construct: constructYamlInteger,\n    predicate: isInteger,\n    represent: {\n        binary: function(obj) {\n            return obj >= 0 ? \"0b\" + obj.toString(2) : \"-0b\" + obj.toString(2).slice(1);\n        },\n        octal: function(obj) {\n            return obj >= 0 ? \"0\" + obj.toString(8) : \"-0\" + obj.toString(8).slice(1);\n        },\n        decimal: function(obj) {\n            return obj.toString(10);\n        },\n        /* eslint-disable max-len */ hexadecimal: function(obj) {\n            return obj >= 0 ? \"0x\" + obj.toString(16).toUpperCase() : \"-0x\" + obj.toString(16).toUpperCase().slice(1);\n        }\n    },\n    defaultStyle: \"decimal\",\n    styleAliases: {\n        binary: [\n            2,\n            \"bin\"\n        ],\n        octal: [\n            8,\n            \"oct\"\n        ],\n        decimal: [\n            10,\n            \"dec\"\n        ],\n        hexadecimal: [\n            16,\n            \"hex\"\n        ]\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar esprima;\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n    // workaround to exclude package from browserify list.\n    var _require = undefined;\n    esprima = __webpack_require__(/*! esprima */ \"(rsc)/../node_modules/esprima/dist/esprima.js\");\n} catch (_) {\n    /* eslint-disable no-redeclare */ /* global window */ if (false) {}\n}\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptFunction(data) {\n    if (data === null) return false;\n    try {\n        var source = \"(\" + data + \")\", ast = esprima.parse(source, {\n            range: true\n        });\n        if (ast.type !== \"Program\" || ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\" || ast.body[0].expression.type !== \"ArrowFunctionExpression\" && ast.body[0].expression.type !== \"FunctionExpression\") {\n            return false;\n        }\n        return true;\n    } catch (err) {\n        return false;\n    }\n}\nfunction constructJavascriptFunction(data) {\n    /*jslint evil:true*/ var source = \"(\" + data + \")\", ast = esprima.parse(source, {\n        range: true\n    }), params = [], body;\n    if (ast.type !== \"Program\" || ast.body.length !== 1 || ast.body[0].type !== \"ExpressionStatement\" || ast.body[0].expression.type !== \"ArrowFunctionExpression\" && ast.body[0].expression.type !== \"FunctionExpression\") {\n        throw new Error(\"Failed to resolve function\");\n    }\n    ast.body[0].expression.params.forEach(function(param) {\n        params.push(param.name);\n    });\n    body = ast.body[0].expression.body.range;\n    // Esprima's ranges include the first '{' and the last '}' characters on\n    // function expressions. So cut them out.\n    if (ast.body[0].expression.body.type === \"BlockStatement\") {\n        /*eslint-disable no-new-func*/ return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n    }\n    // ES6 arrow functions can omit the BlockStatement. In that case, just return\n    // the body.\n    /*eslint-disable no-new-func*/ return new Function(params, \"return \" + source.slice(body[0], body[1]));\n}\nfunction representJavascriptFunction(object /*, style*/ ) {\n    return object.toString();\n}\nfunction isFunction(object) {\n    return Object.prototype.toString.call(object) === \"[object Function]\";\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:js/function\", {\n    kind: \"scalar\",\n    resolve: resolveJavascriptFunction,\n    construct: constructJavascriptFunction,\n    predicate: isFunction,\n    represent: representJavascriptFunction\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvanMvZnVuY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQTtBQUVKLDZDQUE2QztBQUM3QyxFQUFFO0FBQ0YsNkNBQTZDO0FBQzdDLGdFQUFnRTtBQUNoRSw4REFBOEQ7QUFDOUQscUNBQXFDO0FBQ3JDLEVBQUU7QUFDRixJQUFJO0lBQ0Ysc0RBQXNEO0lBQ3RELElBQUlDLFdBQVdDLFNBQU9BO0lBQ3RCRixVQUFVQyxtQkFBUUEsQ0FBQztBQUNyQixFQUFFLE9BQU9FLEdBQUc7SUFDViwrQkFBK0IsR0FDL0IsaUJBQWlCLEdBQ2pCLElBQUksS0FBa0IsRUFBYUgsRUFBeUI7QUFDOUQ7QUFFQSxJQUFJSyxPQUFPSCxtQkFBT0EsQ0FBQztBQUVuQixTQUFTSSwwQkFBMEJDLElBQUk7SUFDckMsSUFBSUEsU0FBUyxNQUFNLE9BQU87SUFFMUIsSUFBSTtRQUNGLElBQUlDLFNBQVMsTUFBTUQsT0FBTyxLQUN0QkUsTUFBU1QsUUFBUVUsS0FBSyxDQUFDRixRQUFRO1lBQUVHLE9BQU87UUFBSztRQUVqRCxJQUFJRixJQUFJRyxJQUFJLEtBQXdCLGFBQ2hDSCxJQUFJSSxJQUFJLENBQUNDLE1BQU0sS0FBaUIsS0FDaENMLElBQUlJLElBQUksQ0FBQyxFQUFFLENBQUNELElBQUksS0FBZ0IseUJBQy9CSCxJQUFJSSxJQUFJLENBQUMsRUFBRSxDQUFDRSxVQUFVLENBQUNILElBQUksS0FBSyw2QkFDL0JILElBQUlJLElBQUksQ0FBQyxFQUFFLENBQUNFLFVBQVUsQ0FBQ0gsSUFBSSxLQUFLLHNCQUF1QjtZQUMzRCxPQUFPO1FBQ1Q7UUFFQSxPQUFPO0lBQ1QsRUFBRSxPQUFPSSxLQUFLO1FBQ1osT0FBTztJQUNUO0FBQ0Y7QUFFQSxTQUFTQyw0QkFBNEJWLElBQUk7SUFDdkMsa0JBQWtCLEdBRWxCLElBQUlDLFNBQVMsTUFBTUQsT0FBTyxLQUN0QkUsTUFBU1QsUUFBUVUsS0FBSyxDQUFDRixRQUFRO1FBQUVHLE9BQU87SUFBSyxJQUM3Q08sU0FBUyxFQUFFLEVBQ1hMO0lBRUosSUFBSUosSUFBSUcsSUFBSSxLQUF3QixhQUNoQ0gsSUFBSUksSUFBSSxDQUFDQyxNQUFNLEtBQWlCLEtBQ2hDTCxJQUFJSSxJQUFJLENBQUMsRUFBRSxDQUFDRCxJQUFJLEtBQWdCLHlCQUMvQkgsSUFBSUksSUFBSSxDQUFDLEVBQUUsQ0FBQ0UsVUFBVSxDQUFDSCxJQUFJLEtBQUssNkJBQy9CSCxJQUFJSSxJQUFJLENBQUMsRUFBRSxDQUFDRSxVQUFVLENBQUNILElBQUksS0FBSyxzQkFBdUI7UUFDM0QsTUFBTSxJQUFJTyxNQUFNO0lBQ2xCO0lBRUFWLElBQUlJLElBQUksQ0FBQyxFQUFFLENBQUNFLFVBQVUsQ0FBQ0csTUFBTSxDQUFDRSxPQUFPLENBQUMsU0FBVUMsS0FBSztRQUNuREgsT0FBT0ksSUFBSSxDQUFDRCxNQUFNRSxJQUFJO0lBQ3hCO0lBRUFWLE9BQU9KLElBQUlJLElBQUksQ0FBQyxFQUFFLENBQUNFLFVBQVUsQ0FBQ0YsSUFBSSxDQUFDRixLQUFLO0lBRXhDLHdFQUF3RTtJQUN4RSx5Q0FBeUM7SUFDekMsSUFBSUYsSUFBSUksSUFBSSxDQUFDLEVBQUUsQ0FBQ0UsVUFBVSxDQUFDRixJQUFJLENBQUNELElBQUksS0FBSyxrQkFBa0I7UUFDekQsNEJBQTRCLEdBQzVCLE9BQU8sSUFBSVksU0FBU04sUUFBUVYsT0FBT2lCLEtBQUssQ0FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUFHQSxJQUFJLENBQUMsRUFBRSxHQUFHO0lBQ2xFO0lBQ0EsNkVBQTZFO0lBQzdFLFlBQVk7SUFDWiw0QkFBNEIsR0FDNUIsT0FBTyxJQUFJVyxTQUFTTixRQUFRLFlBQVlWLE9BQU9pQixLQUFLLENBQUNaLElBQUksQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxFQUFFO0FBQ3ZFO0FBRUEsU0FBU2EsNEJBQTRCQyxPQUFPLFNBQVMsR0FBVjtJQUN6QyxPQUFPQSxPQUFPQyxRQUFRO0FBQ3hCO0FBRUEsU0FBU0MsV0FBV0YsTUFBTTtJQUN4QixPQUFPRyxPQUFPQyxTQUFTLENBQUNILFFBQVEsQ0FBQ0ksSUFBSSxDQUFDTCxZQUFZO0FBQ3BEO0FBRUFNLE9BQU9DLE9BQU8sR0FBRyxJQUFJN0IsS0FBSyxpQ0FBaUM7SUFDekQ4QixNQUFNO0lBQ05DLFNBQVM5QjtJQUNUK0IsV0FBV3BCO0lBQ1hxQixXQUFXVDtJQUNYVSxXQUFXYjtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvanMvZnVuY3Rpb24uanM/NGNkNSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBlc3ByaW1hO1xuXG4vLyBCcm93c2VyaWZpZWQgdmVyc2lvbiBkb2VzIG5vdCBoYXZlIGVzcHJpbWFcbi8vXG4vLyAxLiBGb3Igbm9kZS5qcyBqdXN0IHJlcXVpcmUgbW9kdWxlIGFzIGRlcHNcbi8vIDIuIEZvciBicm93c2VyIHRyeSB0byByZXF1aXJlIG11ZHVsZSB2aWEgZXh0ZXJuYWwgQU1EIHN5c3RlbS5cbi8vICAgIElmIG5vdCBmb3VuZCAtIHRyeSB0byBmYWxsYmFjayB0byB3aW5kb3cuZXNwcmltYS4gSWYgbm90XG4vLyAgICBmb3VuZCB0b28gLSB0aGVuIGZhaWwgdG8gcGFyc2UuXG4vL1xudHJ5IHtcbiAgLy8gd29ya2Fyb3VuZCB0byBleGNsdWRlIHBhY2thZ2UgZnJvbSBicm93c2VyaWZ5IGxpc3QuXG4gIHZhciBfcmVxdWlyZSA9IHJlcXVpcmU7XG4gIGVzcHJpbWEgPSBfcmVxdWlyZSgnZXNwcmltYScpO1xufSBjYXRjaCAoXykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgLyogZ2xvYmFsIHdpbmRvdyAqL1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIGVzcHJpbWEgPSB3aW5kb3cuZXNwcmltYTtcbn1cblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0RnVuY3Rpb24oZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHRyeSB7XG4gICAgdmFyIHNvdXJjZSA9ICcoJyArIGRhdGEgKyAnKScsXG4gICAgICAgIGFzdCAgICA9IGVzcHJpbWEucGFyc2Uoc291cmNlLCB7IHJhbmdlOiB0cnVlIH0pO1xuXG4gICAgaWYgKGFzdC50eXBlICAgICAgICAgICAgICAgICAgICAhPT0gJ1Byb2dyYW0nICAgICAgICAgICAgIHx8XG4gICAgICAgIGFzdC5ib2R5Lmxlbmd0aCAgICAgICAgICAgICAhPT0gMSAgICAgICAgICAgICAgICAgICAgIHx8XG4gICAgICAgIGFzdC5ib2R5WzBdLnR5cGUgICAgICAgICAgICAhPT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnIHx8XG4gICAgICAgIChhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgIT09ICdBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbicgJiZcbiAgICAgICAgICBhc3QuYm9keVswXS5leHByZXNzaW9uLnR5cGUgIT09ICdGdW5jdGlvbkV4cHJlc3Npb24nKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdEZ1bmN0aW9uKGRhdGEpIHtcbiAgLypqc2xpbnQgZXZpbDp0cnVlKi9cblxuICB2YXIgc291cmNlID0gJygnICsgZGF0YSArICcpJyxcbiAgICAgIGFzdCAgICA9IGVzcHJpbWEucGFyc2Uoc291cmNlLCB7IHJhbmdlOiB0cnVlIH0pLFxuICAgICAgcGFyYW1zID0gW10sXG4gICAgICBib2R5O1xuXG4gIGlmIChhc3QudHlwZSAgICAgICAgICAgICAgICAgICAgIT09ICdQcm9ncmFtJyAgICAgICAgICAgICB8fFxuICAgICAgYXN0LmJvZHkubGVuZ3RoICAgICAgICAgICAgICE9PSAxICAgICAgICAgICAgICAgICAgICAgfHxcbiAgICAgIGFzdC5ib2R5WzBdLnR5cGUgICAgICAgICAgICAhPT0gJ0V4cHJlc3Npb25TdGF0ZW1lbnQnIHx8XG4gICAgICAoYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlICE9PSAnQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24nICYmXG4gICAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSAhPT0gJ0Z1bmN0aW9uRXhwcmVzc2lvbicpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gcmVzb2x2ZSBmdW5jdGlvbicpO1xuICB9XG5cbiAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi5wYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICBwYXJhbXMucHVzaChwYXJhbS5uYW1lKTtcbiAgfSk7XG5cbiAgYm9keSA9IGFzdC5ib2R5WzBdLmV4cHJlc3Npb24uYm9keS5yYW5nZTtcblxuICAvLyBFc3ByaW1hJ3MgcmFuZ2VzIGluY2x1ZGUgdGhlIGZpcnN0ICd7JyBhbmQgdGhlIGxhc3QgJ30nIGNoYXJhY3RlcnMgb25cbiAgLy8gZnVuY3Rpb24gZXhwcmVzc2lvbnMuIFNvIGN1dCB0aGVtIG91dC5cbiAgaWYgKGFzdC5ib2R5WzBdLmV4cHJlc3Npb24uYm9keS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG4gICAgLyplc2xpbnQtZGlzYWJsZSBuby1uZXctZnVuYyovXG4gICAgcmV0dXJuIG5ldyBGdW5jdGlvbihwYXJhbXMsIHNvdXJjZS5zbGljZShib2R5WzBdICsgMSwgYm9keVsxXSAtIDEpKTtcbiAgfVxuICAvLyBFUzYgYXJyb3cgZnVuY3Rpb25zIGNhbiBvbWl0IHRoZSBCbG9ja1N0YXRlbWVudC4gSW4gdGhhdCBjYXNlLCBqdXN0IHJldHVyblxuICAvLyB0aGUgYm9keS5cbiAgLyplc2xpbnQtZGlzYWJsZSBuby1uZXctZnVuYyovXG4gIHJldHVybiBuZXcgRnVuY3Rpb24ocGFyYW1zLCAncmV0dXJuICcgKyBzb3VyY2Uuc2xpY2UoYm9keVswXSwgYm9keVsxXSkpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0RnVuY3Rpb24ob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHJldHVybiBvYmplY3QudG9TdHJpbmcoKTtcbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy9mdW5jdGlvbicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0RnVuY3Rpb24sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdEZ1bmN0aW9uLFxuICBwcmVkaWNhdGU6IGlzRnVuY3Rpb24sXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdEZ1bmN0aW9uXG59KTtcbiJdLCJuYW1lcyI6WyJlc3ByaW1hIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiXyIsIndpbmRvdyIsIlR5cGUiLCJyZXNvbHZlSmF2YXNjcmlwdEZ1bmN0aW9uIiwiZGF0YSIsInNvdXJjZSIsImFzdCIsInBhcnNlIiwicmFuZ2UiLCJ0eXBlIiwiYm9keSIsImxlbmd0aCIsImV4cHJlc3Npb24iLCJlcnIiLCJjb25zdHJ1Y3RKYXZhc2NyaXB0RnVuY3Rpb24iLCJwYXJhbXMiLCJFcnJvciIsImZvckVhY2giLCJwYXJhbSIsInB1c2giLCJuYW1lIiwiRnVuY3Rpb24iLCJzbGljZSIsInJlcHJlc2VudEphdmFzY3JpcHRGdW5jdGlvbiIsIm9iamVjdCIsInRvU3RyaW5nIiwiaXNGdW5jdGlvbiIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptRegExp(data) {\n    if (data === null) return false;\n    if (data.length === 0) return false;\n    var regexp = data, tail = /\\/([gim]*)$/.exec(data), modifiers = \"\";\n    // if regexp starts with '/' it can have modifiers and must be properly closed\n    // `/foo/gim` - modifiers tail can be maximum 3 chars\n    if (regexp[0] === \"/\") {\n        if (tail) modifiers = tail[1];\n        if (modifiers.length > 3) return false;\n        // if expression starts with /, is should be properly terminated\n        if (regexp[regexp.length - modifiers.length - 1] !== \"/\") return false;\n    }\n    return true;\n}\nfunction constructJavascriptRegExp(data) {\n    var regexp = data, tail = /\\/([gim]*)$/.exec(data), modifiers = \"\";\n    // `/foo/gim` - tail can be maximum 4 chars\n    if (regexp[0] === \"/\") {\n        if (tail) modifiers = tail[1];\n        regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n    }\n    return new RegExp(regexp, modifiers);\n}\nfunction representJavascriptRegExp(object /*, style*/ ) {\n    var result = \"/\" + object.source + \"/\";\n    if (object.global) result += \"g\";\n    if (object.multiline) result += \"m\";\n    if (object.ignoreCase) result += \"i\";\n    return result;\n}\nfunction isRegExp(object) {\n    return Object.prototype.toString.call(object) === \"[object RegExp]\";\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:js/regexp\", {\n    kind: \"scalar\",\n    resolve: resolveJavascriptRegExp,\n    construct: constructJavascriptRegExp,\n    predicate: isRegExp,\n    represent: representJavascriptRegExp\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvanMvcmVnZXhwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0Msd0JBQXdCQyxJQUFJO0lBQ25DLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBQzFCLElBQUlBLEtBQUtDLE1BQU0sS0FBSyxHQUFHLE9BQU87SUFFOUIsSUFBSUMsU0FBU0YsTUFDVEcsT0FBUyxjQUFjQyxJQUFJLENBQUNKLE9BQzVCSyxZQUFZO0lBRWhCLDhFQUE4RTtJQUM5RSxxREFBcUQ7SUFDckQsSUFBSUgsTUFBTSxDQUFDLEVBQUUsS0FBSyxLQUFLO1FBQ3JCLElBQUlDLE1BQU1FLFlBQVlGLElBQUksQ0FBQyxFQUFFO1FBRTdCLElBQUlFLFVBQVVKLE1BQU0sR0FBRyxHQUFHLE9BQU87UUFDakMsZ0VBQWdFO1FBQ2hFLElBQUlDLE1BQU0sQ0FBQ0EsT0FBT0QsTUFBTSxHQUFHSSxVQUFVSixNQUFNLEdBQUcsRUFBRSxLQUFLLEtBQUssT0FBTztJQUNuRTtJQUVBLE9BQU87QUFDVDtBQUVBLFNBQVNLLDBCQUEwQk4sSUFBSTtJQUNyQyxJQUFJRSxTQUFTRixNQUNURyxPQUFTLGNBQWNDLElBQUksQ0FBQ0osT0FDNUJLLFlBQVk7SUFFaEIsMkNBQTJDO0lBQzNDLElBQUlILE1BQU0sQ0FBQyxFQUFFLEtBQUssS0FBSztRQUNyQixJQUFJQyxNQUFNRSxZQUFZRixJQUFJLENBQUMsRUFBRTtRQUM3QkQsU0FBU0EsT0FBT0ssS0FBSyxDQUFDLEdBQUdMLE9BQU9ELE1BQU0sR0FBR0ksVUFBVUosTUFBTSxHQUFHO0lBQzlEO0lBRUEsT0FBTyxJQUFJTyxPQUFPTixRQUFRRztBQUM1QjtBQUVBLFNBQVNJLDBCQUEwQkMsT0FBTyxTQUFTLEdBQVY7SUFDdkMsSUFBSUMsU0FBUyxNQUFNRCxPQUFPRSxNQUFNLEdBQUc7SUFFbkMsSUFBSUYsT0FBT0csTUFBTSxFQUFFRixVQUFVO0lBQzdCLElBQUlELE9BQU9JLFNBQVMsRUFBRUgsVUFBVTtJQUNoQyxJQUFJRCxPQUFPSyxVQUFVLEVBQUVKLFVBQVU7SUFFakMsT0FBT0E7QUFDVDtBQUVBLFNBQVNLLFNBQVNOLE1BQU07SUFDdEIsT0FBT08sT0FBT0MsU0FBUyxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ1YsWUFBWTtBQUNwRDtBQUVBVyxPQUFPQyxPQUFPLEdBQUcsSUFBSXpCLEtBQUssK0JBQStCO0lBQ3ZEMEIsTUFBTTtJQUNOQyxTQUFTekI7SUFDVDBCLFdBQVduQjtJQUNYb0IsV0FBV1Y7SUFDWFcsV0FBV2xCO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanM/YWY3NiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChkYXRhLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGlmIHJlZ2V4cCBzdGFydHMgd2l0aCAnLycgaXQgY2FuIGhhdmUgbW9kaWZpZXJzIGFuZCBtdXN0IGJlIHByb3Blcmx5IGNsb3NlZFxuICAvLyBgL2Zvby9naW1gIC0gbW9kaWZpZXJzIHRhaWwgY2FuIGJlIG1heGltdW0gMyBjaGFyc1xuICBpZiAocmVnZXhwWzBdID09PSAnLycpIHtcbiAgICBpZiAodGFpbCkgbW9kaWZpZXJzID0gdGFpbFsxXTtcblxuICAgIGlmIChtb2RpZmllcnMubGVuZ3RoID4gMykgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGlmIGV4cHJlc3Npb24gc3RhcnRzIHdpdGggLywgaXMgc2hvdWxkIGJlIHByb3Blcmx5IHRlcm1pbmF0ZWRcbiAgICBpZiAocmVnZXhwW3JlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMV0gIT09ICcvJykgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdEphdmFzY3JpcHRSZWdFeHAoZGF0YSkge1xuICB2YXIgcmVnZXhwID0gZGF0YSxcbiAgICAgIHRhaWwgICA9IC9cXC8oW2dpbV0qKSQvLmV4ZWMoZGF0YSksXG4gICAgICBtb2RpZmllcnMgPSAnJztcblxuICAvLyBgL2Zvby9naW1gIC0gdGFpbCBjYW4gYmUgbWF4aW11bSA0IGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuICAgIHJlZ2V4cCA9IHJlZ2V4cC5zbGljZSgxLCByZWdleHAubGVuZ3RoIC0gbW9kaWZpZXJzLmxlbmd0aCAtIDEpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXhwLCBtb2RpZmllcnMpO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwKG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJy8nICsgb2JqZWN0LnNvdXJjZSArICcvJztcblxuICBpZiAob2JqZWN0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcbiAgaWYgKG9iamVjdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmIChvYmplY3QuaWdub3JlQ2FzZSkgcmVzdWx0ICs9ICdpJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBpc1JlZ0V4cChvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6anMvcmVnZXhwJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZUphdmFzY3JpcHRSZWdFeHAsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cCxcbiAgcHJlZGljYXRlOiBpc1JlZ0V4cCxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVKYXZhc2NyaXB0UmVnRXhwIiwiZGF0YSIsImxlbmd0aCIsInJlZ2V4cCIsInRhaWwiLCJleGVjIiwibW9kaWZpZXJzIiwiY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cCIsInNsaWNlIiwiUmVnRXhwIiwicmVwcmVzZW50SmF2YXNjcmlwdFJlZ0V4cCIsIm9iamVjdCIsInJlc3VsdCIsInNvdXJjZSIsImdsb2JhbCIsIm11bHRpbGluZSIsImlnbm9yZUNhc2UiLCJpc1JlZ0V4cCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptUndefined() {\n    return true;\n}\nfunction constructJavascriptUndefined() {\n    /*eslint-disable no-undefined*/ return undefined;\n}\nfunction representJavascriptUndefined() {\n    return \"\";\n}\nfunction isUndefined(object) {\n    return typeof object === \"undefined\";\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:js/undefined\", {\n    kind: \"scalar\",\n    resolve: resolveJavascriptUndefined,\n    construct: constructJavascriptUndefined,\n    predicate: isUndefined,\n    represent: representJavascriptUndefined\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvanMvdW5kZWZpbmVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsU0FBU0M7SUFDUCxPQUFPO0FBQ1Q7QUFFQSxTQUFTQztJQUNQLDZCQUE2QixHQUM3QixPQUFPQztBQUNUO0FBRUEsU0FBU0M7SUFDUCxPQUFPO0FBQ1Q7QUFFQSxTQUFTQyxZQUFZQyxNQUFNO0lBQ3pCLE9BQU8sT0FBT0EsV0FBVztBQUMzQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUcsSUFBSVQsS0FBSyxrQ0FBa0M7SUFDMURVLE1BQU07SUFDTkMsU0FBU1Q7SUFDVFUsV0FBV1Q7SUFDWFUsV0FBV1A7SUFDWFEsV0FBV1Q7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3VuZGVmaW5lZC5qcz9mOWViIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmpzL3VuZGVmaW5lZCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQsXG4gIHByZWRpY2F0ZTogaXNVbmRlZmluZWQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZFxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlSmF2YXNjcmlwdFVuZGVmaW5lZCIsImNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQiLCJ1bmRlZmluZWQiLCJyZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkIiwiaXNVbmRlZmluZWQiLCJvYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js":
/*!********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type(\"tag:yaml.org,2002:map\", {\n    kind: \"mapping\",\n    construct: function(data) {\n        return data !== null ? data : {};\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkJDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCxLQUFLLHlCQUF5QjtJQUNqREksTUFBTTtJQUNOQyxXQUFXLFNBQVVDLElBQUk7UUFBSSxPQUFPQSxTQUFTLE9BQU9BLE9BQU8sQ0FBQztJQUFHO0FBQ2pFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWFwLmpzPzkwNzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWFwJywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307IH1cbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJjb25zdHJ1Y3QiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlMerge(data) {\n    return data === \"<<\" || data === null;\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:merge\", {\n    kind: \"scalar\",\n    resolve: resolveYamlMerge\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWVyZ2UuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQixTQUFTQyxpQkFBaUJDLElBQUk7SUFDNUIsT0FBT0EsU0FBUyxRQUFRQSxTQUFTO0FBQ25DO0FBRUFDLE9BQU9DLE9BQU8sR0FBRyxJQUFJTCxLQUFLLDJCQUEyQjtJQUNuRE0sTUFBTTtJQUNOQyxTQUFTTDtBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbWVyZ2UuanM/NWZjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE1lcmdlKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICc8PCcgfHwgZGF0YSA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE1lcmdlXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sTWVyZ2UiLCJkYXRhIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlNull(data) {\n    if (data === null) return true;\n    var max = data.length;\n    return max === 1 && data === \"~\" || max === 4 && (data === \"null\" || data === \"Null\" || data === \"NULL\");\n}\nfunction constructYamlNull() {\n    return null;\n}\nfunction isNull(object) {\n    return object === null;\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:null\", {\n    kind: \"scalar\",\n    resolve: resolveYamlNull,\n    construct: constructYamlNull,\n    predicate: isNull,\n    represent: {\n        canonical: function() {\n            return \"~\";\n        },\n        lowercase: function() {\n            return \"null\";\n        },\n        uppercase: function() {\n            return \"NULL\";\n        },\n        camelcase: function() {\n            return \"Null\";\n        }\n    },\n    defaultStyle: \"lowercase\"\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbnVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLFNBQVNDLGdCQUFnQkMsSUFBSTtJQUMzQixJQUFJQSxTQUFTLE1BQU0sT0FBTztJQUUxQixJQUFJQyxNQUFNRCxLQUFLRSxNQUFNO0lBRXJCLE9BQU8sUUFBUyxLQUFLRixTQUFTLE9BQ3RCQyxRQUFRLEtBQU1ELENBQUFBLFNBQVMsVUFBVUEsU0FBUyxVQUFVQSxTQUFTLE1BQUs7QUFDNUU7QUFFQSxTQUFTRztJQUNQLE9BQU87QUFDVDtBQUVBLFNBQVNDLE9BQU9DLE1BQU07SUFDcEIsT0FBT0EsV0FBVztBQUNwQjtBQUVBQyxPQUFPQyxPQUFPLEdBQUcsSUFBSVYsS0FBSywwQkFBMEI7SUFDbERXLE1BQU07SUFDTkMsU0FBU1Y7SUFDVFcsV0FBV1A7SUFDWFEsV0FBV1A7SUFDWFEsV0FBVztRQUNUQyxXQUFXO1lBQWMsT0FBTztRQUFRO1FBQ3hDQyxXQUFXO1lBQWMsT0FBTztRQUFRO1FBQ3hDQyxXQUFXO1lBQWMsT0FBTztRQUFRO1FBQ3hDQyxXQUFXO1lBQWMsT0FBTztRQUFRO0lBQzFDO0lBQ0FDLGNBQWM7QUFDaEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9udWxsLmpzPzNmOWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxOdWxsKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBtYXggPSBkYXRhLmxlbmd0aDtcblxuICByZXR1cm4gKG1heCA9PT0gMSAmJiBkYXRhID09PSAnficpIHx8XG4gICAgICAgICAobWF4ID09PSA0ICYmIChkYXRhID09PSAnbnVsbCcgfHwgZGF0YSA9PT0gJ051bGwnIHx8IGRhdGEgPT09ICdOVUxMJykpO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sTnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCA9PT0gbnVsbDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sTnVsbCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sTnVsbCxcbiAgcHJlZGljYXRlOiBpc051bGwsXG4gIHJlcHJlc2VudDoge1xuICAgIGNhbm9uaWNhbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ34nOyAgICB9LFxuICAgIGxvd2VyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ251bGwnOyB9LFxuICAgIHVwcGVyY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ05VTEwnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gJ051bGwnOyB9XG4gIH0sXG4gIGRlZmF1bHRTdHlsZTogJ2xvd2VyY2FzZSdcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwicmVzb2x2ZVlhbWxOdWxsIiwiZGF0YSIsIm1heCIsImxlbmd0aCIsImNvbnN0cnVjdFlhbWxOdWxsIiwiaXNOdWxsIiwib2JqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50IiwiY2Fub25pY2FsIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwiY2FtZWxjYXNlIiwiZGVmYXVsdFN0eWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js":
/*!*********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n    if (data === null) return true;\n    var objectKeys = [], index, length, pair, pairKey, pairHasKey, object = data;\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        pairHasKey = false;\n        if (_toString.call(pair) !== \"[object Object]\") return false;\n        for(pairKey in pair){\n            if (_hasOwnProperty.call(pair, pairKey)) {\n                if (!pairHasKey) pairHasKey = true;\n                else return false;\n            }\n        }\n        if (!pairHasKey) return false;\n        if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);\n        else return false;\n    }\n    return true;\n}\nfunction constructYamlOmap(data) {\n    return data !== null ? data : [];\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:omap\", {\n    kind: \"sequence\",\n    resolve: resolveYamlOmap,\n    construct: constructYamlOmap\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvb21hcC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBRW5CLElBQUlDLGtCQUFrQkMsT0FBT0MsU0FBUyxDQUFDQyxjQUFjO0FBQ3JELElBQUlDLFlBQWtCSCxPQUFPQyxTQUFTLENBQUNHLFFBQVE7QUFFL0MsU0FBU0MsZ0JBQWdCQyxJQUFJO0lBQzNCLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBRTFCLElBQUlDLGFBQWEsRUFBRSxFQUFFQyxPQUFPQyxRQUFRQyxNQUFNQyxTQUFTQyxZQUMvQ0MsU0FBU1A7SUFFYixJQUFLRSxRQUFRLEdBQUdDLFNBQVNJLE9BQU9KLE1BQU0sRUFBRUQsUUFBUUMsUUFBUUQsU0FBUyxFQUFHO1FBQ2xFRSxPQUFPRyxNQUFNLENBQUNMLE1BQU07UUFDcEJJLGFBQWE7UUFFYixJQUFJVCxVQUFVVyxJQUFJLENBQUNKLFVBQVUsbUJBQW1CLE9BQU87UUFFdkQsSUFBS0MsV0FBV0QsS0FBTTtZQUNwQixJQUFJWCxnQkFBZ0JlLElBQUksQ0FBQ0osTUFBTUMsVUFBVTtnQkFDdkMsSUFBSSxDQUFDQyxZQUFZQSxhQUFhO3FCQUN6QixPQUFPO1lBQ2Q7UUFDRjtRQUVBLElBQUksQ0FBQ0EsWUFBWSxPQUFPO1FBRXhCLElBQUlMLFdBQVdRLE9BQU8sQ0FBQ0osYUFBYSxDQUFDLEdBQUdKLFdBQVdTLElBQUksQ0FBQ0w7YUFDbkQsT0FBTztJQUNkO0lBRUEsT0FBTztBQUNUO0FBRUEsU0FBU00sa0JBQWtCWCxJQUFJO0lBQzdCLE9BQU9BLFNBQVMsT0FBT0EsT0FBTyxFQUFFO0FBQ2xDO0FBRUFZLE9BQU9DLE9BQU8sR0FBRyxJQUFJdEIsS0FBSywwQkFBMEI7SUFDbER1QixNQUFNO0lBQ05DLFNBQVNoQjtJQUNUaUIsV0FBV0w7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL29tYXAuanM/NWNiMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgX2hhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBfdG9TdHJpbmcgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbE9tYXAoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIG9iamVjdEtleXMgPSBbXSwgaW5kZXgsIGxlbmd0aCwgcGFpciwgcGFpcktleSwgcGFpckhhc0tleSxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG4gICAgcGFpckhhc0tleSA9IGZhbHNlO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yIChwYWlyS2V5IGluIHBhaXIpIHtcbiAgICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChwYWlyLCBwYWlyS2V5KSkge1xuICAgICAgICBpZiAoIXBhaXJIYXNLZXkpIHBhaXJIYXNLZXkgPSB0cnVlO1xuICAgICAgICBlbHNlIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXBhaXJIYXNLZXkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChvYmplY3RLZXlzLmluZGV4T2YocGFpcktleSkgPT09IC0xKSBvYmplY3RLZXlzLnB1c2gocGFpcktleSk7XG4gICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE9tYXAoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiBbXTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6b21hcCcsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxPbWFwLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxPbWFwXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiX3RvU3RyaW5nIiwidG9TdHJpbmciLCJyZXNvbHZlWWFtbE9tYXAiLCJkYXRhIiwib2JqZWN0S2V5cyIsImluZGV4IiwibGVuZ3RoIiwicGFpciIsInBhaXJLZXkiLCJwYWlySGFzS2V5Iiwib2JqZWN0IiwiY2FsbCIsImluZGV4T2YiLCJwdXNoIiwiY29uc3RydWN0WWFtbE9tYXAiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _toString = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n    if (data === null) return true;\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        if (_toString.call(pair) !== \"[object Object]\") return false;\n        keys = Object.keys(pair);\n        if (keys.length !== 1) return false;\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return true;\n}\nfunction constructYamlPairs(data) {\n    if (data === null) return [];\n    var index, length, pair, keys, result, object = data;\n    result = new Array(object.length);\n    for(index = 0, length = object.length; index < length; index += 1){\n        pair = object[index];\n        keys = Object.keys(pair);\n        result[index] = [\n            keys[0],\n            pair[keys[0]]\n        ];\n    }\n    return result;\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:pairs\", {\n    kind: \"sequence\",\n    resolve: resolveYamlPairs,\n    construct: constructYamlPairs\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvcGFpcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUVuQixJQUFJQyxZQUFZQyxPQUFPQyxTQUFTLENBQUNDLFFBQVE7QUFFekMsU0FBU0MsaUJBQWlCQyxJQUFJO0lBQzVCLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBRTFCLElBQUlDLE9BQU9DLFFBQVFDLE1BQU1DLE1BQU1DLFFBQzNCQyxTQUFTTjtJQUViSyxTQUFTLElBQUlFLE1BQU1ELE9BQU9KLE1BQU07SUFFaEMsSUFBS0QsUUFBUSxHQUFHQyxTQUFTSSxPQUFPSixNQUFNLEVBQUVELFFBQVFDLFFBQVFELFNBQVMsRUFBRztRQUNsRUUsT0FBT0csTUFBTSxDQUFDTCxNQUFNO1FBRXBCLElBQUlOLFVBQVVhLElBQUksQ0FBQ0wsVUFBVSxtQkFBbUIsT0FBTztRQUV2REMsT0FBT1IsT0FBT1EsSUFBSSxDQUFDRDtRQUVuQixJQUFJQyxLQUFLRixNQUFNLEtBQUssR0FBRyxPQUFPO1FBRTlCRyxNQUFNLENBQUNKLE1BQU0sR0FBRztZQUFFRyxJQUFJLENBQUMsRUFBRTtZQUFFRCxJQUFJLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUM7U0FBRTtJQUM1QztJQUVBLE9BQU87QUFDVDtBQUVBLFNBQVNLLG1CQUFtQlQsSUFBSTtJQUM5QixJQUFJQSxTQUFTLE1BQU0sT0FBTyxFQUFFO0lBRTVCLElBQUlDLE9BQU9DLFFBQVFDLE1BQU1DLE1BQU1DLFFBQzNCQyxTQUFTTjtJQUViSyxTQUFTLElBQUlFLE1BQU1ELE9BQU9KLE1BQU07SUFFaEMsSUFBS0QsUUFBUSxHQUFHQyxTQUFTSSxPQUFPSixNQUFNLEVBQUVELFFBQVFDLFFBQVFELFNBQVMsRUFBRztRQUNsRUUsT0FBT0csTUFBTSxDQUFDTCxNQUFNO1FBRXBCRyxPQUFPUixPQUFPUSxJQUFJLENBQUNEO1FBRW5CRSxNQUFNLENBQUNKLE1BQU0sR0FBRztZQUFFRyxJQUFJLENBQUMsRUFBRTtZQUFFRCxJQUFJLENBQUNDLElBQUksQ0FBQyxFQUFFLENBQUM7U0FBRTtJQUM1QztJQUVBLE9BQU9DO0FBQ1Q7QUFFQUssT0FBT0MsT0FBTyxHQUFHLElBQUlsQixLQUFLLDJCQUEyQjtJQUNuRG1CLE1BQU07SUFDTkMsU0FBU2Q7SUFDVGUsV0FBV0w7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3BhaXJzLmpzPzNkZDgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sUGFpcnMoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIHRydWU7XG5cbiAgdmFyIGluZGV4LCBsZW5ndGgsIHBhaXIsIGtleXMsIHJlc3VsdCxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgcmVzdWx0ID0gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAgaWYgKF90b1N0cmluZy5jYWxsKHBhaXIpICE9PSAnW29iamVjdCBPYmplY3RdJykgcmV0dXJuIGZhbHNlO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgaWYgKGtleXMubGVuZ3RoICE9PSAxKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBbXTtcblxuICB2YXIgaW5kZXgsIGxlbmd0aCwgcGFpciwga2V5cywgcmVzdWx0LFxuICAgICAgb2JqZWN0ID0gZGF0YTtcblxuICByZXN1bHQgPSBuZXcgQXJyYXkob2JqZWN0Lmxlbmd0aCk7XG5cbiAgZm9yIChpbmRleCA9IDAsIGxlbmd0aCA9IG9iamVjdC5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgcGFpciA9IG9iamVjdFtpbmRleF07XG5cbiAgICBrZXlzID0gT2JqZWN0LmtleXMocGFpcik7XG5cbiAgICByZXN1bHRbaW5kZXhdID0gWyBrZXlzWzBdLCBwYWlyW2tleXNbMF1dIF07XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpwYWlycycsIHtcbiAga2luZDogJ3NlcXVlbmNlJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxQYWlycyxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sUGFpcnNcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiX3RvU3RyaW5nIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJyZXNvbHZlWWFtbFBhaXJzIiwiZGF0YSIsImluZGV4IiwibGVuZ3RoIiwicGFpciIsImtleXMiLCJyZXN1bHQiLCJvYmplY3QiLCJBcnJheSIsImNhbGwiLCJjb25zdHJ1Y3RZYW1sUGFpcnMiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js":
/*!********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type(\"tag:yaml.org,2002:seq\", {\n    kind: \"sequence\",\n    construct: function(data) {\n        return data !== null ? data : [];\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2VxLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkJDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCxLQUFLLHlCQUF5QjtJQUNqREksTUFBTTtJQUNOQyxXQUFXLFNBQVVDLElBQUk7UUFBSSxPQUFPQSxTQUFTLE9BQU9BLE9BQU8sRUFBRTtJQUFFO0FBQ2pFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2VxLmpzPzA2ZWIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js":
/*!********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n    if (data === null) return true;\n    var key, object = data;\n    for(key in object){\n        if (_hasOwnProperty.call(object, key)) {\n            if (object[key] !== null) return false;\n        }\n    }\n    return true;\n}\nfunction constructYamlSet(data) {\n    return data !== null ? data : {};\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:set\", {\n    kind: \"mapping\",\n    resolve: resolveYamlSet,\n    construct: constructYamlSet\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2V0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsa0JBQWtCQyxPQUFPQyxTQUFTLENBQUNDLGNBQWM7QUFFckQsU0FBU0MsZUFBZUMsSUFBSTtJQUMxQixJQUFJQSxTQUFTLE1BQU0sT0FBTztJQUUxQixJQUFJQyxLQUFLQyxTQUFTRjtJQUVsQixJQUFLQyxPQUFPQyxPQUFRO1FBQ2xCLElBQUlQLGdCQUFnQlEsSUFBSSxDQUFDRCxRQUFRRCxNQUFNO1lBQ3JDLElBQUlDLE1BQU0sQ0FBQ0QsSUFBSSxLQUFLLE1BQU0sT0FBTztRQUNuQztJQUNGO0lBRUEsT0FBTztBQUNUO0FBRUEsU0FBU0csaUJBQWlCSixJQUFJO0lBQzVCLE9BQU9BLFNBQVMsT0FBT0EsT0FBTyxDQUFDO0FBQ2pDO0FBRUFLLE9BQU9DLE9BQU8sR0FBRyxJQUFJYixLQUFLLHlCQUF5QjtJQUNqRGMsTUFBTTtJQUNOQyxTQUFTVDtJQUNUVSxXQUFXTDtBQUNiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcG9ydGZvbGlvLXNpdGUvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2V0LmpzP2IxYjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sU2V0KGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBrZXksIG9iamVjdCA9IGRhdGE7XG5cbiAgZm9yIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgaWYgKF9oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkge1xuICAgICAgaWYgKG9iamVjdFtrZXldICE9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxTZXQoZGF0YSkge1xuICByZXR1cm4gZGF0YSAhPT0gbnVsbCA/IGRhdGEgOiB7fTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2V0Jywge1xuICBraW5kOiAnbWFwcGluZycsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sU2V0LFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdFlhbWxTZXRcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiX2hhc093blByb3BlcnR5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJyZXNvbHZlWWFtbFNldCIsImRhdGEiLCJrZXkiLCJvYmplY3QiLCJjYWxsIiwiY29uc3RydWN0WWFtbFNldCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js":
/*!********************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type(\"tag:yaml.org,2002:str\", {\n    kind: \"scalar\",\n    construct: function(data) {\n        return data !== null ? data : \"\";\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc3RyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkJDLE9BQU9DLE9BQU8sR0FBRyxJQUFJSCxLQUFLLHlCQUF5QjtJQUNqREksTUFBTTtJQUNOQyxXQUFXLFNBQVVDLElBQUk7UUFBSSxPQUFPQSxTQUFTLE9BQU9BLE9BQU87SUFBSTtBQUNqRSIsInNvdXJjZXMiOlsid2VicGFjazovL3BvcnRmb2xpby1zaXRlLy4uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3N0ci5qcz8zYjA3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogJyc7IH1cbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJjb25zdHJ1Y3QiLCJkYXRhIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar YAML_DATE_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + // [1] year\n\"-([0-9][0-9])\" + // [2] month\n\"-([0-9][0-9])$\"); // [3] day\nvar YAML_TIMESTAMP_REGEXP = new RegExp(\"^([0-9][0-9][0-9][0-9])\" + // [1] year\n\"-([0-9][0-9]?)\" + // [2] month\n\"-([0-9][0-9]?)\" + // [3] day\n\"(?:[Tt]|[ \\\\t]+)\" + // ...\n\"([0-9][0-9]?)\" + // [4] hour\n\":([0-9][0-9])\" + // [5] minute\n\":([0-9][0-9])\" + // [6] second\n\"(?:\\\\.([0-9]*))?\" + // [7] fraction\n\"(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)\" + // [8] tz [9] tz_sign [10] tz_hour\n\"(?::([0-9][0-9]))?))?$\"); // [11] tz_minute\nfunction resolveYamlTimestamp(data) {\n    if (data === null) return false;\n    if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n    if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n    return false;\n}\nfunction constructYamlTimestamp(data) {\n    var match, year, month, day, hour, minute, second, fraction = 0, delta = null, tz_hour, tz_minute, date;\n    match = YAML_DATE_REGEXP.exec(data);\n    if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n    if (match === null) throw new Error(\"Date resolve error\");\n    // match: [1] year [2] month [3] day\n    year = +match[1];\n    month = +match[2] - 1; // JS month starts with 0\n    day = +match[3];\n    if (!match[4]) {\n        return new Date(Date.UTC(year, month, day));\n    }\n    // match: [4] hour [5] minute [6] second [7] fraction\n    hour = +match[4];\n    minute = +match[5];\n    second = +match[6];\n    if (match[7]) {\n        fraction = match[7].slice(0, 3);\n        while(fraction.length < 3){\n            fraction += \"0\";\n        }\n        fraction = +fraction;\n    }\n    // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n    if (match[9]) {\n        tz_hour = +match[10];\n        tz_minute = +(match[11] || 0);\n        delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n        if (match[9] === \"-\") delta = -delta;\n    }\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n    if (delta) date.setTime(date.getTime() - delta);\n    return date;\n}\nfunction representYamlTimestamp(object /*, style*/ ) {\n    return object.toISOString();\n}\nmodule.exports = new Type(\"tag:yaml.org,2002:timestamp\", {\n    kind: \"scalar\",\n    resolve: resolveYamlTimestamp,\n    construct: constructYamlTimestamp,\n    instanceOf: Date,\n    represent: representYamlTimestamp\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvdGltZXN0YW1wLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFFbkIsSUFBSUMsbUJBQW1CLElBQUlDLE9BQ3pCLDRCQUFxQyxXQUFXO0FBQ2hELGtCQUFxQyxZQUFZO0FBQ2pELG1CQUFxQyxVQUFVO0FBRWpELElBQUlDLHdCQUF3QixJQUFJRCxPQUM5Qiw0QkFBcUMsV0FBVztBQUNoRCxtQkFBcUMsWUFBWTtBQUNqRCxtQkFBcUMsVUFBVTtBQUMvQyxxQkFBcUMsTUFBTTtBQUMzQyxrQkFBcUMsV0FBVztBQUNoRCxrQkFBcUMsYUFBYTtBQUNsRCxrQkFBcUMsYUFBYTtBQUNsRCxxQkFBcUMsZUFBZTtBQUNwRCxxQ0FBcUMsa0NBQWtDO0FBQ3ZFLDJCQUFxQyxpQkFBaUI7QUFFeEQsU0FBU0UscUJBQXFCQyxJQUFJO0lBQ2hDLElBQUlBLFNBQVMsTUFBTSxPQUFPO0lBQzFCLElBQUlKLGlCQUFpQkssSUFBSSxDQUFDRCxVQUFVLE1BQU0sT0FBTztJQUNqRCxJQUFJRixzQkFBc0JHLElBQUksQ0FBQ0QsVUFBVSxNQUFNLE9BQU87SUFDdEQsT0FBTztBQUNUO0FBRUEsU0FBU0UsdUJBQXVCRixJQUFJO0lBQ2xDLElBQUlHLE9BQU9DLE1BQU1DLE9BQU9DLEtBQUtDLE1BQU1DLFFBQVFDLFFBQVFDLFdBQVcsR0FDMURDLFFBQVEsTUFBTUMsU0FBU0MsV0FBV0M7SUFFdENYLFFBQVFQLGlCQUFpQkssSUFBSSxDQUFDRDtJQUM5QixJQUFJRyxVQUFVLE1BQU1BLFFBQVFMLHNCQUFzQkcsSUFBSSxDQUFDRDtJQUV2RCxJQUFJRyxVQUFVLE1BQU0sTUFBTSxJQUFJWSxNQUFNO0lBRXBDLG9DQUFvQztJQUVwQ1gsT0FBTyxDQUFFRCxLQUFLLENBQUMsRUFBRTtJQUNqQkUsUUFBUSxDQUFFRixLQUFLLENBQUMsRUFBRSxHQUFJLEdBQUcseUJBQXlCO0lBQ2xERyxNQUFNLENBQUVILEtBQUssQ0FBQyxFQUFFO0lBRWhCLElBQUksQ0FBQ0EsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUNiLE9BQU8sSUFBSWEsS0FBS0EsS0FBS0MsR0FBRyxDQUFDYixNQUFNQyxPQUFPQztJQUN4QztJQUVBLHFEQUFxRDtJQUVyREMsT0FBTyxDQUFFSixLQUFLLENBQUMsRUFBRTtJQUNqQkssU0FBUyxDQUFFTCxLQUFLLENBQUMsRUFBRTtJQUNuQk0sU0FBUyxDQUFFTixLQUFLLENBQUMsRUFBRTtJQUVuQixJQUFJQSxLQUFLLENBQUMsRUFBRSxFQUFFO1FBQ1pPLFdBQVdQLEtBQUssQ0FBQyxFQUFFLENBQUNlLEtBQUssQ0FBQyxHQUFHO1FBQzdCLE1BQU9SLFNBQVNTLE1BQU0sR0FBRyxFQUFHO1lBQzFCVCxZQUFZO1FBQ2Q7UUFDQUEsV0FBVyxDQUFDQTtJQUNkO0lBRUEsd0RBQXdEO0lBRXhELElBQUlQLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDWlMsVUFBVSxDQUFFVCxLQUFLLENBQUMsR0FBRztRQUNyQlUsWUFBWSxDQUFFVixDQUFBQSxLQUFLLENBQUMsR0FBRyxJQUFJO1FBQzNCUSxRQUFRLENBQUNDLFVBQVUsS0FBS0MsU0FBUSxJQUFLLE9BQU8sd0JBQXdCO1FBQ3BFLElBQUlWLEtBQUssQ0FBQyxFQUFFLEtBQUssS0FBS1EsUUFBUSxDQUFDQTtJQUNqQztJQUVBRyxPQUFPLElBQUlFLEtBQUtBLEtBQUtDLEdBQUcsQ0FBQ2IsTUFBTUMsT0FBT0MsS0FBS0MsTUFBTUMsUUFBUUMsUUFBUUM7SUFFakUsSUFBSUMsT0FBT0csS0FBS00sT0FBTyxDQUFDTixLQUFLTyxPQUFPLEtBQUtWO0lBRXpDLE9BQU9HO0FBQ1Q7QUFFQSxTQUFTUSx1QkFBdUJDLE9BQU8sU0FBUyxHQUFWO0lBQ3BDLE9BQU9BLE9BQU9DLFdBQVc7QUFDM0I7QUFFQUMsT0FBT0MsT0FBTyxHQUFHLElBQUloQyxLQUFLLCtCQUErQjtJQUN2RGlDLE1BQU07SUFDTkMsU0FBUzdCO0lBQ1Q4QixXQUFXM0I7SUFDWDRCLFlBQVlkO0lBQ1plLFdBQVdUO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb3J0Zm9saW8tc2l0ZS8uLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS90aW1lc3RhbXAuanM/ZjQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgWUFNTF9EQVRFX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0pJCcpOyAgICAgICAgICAgICAgICAgICAvLyBbM10gZGF5XG5cbnZhciBZQU1MX1RJTUVTVEFNUF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzNdIGRheVxuICAnKD86W1R0XXxbIFxcXFx0XSspJyAgICAgICAgICAgICAgICAgKyAvLyAuLi5cbiAgJyhbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICArIC8vIFs0XSBob3VyXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNV0gbWludXRlXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNl0gc2Vjb25kXG4gICcoPzpcXFxcLihbMC05XSopKT8nICAgICAgICAgICAgICAgICArIC8vIFs3XSBmcmFjdGlvblxuICAnKD86WyBcXFxcdF0qKFp8KFstK10pKFswLTldWzAtOV0/KScgKyAvLyBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyXG4gICcoPzo6KFswLTldWzAtOV0pKT8pKT8kJyk7ICAgICAgICAgICAvLyBbMTFdIHR6X21pbnV0ZVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICB2YXIgbWF0Y2gsIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbiA9IDAsXG4gICAgICBkZWx0YSA9IG51bGwsIHR6X2hvdXIsIHR6X21pbnV0ZSwgZGF0ZTtcblxuICBtYXRjaCA9IFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSBtYXRjaCA9IFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpO1xuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdEYXRlIHJlc29sdmUgZXJyb3InKTtcblxuICAvLyBtYXRjaDogWzFdIHllYXIgWzJdIG1vbnRoIFszXSBkYXlcblxuICB5ZWFyID0gKyhtYXRjaFsxXSk7XG4gIG1vbnRoID0gKyhtYXRjaFsyXSkgLSAxOyAvLyBKUyBtb250aCBzdGFydHMgd2l0aCAwXG4gIGRheSA9ICsobWF0Y2hbM10pO1xuXG4gIGlmICghbWF0Y2hbNF0pIHsgLy8gbm8gaG91clxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSk7XG4gIH1cblxuICAvLyBtYXRjaDogWzRdIGhvdXIgWzVdIG1pbnV0ZSBbNl0gc2Vjb25kIFs3XSBmcmFjdGlvblxuXG4gIGhvdXIgPSArKG1hdGNoWzRdKTtcbiAgbWludXRlID0gKyhtYXRjaFs1XSk7XG4gIHNlY29uZCA9ICsobWF0Y2hbNl0pO1xuXG4gIGlmIChtYXRjaFs3XSkge1xuICAgIGZyYWN0aW9uID0gbWF0Y2hbN10uc2xpY2UoMCwgMyk7XG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IDMpIHsgLy8gbWlsbGktc2Vjb25kc1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cbiAgICBmcmFjdGlvbiA9ICtmcmFjdGlvbjtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyIFsxMV0gdHpfbWludXRlXG5cbiAgaWYgKG1hdGNoWzldKSB7XG4gICAgdHpfaG91ciA9ICsobWF0Y2hbMTBdKTtcbiAgICB0el9taW51dGUgPSArKG1hdGNoWzExXSB8fCAwKTtcbiAgICBkZWx0YSA9ICh0el9ob3VyICogNjAgKyB0el9taW51dGUpICogNjAwMDA7IC8vIGRlbHRhIGluIG1pbGktc2Vjb25kc1xuICAgIGlmIChtYXRjaFs5XSA9PT0gJy0nKSBkZWx0YSA9IC1kZWx0YTtcbiAgfVxuXG4gIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24pKTtcblxuICBpZiAoZGVsdGEpIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIGRlbHRhKTtcblxuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbFRpbWVzdGFtcChvYmplY3QgLyosIHN0eWxlKi8pIHtcbiAgcmV0dXJuIG9iamVjdC50b0lTT1N0cmluZygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiWUFNTF9EQVRFX1JFR0VYUCIsIlJlZ0V4cCIsIllBTUxfVElNRVNUQU1QX1JFR0VYUCIsInJlc29sdmVZYW1sVGltZXN0YW1wIiwiZGF0YSIsImV4ZWMiLCJjb25zdHJ1Y3RZYW1sVGltZXN0YW1wIiwibWF0Y2giLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZnJhY3Rpb24iLCJkZWx0YSIsInR6X2hvdXIiLCJ0el9taW51dGUiLCJkYXRlIiwiRXJyb3IiLCJEYXRlIiwiVVRDIiwic2xpY2UiLCJsZW5ndGgiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInJlcHJlc2VudFlhbWxUaW1lc3RhbXAiLCJvYmplY3QiLCJ0b0lTT1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsImluc3RhbmNlT2YiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\n");

/***/ })

};
;